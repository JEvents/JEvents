/*! gslUIkit 3.2.6 | http://www.getuikit.com | (c) 2014 - 2019 YOOtheme | MIT License */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define('uikit', factory) :
    (global = global || self, global.gslUIkit = factory());
}(this, (function () { 'use strict';

    var objPrototype = Object.prototype;
    var hasOwnProperty = objPrototype.hasOwnProperty;

    function hasOwn(obj, key) {
        return hasOwnProperty.call(obj, key);
    }

    var hyphenateCache = {};
    var hyphenateRe = /([a-z\d])([A-Z])/g;

    function hyphenate(str) {

        if (!(str in hyphenateCache)) {
            hyphenateCache[str] = str
                .replace(hyphenateRe, '$1-$2')
                .toLowerCase();
        }

        return hyphenateCache[str];
    }

    var camelizeRe = /-(\w)/g;

    function camelize(str) {
        return str.replace(camelizeRe, toUpper);
    }

    function toUpper(_, c) {
        return c ? c.toUpperCase() : '';
    }

    function ucfirst(str) {
        return str.length ? toUpper(null, str.charAt(0)) + str.slice(1) : '';
    }

    var strPrototype = String.prototype;
    var startsWithFn = strPrototype.startsWith || function (search) { return this.lastIndexOf(search, 0) === 0; };

    function startsWith(str, search) {
        return startsWithFn.call(str, search);
    }

    var endsWithFn = strPrototype.endsWith || function (search) { return this.substr(-search.length) === search; };

    function endsWith(str, search) {
        return endsWithFn.call(str, search);
    }

    var arrPrototype = Array.prototype;

    var includesFn = function (search, i) { return ~this.indexOf(search, i); };
    var includesStr = strPrototype.includes || includesFn;
    var includesArray = arrPrototype.includes || includesFn;

    function includes(obj, search) {
        return obj && (isString(obj) ? includesStr : includesArray).call(obj, search);
    }

    var findIndexFn = arrPrototype.findIndex || function (predicate) {
        var arguments$1 = arguments;

        for (var i = 0; i < this.length; i++) {
            if (predicate.call(arguments$1[1], this[i], i, this)) {
                return i;
            }
        }
        return -1;
    };

    function findIndex(array, predicate) {
        return findIndexFn.call(array, predicate);
    }

    var isArray = Array.isArray;

    function isFunction(obj) {
        return typeof obj === 'function';
    }

    function isObject(obj) {
        return obj !== null && typeof obj === 'object';
    }

    var toString = objPrototype.toString;
    function isPlainObject(obj) {
        return toString.call(obj) === '[object Object]';
    }

    function isWindow(obj) {
        return isObject(obj) && obj === obj.window;
    }

    function isDocument(obj) {
        return isObject(obj) && obj.nodeType === 9;
    }

    function isJQuery(obj) {
        return isObject(obj) && !!obj.jquery;
    }

    function isNode(obj) {
        return isObject(obj) && obj.nodeType >= 1;
    }

    function isElement(obj) {
        return isObject(obj) && obj.nodeType === 1;
    }

    function isNodeCollection(obj) {
        return toString.call(obj).match(/^\[object (NodeList|HTMLCollection)\]$/);
    }

    function isBoolean(value) {
        return typeof value === 'boolean';
    }

    function isString(value) {
        return typeof value === 'string';
    }

    function isNumber(value) {
        return typeof value === 'number';
    }

    function isNumeric(value) {
        return isNumber(value) || isString(value) && !isNaN(value - parseFloat(value));
    }

    function isEmpty(obj) {
        return !(isArray(obj)
            ? obj.length
            : isObject(obj)
                ? Object.keys(obj).length
                : false
        );
    }

    function isUndefined(value) {
        return value === void 0;
    }

    function toBoolean(value) {
        return isBoolean(value)
            ? value
            : value === 'true' || value === '1' || value === ''
                ? true
                : value === 'false' || value === '0'
                    ? false
                    : value;
    }

    function toNumber(value) {
        var number = Number(value);
        return !isNaN(number) ? number : false;
    }

    function toFloat(value) {
        return parseFloat(value) || 0;
    }

    function toNode(element) {
        return isNode(element)
            ? element
            : isNodeCollection(element) || isJQuery(element)
                ? element[0]
                : isArray(element)
                    ? toNode(element[0])
                    : null;
    }

    function toNodes(element) {
        return isNode(element)
            ? [element]
            : isNodeCollection(element)
                ? arrPrototype.slice.call(element)
                : isArray(element)
                    ? element.map(toNode).filter(Boolean)
                    : isJQuery(element)
                        ? element.toArray()
                        : [];
    }

    function toWindow(element) {
        if (isWindow(element)) {
            return element;
        }

        element = toNode(element);

        return element
            ? (isDocument(element)
                ? element
                : element.ownerDocument
            ).defaultView
            : window;
    }

    function toList(value) {
        return isArray(value)
            ? value
            : isString(value)
                ? value.split(/,(?![^(]*\))/).map(function (value) { return isNumeric(value)
                    ? toNumber(value)
                    : toBoolean(value.trim()); })
                : [value];
    }

    function toMs(time) {
        return !time
            ? 0
            : endsWith(time, 'ms')
                ? toFloat(time)
                : toFloat(time) * 1000;
    }

    function isEqual(value, other) {
        return value === other
            || isObject(value)
            && isObject(other)
            && Object.keys(value).length === Object.keys(other).length
            && each(value, function (val, key) { return val === other[key]; });
    }

    function swap(value, a, b) {
        return value.replace(new RegExp((a + "|" + b), 'mg'), function (match) {
            return match === a ? b : a;
        });
    }

    var assign = Object.assign || function (target) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

        target = Object(target);
        for (var i = 0; i < args.length; i++) {
            var source = args[i];
            if (source !== null) {
                for (var key in source) {
                    if (hasOwn(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
        }
        return target;
    };

    function last(array) {
        return array[array.length - 1];
    }

    function each(obj, cb) {
        for (var key in obj) {
            if (false === cb(obj[key], key)) {
                return false;
            }
        }
        return true;
    }

    function sortBy(array, prop) {
        return array.sort(function (ref, ref$1) {
                var propA = ref[prop]; if ( propA === void 0 ) propA = 0;
                var propB = ref$1[prop]; if ( propB === void 0 ) propB = 0;

                return propA > propB
                ? 1
                : propB > propA
                    ? -1
                    : 0;
        }
        );
    }

    function uniqueBy(array, prop) {
        var seen = new Set();
        return array.filter(function (ref) {
            var check = ref[prop];

            return seen.has(check)
            ? false
            : seen.add(check) || true;
        } // IE 11 does not return the Set object
        );
    }

    function clamp(number, min, max) {
        if ( min === void 0 ) min = 0;
        if ( max === void 0 ) max = 1;

        return Math.min(Math.max(toNumber(number) || 0, min), max);
    }

    function noop() {}

    function intersectRect(r1, r2) {
        return r1.left < r2.right &&
            r1.right > r2.left &&
            r1.top < r2.bottom &&
            r1.bottom > r2.top;
    }

    function pointInRect(point, rect) {
        return point.x <= rect.right &&
            point.x >= rect.left &&
            point.y <= rect.bottom &&
            point.y >= rect.top;
    }

    var Dimensions = {

        ratio: function(dimensions, prop, value) {
            var obj;


            var aProp = prop === 'width' ? 'height' : 'width';

            return ( obj = {}, obj[aProp] = dimensions[prop] ? Math.round(value * dimensions[aProp] / dimensions[prop]) : dimensions[aProp], obj[prop] = value, obj );
        },

        contain: function(dimensions, maxDimensions) {
            var this$1 = this;

            dimensions = assign({}, dimensions);

            each(dimensions, function (_, prop) { return dimensions = dimensions[prop] > maxDimensions[prop]
                ? this$1.ratio(dimensions, prop, maxDimensions[prop])
                : dimensions; }
            );

            return dimensions;
        },

        cover: function(dimensions, maxDimensions) {
            var this$1 = this;

            dimensions = this.contain(dimensions, maxDimensions);

            each(dimensions, function (_, prop) { return dimensions = dimensions[prop] < maxDimensions[prop]
                ? this$1.ratio(dimensions, prop, maxDimensions[prop])
                : dimensions; }
            );

            return dimensions;
        }

    };

    function attr(element, name, value) {

        if (isObject(name)) {
            for (var key in name) {
                attr(element, key, name[key]);
            }
            return;
        }

        if (isUndefined(value)) {
            element = toNode(element);
            return element && element.getAttribute(name);
        } else {
            toNodes(element).forEach(function (element) {

                if (isFunction(value)) {
                    value = value.call(element, attr(element, name));
                }

                if (value === null) {
                    removeAttr(element, name);
                } else {
                    element.setAttribute(name, value);
                }
            });
        }

    }

    function hasAttr(element, name) {
        return toNodes(element).some(function (element) { return element.hasAttribute(name); });
    }

    function removeAttr(element, name) {
        element = toNodes(element);
        name.split(' ').forEach(function (name) { return element.forEach(function (element) { return element.hasAttribute(name) && element.removeAttribute(name); }
            ); }
        );
    }

    function data(element, attribute) {
        for (var i = 0, attrs = [attribute, ("data-" + attribute)]; i < attrs.length; i++) {
            if (hasAttr(element, attrs[i])) {
                return attr(element, attrs[i]);
            }
        }
    }

    /* global DocumentTouch */

    var isIE = /msie|trident/i.test(window.navigator.userAgent);
    var isRtl = attr(document.documentElement, 'dir') === 'rtl';

    var hasTouchEvents = 'ontouchstart' in window;
    var hasPointerEvents = window.PointerEvent;
    var hasTouch = hasTouchEvents
        || window.DocumentTouch && document instanceof DocumentTouch
        || navigator.maxTouchPoints; // IE >=11

    var pointerDown = hasPointerEvents ? 'pointerdown' : hasTouchEvents ? 'touchstart' : 'mousedown';
    var pointerMove = hasPointerEvents ? 'pointermove' : hasTouchEvents ? 'touchmove' : 'mousemove';
    var pointerUp = hasPointerEvents ? 'pointerup' : hasTouchEvents ? 'touchend' : 'mouseup';
    var pointerEnter = hasPointerEvents ? 'pointerenter' : hasTouchEvents ? '' : 'mouseenter';
    var pointerLeave = hasPointerEvents ? 'pointerleave' : hasTouchEvents ? '' : 'mouseleave';
    var pointerCancel = hasPointerEvents ? 'pointercancel' : 'touchcancel';

    function query(selector, context) {
        return toNode(selector) || find(selector, getContext(selector, context));
    }

    function queryAll(selector, context) {
        var nodes = toNodes(selector);
        return nodes.length && nodes || findAll(selector, getContext(selector, context));
    }

    function getContext(selector, context) {
        if ( context === void 0 ) context = document;

        return isContextSelector(selector) || isDocument(context)
            ? context
            : context.ownerDocument;
    }

    function find(selector, context) {
        return toNode(_query(selector, context, 'querySelector'));
    }

    function findAll(selector, context) {
        return toNodes(_query(selector, context, 'querySelectorAll'));
    }

    function _query(selector, context, queryFn) {
        if ( context === void 0 ) context = document;


        if (!selector || !isString(selector)) {
            return null;
        }

        selector = selector.replace(contextSanitizeRe, '$1 *');

        var removes;

        if (isContextSelector(selector)) {

            removes = [];

            selector = splitSelector(selector).map(function (selector, i) {

                var ctx = context;

                if (selector[0] === '!') {

                    var selectors = selector.substr(1).trim().split(' ');
                    ctx = closest(parent(context), selectors[0]);
                    selector = selectors.slice(1).join(' ').trim();

                }

                if (selector[0] === '-') {

                    var selectors$1 = selector.substr(1).trim().split(' ');
                    var prev = (ctx || context).previousElementSibling;
                    ctx = matches(prev, selector.substr(1)) ? prev : null;
                    selector = selectors$1.slice(1).join(' ');

                }

                if (!ctx) {
                    return null;
                }

                if (!ctx.id) {
                    ctx.id = "gsl-" + (Date.now()) + i;
                    removes.push(function () { return removeAttr(ctx, 'id'); });
                }

                return ("#" + (escape(ctx.id)) + " " + selector);

            }).filter(Boolean).join(',');

            context = document;

        }

        try {

            return context[queryFn](selector);

        } catch (e) {

            return null;

        } finally {

            removes && removes.forEach(function (remove) { return remove(); });

        }

    }

    var contextSelectorRe = /(^|[^\\],)\s*[!>+~-]/;
    var contextSanitizeRe = /([!>+~-])(?=\s+[!>+~-]|\s*$)/g;

    function isContextSelector(selector) {
        return isString(selector) && selector.match(contextSelectorRe);
    }

    var selectorRe = /.*?[^\\](?:,|$)/g;

    function splitSelector(selector) {
        return selector.match(selectorRe).map(function (selector) { return selector.replace(/,$/, '').trim(); });
    }

    var elProto = Element.prototype;
    var matchesFn = elProto.matches || elProto.webkitMatchesSelector || elProto.msMatchesSelector;

    function matches(element, selector) {
        return toNodes(element).some(function (element) { return matchesFn.call(element, selector); });
    }

    var closestFn = elProto.closest || function (selector) {
        var ancestor = this;

        do {

            if (matches(ancestor, selector)) {
                return ancestor;
            }

        } while ((ancestor = parent(ancestor)));
    };

    function closest(element, selector) {

        if (startsWith(selector, '>')) {
            selector = selector.slice(1);
        }

        return isElement(element)
            ? closestFn.call(element, selector)
            : toNodes(element).map(function (element) { return closest(element, selector); }).filter(Boolean);
    }

    function parent(element) {
        element = toNode(element);
        return element && isElement(element.parentNode) && element.parentNode;
    }

    function parents(element, selector) {
        var elements = [];

        while ((element = parent(element))) {
            if (!selector || matches(element, selector)) {
                elements.push(element);
            }
        }

        return elements;
    }

    function children(element, selector) {
        element = toNode(element);
        var children = element ? toNodes(element.children) : [];
        return selector ? children.filter(function (element) { return matches(element, selector); }) : children;
    }

    var escapeFn = window.CSS && CSS.escape || function (css) { return css.replace(/([^\x7f-\uFFFF\w-])/g, function (match) { return ("\\" + match); }); };
    function escape(css) {
        return isString(css) ? escapeFn.call(null, css) : '';
    }

    var voidElements = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        menuitem: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    function isVoidElement(element) {
        return toNodes(element).some(function (element) { return voidElements[element.tagName.toLowerCase()]; });
    }

    function isVisible(element) {
        return toNodes(element).some(function (element) { return element.offsetWidth || element.offsetHeight || element.getClientRects().length; });
    }

    var selInput = 'input,select,textarea,button';
    function isInput(element) {
        return toNodes(element).some(function (element) { return matches(element, selInput); });
    }

    function filter(element, selector) {
        return toNodes(element).filter(function (element) { return matches(element, selector); });
    }

    function within(element, selector) {
        return !isString(selector)
            ? element === selector || (isDocument(selector)
                ? selector.documentElement
                : toNode(selector)).contains(toNode(element)) // IE 11 document does not implement contains
            : matches(element, selector) || closest(element, selector);
    }

    function on() {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];


        var ref = getArgs(args);
        var targets = ref[0];
        var type = ref[1];
        var selector = ref[2];
        var listener = ref[3];
        var useCapture = ref[4];

        targets = toEventTargets(targets);

        if (listener.length > 1) {
            listener = detail(listener);
        }

        if (useCapture && useCapture.self) {
            listener = selfFilter(listener);
        }

        if (selector) {
            listener = delegate(targets, selector, listener);
        }

        useCapture = useCaptureFilter(useCapture);

        type.split(' ').forEach(function (type) { return targets.forEach(function (target) { return target.addEventListener(type, listener, useCapture); }
            ); }
        );
        return function () { return off(targets, type, listener, useCapture); };
    }

    function off(targets, type, listener, useCapture) {
        if ( useCapture === void 0 ) useCapture = false;

        useCapture = useCaptureFilter(useCapture);
        targets = toEventTargets(targets);
        type.split(' ').forEach(function (type) { return targets.forEach(function (target) { return target.removeEventListener(type, listener, useCapture); }
            ); }
        );
    }

    function once() {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];


        var ref = getArgs(args);
        var element = ref[0];
        var type = ref[1];
        var selector = ref[2];
        var listener = ref[3];
        var useCapture = ref[4];
        var condition = ref[5];
        var off = on(element, type, selector, function (e) {
            var result = !condition || condition(e);
            if (result) {
                off();
                listener(e, result);
            }
        }, useCapture);

        return off;
    }

    function trigger(targets, event, detail) {
        return toEventTargets(targets).reduce(function (notCanceled, target) { return notCanceled && target.dispatchEvent(createEvent(event, true, true, detail)); }
            , true);
    }

    function createEvent(e, bubbles, cancelable, detail) {
        if ( bubbles === void 0 ) bubbles = true;
        if ( cancelable === void 0 ) cancelable = false;

        if (isString(e)) {
            var event = document.createEvent('CustomEvent'); // IE 11
            event.initCustomEvent(e, bubbles, cancelable, detail);
            e = event;
        }

        return e;
    }

    function getArgs(args) {
        if (isFunction(args[2])) {
            args.splice(2, 0, false);
        }
        return args;
    }

    function delegate(delegates, selector, listener) {
        var this$1 = this;

        return function (e) {

            delegates.forEach(function (delegate) {

                var current = selector[0] === '>'
                    ? findAll(selector, delegate).reverse().filter(function (element) { return within(e.target, element); })[0]
                    : closest(e.target, selector);

                if (current) {
                    e.delegate = delegate;
                    e.current = current;

                    listener.call(this$1, e);
                }

            });

        };
    }

    function detail(listener) {
        return function (e) { return isArray(e.detail) ? listener.apply(void 0, [e].concat(e.detail)) : listener(e); };
    }

    function selfFilter(listener) {
        return function (e) {
            if (e.target === e.currentTarget || e.target === e.current) {
                return listener.call(null, e);
            }
        };
    }

    function useCaptureFilter(options) {
        return options && isIE && !isBoolean(options)
            ? !!options.capture
            : options;
    }

    function isEventTarget(target) {
        return target && 'addEventListener' in target;
    }

    function toEventTarget(target) {
        return isEventTarget(target) ? target : toNode(target);
    }

    function toEventTargets(target) {
        return isArray(target)
                ? target.map(toEventTarget).filter(Boolean)
                : isString(target)
                    ? findAll(target)
                    : isEventTarget(target)
                        ? [target]
                        : toNodes(target);
    }

    function isTouch(e) {
        return e.pointerType === 'touch' || !!e.touches;
    }

    function getEventPos(e, prop) {
        if ( prop === void 0 ) prop = 'client';

        var touches = e.touches;
        var changedTouches = e.changedTouches;
        var ref = touches && touches[0] || changedTouches && changedTouches[0] || e;
        var x = ref[(prop + "X")];
        var y = ref[(prop + "Y")];

        return {x: x, y: y};
    }

    /* global setImmediate */

    var Promise = 'Promise' in window ? window.Promise : PromiseFn;

    var Deferred = function() {
        var this$1 = this;

        this.promise = new Promise(function (resolve, reject) {
            this$1.reject = reject;
            this$1.resolve = resolve;
        });
    };

    /**
     * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
     */

    var RESOLVED = 0;
    var REJECTED = 1;
    var PENDING = 2;

    var async = 'setImmediate' in window ? setImmediate : setTimeout;

    function PromiseFn(executor) {

        this.state = PENDING;
        this.value = undefined;
        this.deferred = [];

        var promise = this;

        try {
            executor(
                function (x) {
                    promise.resolve(x);
                },
                function (r) {
                    promise.reject(r);
                }
            );
        } catch (e) {
            promise.reject(e);
        }
    }

    PromiseFn.reject = function (r) {
        return new PromiseFn(function (resolve, reject) {
            reject(r);
        });
    };

    PromiseFn.resolve = function (x) {
        return new PromiseFn(function (resolve, reject) {
            resolve(x);
        });
    };

    PromiseFn.all = function all(iterable) {
        return new PromiseFn(function (resolve, reject) {
            var result = [];
            var count = 0;

            if (iterable.length === 0) {
                resolve(result);
            }

            function resolver(i) {
                return function (x) {
                    result[i] = x;
                    count += 1;

                    if (count === iterable.length) {
                        resolve(result);
                    }
                };
            }

            for (var i = 0; i < iterable.length; i += 1) {
                PromiseFn.resolve(iterable[i]).then(resolver(i), reject);
            }
        });
    };

    PromiseFn.race = function race(iterable) {
        return new PromiseFn(function (resolve, reject) {
            for (var i = 0; i < iterable.length; i += 1) {
                PromiseFn.resolve(iterable[i]).then(resolve, reject);
            }
        });
    };

    var p = PromiseFn.prototype;

    p.resolve = function resolve(x) {
        var promise = this;

        if (promise.state === PENDING) {
            if (x === promise) {
                throw new TypeError('Promise settled with itself.');
            }

            var called = false;

            try {
                var then = x && x.then;

                if (x !== null && isObject(x) && isFunction(then)) {
                    then.call(
                        x,
                        function (x) {
                            if (!called) {
                                promise.resolve(x);
                            }
                            called = true;
                        },
                        function (r) {
                            if (!called) {
                                promise.reject(r);
                            }
                            called = true;
                        }
                    );
                    return;
                }
            } catch (e) {
                if (!called) {
                    promise.reject(e);
                }
                return;
            }

            promise.state = RESOLVED;
            promise.value = x;
            promise.notify();
        }
    };

    p.reject = function reject(reason) {
        var promise = this;

        if (promise.state === PENDING) {
            if (reason === promise) {
                throw new TypeError('Promise settled with itself.');
            }

            promise.state = REJECTED;
            promise.value = reason;
            promise.notify();
        }
    };

    p.notify = function notify() {
        var this$1 = this;

        async(function () {
            if (this$1.state !== PENDING) {
                while (this$1.deferred.length) {
                    var ref = this$1.deferred.shift();
                    var onResolved = ref[0];
                    var onRejected = ref[1];
                    var resolve = ref[2];
                    var reject = ref[3];

                    try {
                        if (this$1.state === RESOLVED) {
                            if (isFunction(onResolved)) {
                                resolve(onResolved.call(undefined, this$1.value));
                            } else {
                                resolve(this$1.value);
                            }
                        } else if (this$1.state === REJECTED) {
                            if (isFunction(onRejected)) {
                                resolve(onRejected.call(undefined, this$1.value));
                            } else {
                                reject(this$1.value);
                            }
                        }
                    } catch (e) {
                        reject(e);
                    }
                }
            }
        });
    };

    p.then = function then(onResolved, onRejected) {
        var this$1 = this;

        return new PromiseFn(function (resolve, reject) {
            this$1.deferred.push([onResolved, onRejected, resolve, reject]);
            this$1.notify();
        });
    };

    p.catch = function (onRejected) {
        return this.then(undefined, onRejected);
    };

    function ajax(url, options) {
        return new Promise(function (resolve, reject) {

            var env = assign({
                data: null,
                method: 'GET',
                headers: {},
                xhr: new XMLHttpRequest(),
                beforeSend: noop,
                responseType: ''
            }, options);

            env.beforeSend(env);

            var xhr = env.xhr;

            for (var prop in env) {
                if (prop in xhr) {
                    try {

                        xhr[prop] = env[prop];

                    } catch (e) {}
                }
            }

            xhr.open(env.method.toUpperCase(), url);

            for (var header in env.headers) {
                xhr.setRequestHeader(header, env.headers[header]);
            }

            on(xhr, 'load', function () {

                if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
                    resolve(xhr);
                } else {
                    reject(assign(Error(xhr.statusText), {
                        xhr: xhr,
                        status: xhr.status
                    }));
                }

            });

            on(xhr, 'error', function () { return reject(assign(Error('Network Error'), {xhr: xhr})); });
            on(xhr, 'timeout', function () { return reject(assign(Error('Network Timeout'), {xhr: xhr})); });

            xhr.send(env.data);
        });
    }

    function getImage(src, srcset, sizes) {

        return new Promise(function (resolve, reject) {
            var img = new Image();

            img.onerror = reject;
            img.onload = function () { return resolve(img); };

            sizes && (img.sizes = sizes);
            srcset && (img.srcset = srcset);
            img.src = src;
        });

    }

    function ready(fn) {

        if (document.readyState !== 'loading') {
            fn();
            return;
        }

        var unbind = on(document, 'DOMContentLoaded', function () {
            unbind();
            fn();
        });
    }

    function index(element, ref) {
        return ref
            ? toNodes(element).indexOf(toNode(ref))
            : children(parent(element)).indexOf(element);
    }

    function getIndex(i, elements, current, finite) {
        if ( current === void 0 ) current = 0;
        if ( finite === void 0 ) finite = false;


        elements = toNodes(elements);

        var length = elements.length;

        i = isNumeric(i)
            ? toNumber(i)
            : i === 'next'
                ? current + 1
                : i === 'previous'
                    ? current - 1
                    : index(elements, i);

        if (finite) {
            return clamp(i, 0, length - 1);
        }

        i %= length;

        return i < 0 ? i + length : i;
    }

    function empty(element) {
        element = $(element);
        element.innerHTML = '';
        return element;
    }

    function html(parent, html) {
        parent = $(parent);
        return isUndefined(html)
            ? parent.innerHTML
            : append(parent.hasChildNodes() ? empty(parent) : parent, html);
    }

    function prepend(parent, element) {

        parent = $(parent);

        if (!parent.hasChildNodes()) {
            return append(parent, element);
        } else {
            return insertNodes(element, function (element) { return parent.insertBefore(element, parent.firstChild); });
        }
    }

    function append(parent, element) {
        parent = $(parent);
        return insertNodes(element, function (element) { return parent.appendChild(element); });
    }

    function before(ref, element) {
        ref = $(ref);
        return insertNodes(element, function (element) { return ref.parentNode.insertBefore(element, ref); });
    }

    function after(ref, element) {
        ref = $(ref);
        return insertNodes(element, function (element) { return ref.nextSibling
            ? before(ref.nextSibling, element)
            : append(ref.parentNode, element); }
        );
    }

    function insertNodes(element, fn) {
        element = isString(element) ? fragment(element) : element;
        return element
            ? 'length' in element
                ? toNodes(element).map(fn)
                : fn(element)
            : null;
    }

    function remove(element) {
        toNodes(element).map(function (element) { return element.parentNode && element.parentNode.removeChild(element); });
    }

    function wrapAll(element, structure) {

        structure = toNode(before(element, structure));

        while (structure.firstChild) {
            structure = structure.firstChild;
        }

        append(structure, element);

        return structure;
    }

    function wrapInner(element, structure) {
        return toNodes(toNodes(element).map(function (element) { return element.hasChildNodes ? wrapAll(toNodes(element.childNodes), structure) : append(element, structure); }
        ));
    }

    function unwrap(element) {
        toNodes(element)
            .map(parent)
            .filter(function (value, index, self) { return self.indexOf(value) === index; })
            .forEach(function (parent) {
                before(parent, parent.childNodes);
                remove(parent);
            });
    }

    var fragmentRe = /^\s*<(\w+|!)[^>]*>/;
    var singleTagRe = /^<(\w+)\s*\/?>(?:<\/\1>)?$/;

    function fragment(html) {

        var matches = singleTagRe.exec(html);
        if (matches) {
            return document.createElement(matches[1]);
        }

        var container = document.createElement('div');
        if (fragmentRe.test(html)) {
            container.insertAdjacentHTML('beforeend', html.trim());
        } else {
            container.textContent = html;
        }

        return container.childNodes.length > 1 ? toNodes(container.childNodes) : container.firstChild;

    }

    function apply(node, fn) {

        if (!isElement(node)) {
            return;
        }

        fn(node);
        node = node.firstElementChild;
        while (node) {
            var next = node.nextElementSibling;
            apply(node, fn);
            node = next;
        }
    }

    function $(selector, context) {
        return !isString(selector)
            ? toNode(selector)
            : isHtml(selector)
                ? toNode(fragment(selector))
                : find(selector, context);
    }

    function $$(selector, context) {
        return !isString(selector)
            ? toNodes(selector)
            : isHtml(selector)
                ? toNodes(fragment(selector))
                : findAll(selector, context);
    }

    function isHtml(str) {
        return str[0] === '<' || str.match(/^\s*</);
    }

    function addClass(element) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

        apply$1(element, args, 'add');
    }

    function removeClass(element) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

        apply$1(element, args, 'remove');
    }

    function removeClasses(element, cls) {
        attr(element, 'class', function (value) { return (value || '').replace(new RegExp(("\\b" + cls + "\\b"), 'g'), ''); });
    }

    function replaceClass(element) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

        args[0] && removeClass(element, args[0]);
        args[1] && addClass(element, args[1]);
    }

    function hasClass(element, cls) {
        return cls && toNodes(element).some(function (element) { return element.classList.contains(cls.split(' ')[0]); });
    }

    function toggleClass(element) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];


        if (!args.length) {
            return;
        }

        args = getArgs$1(args);

        var force = !isString(last(args)) ? args.pop() : []; // in iOS 9.3 force === undefined evaluates to false

        args = args.filter(Boolean);

        toNodes(element).forEach(function (ref) {
            var classList = ref.classList;

            for (var i = 0; i < args.length; i++) {
                supports.Force
                    ? classList.toggle.apply(classList, [args[i]].concat(force))
                    : (classList[(!isUndefined(force) ? force : !classList.contains(args[i])) ? 'add' : 'remove'](args[i]));
            }
        });

    }

    function apply$1(element, args, fn) {
        args = getArgs$1(args).filter(Boolean);

        args.length && toNodes(element).forEach(function (ref) {
            var classList = ref.classList;

            supports.Multiple
                ? classList[fn].apply(classList, args)
                : args.forEach(function (cls) { return classList[fn](cls); });
        });
    }

    function getArgs$1(args) {
        return args.reduce(function (args, arg) { return args.concat.call(args, isString(arg) && includes(arg, ' ') ? arg.trim().split(' ') : arg); }
            , []);
    }

    // IE 11
    var supports = {

        get Multiple() {
            return this.get('_multiple');
        },

        get Force() {
            return this.get('_force');
        },

        get: function(key) {

            if (!hasOwn(this, key)) {
                var ref = document.createElement('_');
                var classList = ref.classList;
                classList.add('a', 'b');
                classList.toggle('c', false);
                this._multiple = classList.contains('b');
                this._force = !classList.contains('c');
            }

            return this[key];
        }

    };

    var cssNumber = {
        'animation-iteration-count': true,
        'column-count': true,
        'fill-opacity': true,
        'flex-grow': true,
        'flex-shrink': true,
        'font-weight': true,
        'line-height': true,
        'opacity': true,
        'order': true,
        'orphans': true,
        'stroke-dasharray': true,
        'stroke-dashoffset': true,
        'widows': true,
        'z-index': true,
        'zoom': true
    };

    function css(element, property, value) {

        return toNodes(element).map(function (element) {

            if (isString(property)) {

                property = propName(property);

                if (isUndefined(value)) {
                    return getStyle(element, property);
                } else if (!value && !isNumber(value)) {
                    element.style.removeProperty(property);
                } else {
                    element.style[property] = isNumeric(value) && !cssNumber[property] ? (value + "px") : value;
                }

            } else if (isArray(property)) {

                var styles = getStyles(element);

                return property.reduce(function (props, property) {
                    props[property] = styles[propName(property)];
                    return props;
                }, {});

            } else if (isObject(property)) {
                each(property, function (value, property) { return css(element, property, value); });
            }

            return element;

        })[0];

    }

    function getStyles(element, pseudoElt) {
        element = toNode(element);
        return element.ownerDocument.defaultView.getComputedStyle(element, pseudoElt);
    }

    function getStyle(element, property, pseudoElt) {
        return getStyles(element, pseudoElt)[property];
    }

    var vars = {};

    function getCssVar(name) {

        var docEl = document.documentElement;

        if (!isIE) {
            return getStyles(docEl).getPropertyValue(("--gsl-" + name));
        }

        if (!(name in vars)) {

            /* usage in css: .gsl-name:before { content:"xyz" } */

            var element = append(docEl, document.createElement('div'));

            addClass(element, ("gsl-" + name));

            vars[name] = getStyle(element, 'content', ':before').replace(/^["'](.*)["']$/, '$1');

            remove(element);

        }

        return vars[name];

    }

    var cssProps = {};

    function propName(name) {

        var ret = cssProps[name];
        if (!ret) {
            ret = cssProps[name] = vendorPropName(name) || name;
        }
        return ret;
    }

    var cssPrefixes = ['webkit', 'moz', 'ms'];

    function vendorPropName(name) {

        name = hyphenate(name);

        var ref = document.documentElement;
        var style = ref.style;

        if (name in style) {
            return name;
        }

        var i = cssPrefixes.length, prefixedName;

        while (i--) {
            prefixedName = "-" + (cssPrefixes[i]) + "-" + name;
            if (prefixedName in style) {
                return prefixedName;
            }
        }
    }

    function transition(element, props, duration, timing) {
        if ( duration === void 0 ) duration = 400;
        if ( timing === void 0 ) timing = 'linear';


        return Promise.all(toNodes(element).map(function (element) { return new Promise(function (resolve, reject) {

                for (var name in props) {
                    var value = css(element, name);
                    if (value === '') {
                        css(element, name, value);
                    }
                }

                var timer = setTimeout(function () { return trigger(element, 'transitionend'); }, duration);

                once(element, 'transitionend transitioncanceled', function (ref) {
                    var type = ref.type;

                    clearTimeout(timer);
                    removeClass(element, 'gsl-transition');
                    css(element, {
                        transitionProperty: '',
                        transitionDuration: '',
                        transitionTimingFunction: ''
                    });
                    type === 'transitioncanceled' ? reject() : resolve();
                }, {self: true});

                addClass(element, 'gsl-transition');
                css(element, assign({
                    transitionProperty: Object.keys(props).map(propName).join(','),
                    transitionDuration: (duration + "ms"),
                    transitionTimingFunction: timing
                }, props));

            }); }
        ));

    }

    var Transition = {

        start: transition,

        stop: function(element) {
            trigger(element, 'transitionend');
            return Promise.resolve();
        },

        cancel: function(element) {
            trigger(element, 'transitioncanceled');
        },

        inProgress: function(element) {
            return hasClass(element, 'gsl-transition');
        }

    };

    var animationPrefix = 'gsl-animation-';
    var clsCancelAnimation = 'gsl-cancel-animation';

    function animate(element, animation, duration, origin, out) {
        var arguments$1 = arguments;
        if ( duration === void 0 ) duration = 200;


        return Promise.all(toNodes(element).map(function (element) { return new Promise(function (resolve, reject) {

                if (hasClass(element, clsCancelAnimation)) {
                    requestAnimationFrame(function () { return Promise.resolve().then(function () { return animate.apply(void 0, arguments$1).then(resolve, reject); }
                        ); }
                    );
                    return;
                }

                var cls = animation + " " + animationPrefix + (out ? 'leave' : 'enter');

                if (startsWith(animation, animationPrefix)) {

                    if (origin) {
                        cls += " gsl-transform-origin-" + origin;
                    }

                    if (out) {
                        cls += " " + animationPrefix + "reverse";
                    }

                }

                reset();

                once(element, 'animationend animationcancel', function (ref) {
                    var type = ref.type;


                    var hasReset = false;

                    if (type === 'animationcancel') {
                        reject();
                        reset();
                    } else {
                        resolve();
                        Promise.resolve().then(function () {
                            hasReset = true;
                            reset();
                        });
                    }

                    requestAnimationFrame(function () {
                        if (!hasReset) {
                            addClass(element, clsCancelAnimation);

                            requestAnimationFrame(function () { return removeClass(element, clsCancelAnimation); });
                        }
                    });

                }, {self: true});

                css(element, 'animationDuration', (duration + "ms"));
                addClass(element, cls);

                function reset() {
                    css(element, 'animationDuration', '');
                    removeClasses(element, (animationPrefix + "\\S*"));
                }

            }); }
        ));

    }

    var inProgress = new RegExp((animationPrefix + "(enter|leave)"));
    var Animation = {

        in: function(element, animation, duration, origin) {
            return animate(element, animation, duration, origin, false);
        },

        out: function(element, animation, duration, origin) {
            return animate(element, animation, duration, origin, true);
        },

        inProgress: function(element) {
            return inProgress.test(attr(element, 'class'));
        },

        cancel: function(element) {
            trigger(element, 'animationcancel');
        }

    };

    var dirs = {
        width: ['x', 'left', 'right'],
        height: ['y', 'top', 'bottom']
    };

    function positionAt(element, target, elAttach, targetAttach, elOffset, targetOffset, flip, boundary) {

        elAttach = getPos(elAttach);
        targetAttach = getPos(targetAttach);

        var flipped = {element: elAttach, target: targetAttach};

        if (!element || !target) {
            return flipped;
        }

        var dim = getDimensions(element);
        var targetDim = getDimensions(target);
        var position = targetDim;

        moveTo(position, elAttach, dim, -1);
        moveTo(position, targetAttach, targetDim, 1);

        elOffset = getOffsets(elOffset, dim.width, dim.height);
        targetOffset = getOffsets(targetOffset, targetDim.width, targetDim.height);

        elOffset['x'] += targetOffset['x'];
        elOffset['y'] += targetOffset['y'];

        position.left += elOffset['x'];
        position.top += elOffset['y'];

        if (flip) {

            var boundaries = [getDimensions(toWindow(element))];

            if (boundary) {
                boundaries.unshift(getDimensions(boundary));
            }

            each(dirs, function (ref, prop) {
                var dir = ref[0];
                var align = ref[1];
                var alignFlip = ref[2];


                if (!(flip === true || includes(flip, dir))) {
                    return;
                }

                boundaries.some(function (boundary) {

                    var elemOffset = elAttach[dir] === align
                        ? -dim[prop]
                        : elAttach[dir] === alignFlip
                            ? dim[prop]
                            : 0;

                    var targetOffset = targetAttach[dir] === align
                        ? targetDim[prop]
                        : targetAttach[dir] === alignFlip
                            ? -targetDim[prop]
                            : 0;

                    if (position[align] < boundary[align] || position[align] + dim[prop] > boundary[alignFlip]) {

                        var centerOffset = dim[prop] / 2;
                        var centerTargetOffset = targetAttach[dir] === 'center' ? -targetDim[prop] / 2 : 0;

                        return elAttach[dir] === 'center' && (
                            apply(centerOffset, centerTargetOffset)
                            || apply(-centerOffset, -centerTargetOffset)
                        ) || apply(elemOffset, targetOffset);

                    }

                    function apply(elemOffset, targetOffset) {

                        var newVal = position[align] + elemOffset + targetOffset - elOffset[dir] * 2;

                        if (newVal >= boundary[align] && newVal + dim[prop] <= boundary[alignFlip]) {
                            position[align] = newVal;

                            ['element', 'target'].forEach(function (el) {
                                flipped[el][dir] = !elemOffset
                                    ? flipped[el][dir]
                                    : flipped[el][dir] === dirs[prop][1]
                                        ? dirs[prop][2]
                                        : dirs[prop][1];
                            });

                            return true;
                        }

                    }

                });

            });
        }

        offset(element, position);

        return flipped;
    }

    function offset(element, coordinates) {

        if (!coordinates) {
            return getDimensions(element);
        }

        var currentOffset = offset(element);
        var pos = css(element, 'position');

        ['left', 'top'].forEach(function (prop) {
            if (prop in coordinates) {
                var value = css(element, prop);
                css(element, prop, coordinates[prop] - currentOffset[prop]
                    + toFloat(pos === 'absolute' && value === 'auto'
                        ? position(element)[prop]
                        : value)
                );
            }
        });
    }

    function getDimensions(element) {

        if (!element) {
            return {};
        }

        var ref = toWindow(element);
        var top = ref.pageYOffset;
        var left = ref.pageXOffset;

        if (isWindow(element)) {

            var height = element.innerHeight;
            var width = element.innerWidth;

            return {
                top: top,
                left: left,
                height: height,
                width: width,
                bottom: top + height,
                right: left + width
            };
        }

        var style, hidden;

        if (!isVisible(element) && css(element, 'display') === 'none') {

            style = attr(element, 'style');
            hidden = attr(element, 'hidden');

            attr(element, {
                style: ((style || '') + ";display:block !important;"),
                hidden: null
            });
        }

        element = toNode(element);

        var rect = element.getBoundingClientRect();

        if (!isUndefined(style)) {
            attr(element, {style: style, hidden: hidden});
        }

        return {
            height: rect.height,
            width: rect.width,
            top: rect.top + top,
            left: rect.left + left,
            bottom: rect.bottom + top,
            right: rect.right + left
        };
    }

    function position(element, parent) {
        var elementOffset = offset(element);
        var parentOffset = offset(parent || toNode(element).offsetParent || toWindow(element).document.documentElement);

        return {top: elementOffset.top - parentOffset.top, left: elementOffset.left - parentOffset.left};
    }

    function offsetPosition(element) {
        var offset = [0, 0];

        element = toNode(element);

        do {

            offset[0] += element.offsetTop;
            offset[1] += element.offsetLeft;

            if (css(element, 'position') === 'fixed') {
                var win = toWindow(element);
                offset[0] += win.pageYOffset;
                offset[1] += win.pageXOffset;
                return offset;
            }

        } while ((element = element.offsetParent));

        return offset;
    }

    var height = dimension('height');
    var width = dimension('width');

    function dimension(prop) {
        var propName = ucfirst(prop);
        return function (element, value) {

            if (isUndefined(value)) {

                if (isWindow(element)) {
                    return element[("inner" + propName)];
                }

                if (isDocument(element)) {
                    var doc = element.documentElement;
                    return Math.max(doc[("offset" + propName)], doc[("scroll" + propName)]);
                }

                element = toNode(element);

                value = css(element, prop);
                value = value === 'auto' ? element[("offset" + propName)] : toFloat(value) || 0;

                return value - boxModelAdjust(element, prop);

            } else {

                css(element, prop, !value && value !== 0
                    ? ''
                    : +value + boxModelAdjust(element, prop) + 'px'
                );

            }

        };
    }

    function boxModelAdjust(element, prop, sizing) {
        if ( sizing === void 0 ) sizing = 'border-box';

        return css(element, 'boxSizing') === sizing
            ? dirs[prop].slice(1).map(ucfirst).reduce(function (value, prop) { return value
                + toFloat(css(element, ("padding" + prop)))
                + toFloat(css(element, ("border" + prop + "Width"))); }
                , 0)
            : 0;
    }

    function moveTo(position, attach, dim, factor) {
        each(dirs, function (ref, prop) {
            var dir = ref[0];
            var align = ref[1];
            var alignFlip = ref[2];

            if (attach[dir] === alignFlip) {
                position[align] += dim[prop] * factor;
            } else if (attach[dir] === 'center') {
                position[align] += dim[prop] * factor / 2;
            }
        });
    }

    function getPos(pos) {

        var x = /left|center|right/;
        var y = /top|center|bottom/;

        pos = (pos || '').split(' ');

        if (pos.length === 1) {
            pos = x.test(pos[0])
                ? pos.concat(['center'])
                : y.test(pos[0])
                    ? ['center'].concat(pos)
                    : ['center', 'center'];
        }

        return {
            x: x.test(pos[0]) ? pos[0] : 'center',
            y: y.test(pos[1]) ? pos[1] : 'center'
        };
    }

    function getOffsets(offsets, width, height) {

        var ref = (offsets || '').split(' ');
        var x = ref[0];
        var y = ref[1];

        return {
            x: x ? toFloat(x) * (endsWith(x, '%') ? width / 100 : 1) : 0,
            y: y ? toFloat(y) * (endsWith(y, '%') ? height / 100 : 1) : 0
        };
    }

    function flipPosition(pos) {
        switch (pos) {
            case 'left':
                return 'right';
            case 'right':
                return 'left';
            case 'top':
                return 'bottom';
            case 'bottom':
                return 'top';
            default:
                return pos;
        }
    }

    function toPx(value, property, element) {
        if ( property === void 0 ) property = 'width';
        if ( element === void 0 ) element = window;

        return isNumeric(value)
            ? +value
            : endsWith(value, 'vh')
                ? percent(height(toWindow(element)), value)
                : endsWith(value, 'vw')
                    ? percent(width(toWindow(element)), value)
                    : endsWith(value, '%')
                        ? percent(getDimensions(element)[property], value)
                        : toFloat(value);
    }

    function percent(base, value) {
        return base * toFloat(value) / 100;
    }

    /*
        Based on:
        Copyright (c) 2016 Wilson Page wilsonpage@me.com
        https://github.com/wilsonpage/fastdom
    */

    var fastdom = {

        reads: [],
        writes: [],

        read: function(task) {
            this.reads.push(task);
            scheduleFlush();
            return task;
        },

        write: function(task) {
            this.writes.push(task);
            scheduleFlush();
            return task;
        },

        clear: function(task) {
            return remove$1(this.reads, task) || remove$1(this.writes, task);
        },

        flush: flush

    };

    function flush(recursion) {
        if ( recursion === void 0 ) recursion = 1;

        runTasks(fastdom.reads);
        runTasks(fastdom.writes.splice(0, fastdom.writes.length));

        fastdom.scheduled = false;

        if (fastdom.reads.length || fastdom.writes.length) {
            scheduleFlush(recursion + 1);
        }
    }

    var RECURSION_LIMIT = 5;
    function scheduleFlush(recursion) {
        if (!fastdom.scheduled) {
            fastdom.scheduled = true;
            if (recursion > RECURSION_LIMIT) {
                throw new Error('Maximum recursion limit reached.');
            } else if (recursion) {
                Promise.resolve().then(function () { return flush(recursion); });
            } else {
                requestAnimationFrame(function () { return flush(); });
            }
        }
    }

    function runTasks(tasks) {
        var task;
        while ((task = tasks.shift())) {
            task();
        }
    }

    function remove$1(array, item) {
        var index = array.indexOf(item);
        return !!~index && !!array.splice(index, 1);
    }

    function MouseTracker() {}

    MouseTracker.prototype = {

        positions: [],

        init: function() {
            var this$1 = this;


            this.positions = [];

            var position;
            this.unbind = on(document, 'mousemove', function (e) { return position = getEventPos(e, 'page'); });
            this.interval = setInterval(function () {

                if (!position) {
                    return;
                }

                this$1.positions.push(position);

                if (this$1.positions.length > 5) {
                    this$1.positions.shift();
                }
            }, 50);

        },

        cancel: function() {
            this.unbind && this.unbind();
            this.interval && clearInterval(this.interval);
        },

        movesTo: function(target) {

            if (this.positions.length < 2) {
                return false;
            }

            var p = offset(target);
            var left = p.left;
            var right = p.right;
            var top = p.top;
            var bottom = p.bottom;

            var ref = this.positions;
            var prevPosition = ref[0];
            var position = last(this.positions);
            var path = [prevPosition, position];

            if (pointInRect(position, p)) {
                return false;
            }

            var diagonals = [[{x: left, y: top}, {x: right, y: bottom}], [{x: left, y: bottom}, {x: right, y: top}]];

            return diagonals.some(function (diagonal) {
                var intersection = intersect(path, diagonal);
                return intersection && pointInRect(intersection, p);
            });
        }

    };

    // Inspired by http://paulbourke.net/geometry/pointlineplane/
    function intersect(ref, ref$1) {
        var ref_0 = ref[0];
        var x1 = ref_0.x;
        var y1 = ref_0.y;
        var ref_1 = ref[1];
        var x2 = ref_1.x;
        var y2 = ref_1.y;
        var ref$1_0 = ref$1[0];
        var x3 = ref$1_0.x;
        var y3 = ref$1_0.y;
        var ref$1_1 = ref$1[1];
        var x4 = ref$1_1.x;
        var y4 = ref$1_1.y;


        var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

        // Lines are parallel
        if (denominator === 0) {
            return false;
        }

        var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;

        if (ua < 0) {
            return false;
        }

        // Return a object with the x and y coordinates of the intersection
        return {x: x1 + ua * (x2 - x1), y: y1 + ua * (y2 - y1)};
    }

    var strats = {};

    strats.events =
    strats.created =
    strats.beforeConnect =
    strats.connected =
    strats.beforeDisconnect =
    strats.disconnected =
    strats.destroy = concatStrat;

    // args strategy
    strats.args = function (parentVal, childVal) {
        return childVal !== false && concatStrat(childVal || parentVal);
    };

    // update strategy
    strats.update = function (parentVal, childVal) {
        return sortBy(concatStrat(parentVal, isFunction(childVal) ? {read: childVal} : childVal), 'order');
    };

    // property strategy
    strats.props = function (parentVal, childVal) {

        if (isArray(childVal)) {
            childVal = childVal.reduce(function (value, key) {
                value[key] = String;
                return value;
            }, {});
        }

        return strats.methods(parentVal, childVal);
    };

    // extend strategy
    strats.computed =
    strats.methods = function (parentVal, childVal) {
        return childVal
            ? parentVal
                ? assign({}, parentVal, childVal)
                : childVal
            : parentVal;
    };

    // data strategy
    strats.data = function (parentVal, childVal, vm) {

        if (!vm) {

            if (!childVal) {
                return parentVal;
            }

            if (!parentVal) {
                return childVal;
            }

            return function (vm) {
                return mergeFnData(parentVal, childVal, vm);
            };

        }

        return mergeFnData(parentVal, childVal, vm);
    };

    function mergeFnData(parentVal, childVal, vm) {
        return strats.computed(
            isFunction(parentVal)
                ? parentVal.call(vm, vm)
                : parentVal,
            isFunction(childVal)
                ? childVal.call(vm, vm)
                : childVal
        );
    }

    // concat strategy
    function concatStrat(parentVal, childVal) {

        parentVal = parentVal && !isArray(parentVal) ? [parentVal] : parentVal;

        return childVal
            ? parentVal
                ? parentVal.concat(childVal)
                : isArray(childVal)
                    ? childVal
                    : [childVal]
            : parentVal;
    }

    // default strategy
    function defaultStrat(parentVal, childVal) {
        return isUndefined(childVal) ? parentVal : childVal;
    }

    function mergeOptions(parent, child, vm) {

        var options = {};

        if (isFunction(child)) {
            child = child.options;
        }

        if (child.extends) {
            parent = mergeOptions(parent, child.extends, vm);
        }

        if (child.mixins) {
            for (var i = 0, l = child.mixins.length; i < l; i++) {
                parent = mergeOptions(parent, child.mixins[i], vm);
            }
        }

        for (var key in parent) {
            mergeKey(key);
        }

        for (var key$1 in child) {
            if (!hasOwn(parent, key$1)) {
                mergeKey(key$1);
            }
        }

        function mergeKey(key) {
            options[key] = (strats[key] || defaultStrat)(parent[key], child[key], vm);
        }

        return options;
    }

    function parseOptions(options, args) {
        var obj;

        if ( args === void 0 ) args = [];

        try {

            return !options
                ? {}
                : startsWith(options, '{')
                    ? JSON.parse(options)
                    : args.length && !includes(options, ':')
                        ? (( obj = {}, obj[args[0]] = options, obj ))
                        : options.split(';').reduce(function (options, option) {
                            var ref = option.split(/:(.*)/);
                            var key = ref[0];
                            var value = ref[1];
                            if (key && !isUndefined(value)) {
                                options[key.trim()] = value.trim();
                            }
                            return options;
                        }, {});

        } catch (e) {
            return {};
        }

    }

    var id = 0;

    var Player = function(el) {
        this.id = ++id;
        this.el = toNode(el);
    };

    Player.prototype.isVideo = function () {
        return this.isYoutube() || this.isVimeo() || this.isHTML5();
    };

    Player.prototype.isHTML5 = function () {
        return this.el.tagName === 'VIDEO';
    };

    Player.prototype.isIFrame = function () {
        return this.el.tagName === 'IFRAME';
    };

    Player.prototype.isYoutube = function () {
        return this.isIFrame() && !!this.el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/);
    };

    Player.prototype.isVimeo = function () {
        return this.isIFrame() && !!this.el.src.match(/vimeo\.com\/video\/.*/);
    };

    Player.prototype.enableApi = function () {
            var this$1 = this;


        if (this.ready) {
            return this.ready;
        }

        var youtube = this.isYoutube();
        var vimeo = this.isVimeo();

        var poller;

        if (youtube || vimeo) {

            return this.ready = new Promise(function (resolve) {

                once(this$1.el, 'load', function () {
                    if (youtube) {
                        var listener = function () { return post(this$1.el, {event: 'listening', id: this$1.id}); };
                        poller = setInterval(listener, 100);
                        listener();
                    }
                });

                listen(function (data) { return youtube && data.id === this$1.id && data.event === 'onReady' || vimeo && Number(data.player_id) === this$1.id; })
                    .then(function () {
                        resolve();
                        poller && clearInterval(poller);
                    });

                attr(this$1.el, 'src', ("" + (this$1.el.src) + (includes(this$1.el.src, '?') ? '&' : '?') + (youtube ? 'enablejsapi=1' : ("api=1&player_id=" + (this$1.id)))));

            });

        }

        return Promise.resolve();

    };

    Player.prototype.play = function () {
            var this$1 = this;


        if (!this.isVideo()) {
            return;
        }

        if (this.isIFrame()) {
            this.enableApi().then(function () { return post(this$1.el, {func: 'playVideo', method: 'play'}); });
        } else if (this.isHTML5()) {
            try {
                var promise = this.el.play();

                if (promise) {
                    promise.catch(noop);
                }
            } catch (e) {}
        }
    };

    Player.prototype.pause = function () {
            var this$1 = this;


        if (!this.isVideo()) {
            return;
        }

        if (this.isIFrame()) {
            this.enableApi().then(function () { return post(this$1.el, {func: 'pauseVideo', method: 'pause'}); });
        } else if (this.isHTML5()) {
            this.el.pause();
        }
    };

    Player.prototype.mute = function () {
            var this$1 = this;


        if (!this.isVideo()) {
            return;
        }

        if (this.isIFrame()) {
            this.enableApi().then(function () { return post(this$1.el, {func: 'mute', method: 'setVolume', value: 0}); });
        } else if (this.isHTML5()) {
            this.el.muted = true;
            attr(this.el, 'muted', '');
        }

    };

    function post(el, cmd) {
        try {
            el.contentWindow.postMessage(JSON.stringify(assign({event: 'command'}, cmd)), '*');
        } catch (e) {}
    }

    function listen(cb) {

        return new Promise(function (resolve) {

            once(window, 'message', function (_, data) { return resolve(data); }, false, function (ref) {
                var data = ref.data;


                if (!data || !isString(data)) {
                    return;
                }

                try {
                    data = JSON.parse(data);
                } catch (e) {
                    return;
                }

                return data && cb(data);

            });

        });

    }

    function isInView(element, offsetTop, offsetLeft) {
        if ( offsetTop === void 0 ) offsetTop = 0;
        if ( offsetLeft === void 0 ) offsetLeft = 0;


        if (!isVisible(element)) {
            return false;
        }

        var parents = overflowParents(element).concat(element);

        for (var i = 0; i < parents.length - 1; i++) {
            var ref = offset(getViewport(parents[i]));
            var top = ref.top;
            var left = ref.left;
            var bottom = ref.bottom;
            var right = ref.right;
            var vp = {
                top: top - offsetTop,
                left: left - offsetLeft,
                bottom: bottom + offsetTop,
                right: right + offsetLeft
            };

            var client = offset(parents[i + 1]);

            if (!intersectRect(client, vp) && !pointInRect({x: client.left, y: client.top}, vp)) {
                return false;
            }
        }

        return true;
    }

    function scrollTop(element, top) {

        if (isWindow(element) || isDocument(element)) {
            element = getScrollingElement(element);
        } else {
            element = toNode(element);
        }

        element.scrollTop = top;
    }

    function scrollIntoView(element, ref) {
        if ( ref === void 0 ) ref = {};
        var duration = ref.duration; if ( duration === void 0 ) duration = 1000;
        var offset = ref.offset; if ( offset === void 0 ) offset = 0;


        if (!isVisible(element)) {
            return;
        }

        var parents = overflowParents(element).concat(element);
        duration /= parents.length - 1;

        var promise = Promise.resolve();
        var loop = function ( i ) {
            promise = promise.then(function () { return new Promise(function (resolve) {

                    var scrollElement = parents[i];
                    var element = parents[i + 1];

                    var scroll = scrollElement.scrollTop;
                    var top = position(element, getViewport(scrollElement)).top - offset;

                    var start = Date.now();
                    var step = function () {

                        var percent = ease(clamp((Date.now() - start) / duration));

                        scrollTop(scrollElement, scroll + top * percent);

                        // scroll more if we have not reached our destination
                        if (percent !== 1) {
                            requestAnimationFrame(step);
                        } else {
                            resolve();
                        }

                    };

                    step();
                }); }
            );
        };

        for (var i = 0; i < parents.length - 1; i++) loop( i );

        return promise;

        function ease(k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        }

    }

    function scrolledOver(element, heightOffset) {
        if ( heightOffset === void 0 ) heightOffset = 0;


        if (!isVisible(element)) {
            return 0;
        }

        var scrollElement = last(scrollParents(element));
        var scrollHeight = scrollElement.scrollHeight;
        var scrollTop = scrollElement.scrollTop;
        var viewport = getViewport(scrollElement);
        var viewportHeight = offset(viewport).height;
        var viewportTop = offsetPosition(element)[0] - scrollTop - offsetPosition(scrollElement)[0];
        var viewportDist = Math.min(viewportHeight, viewportTop + scrollTop);

        var top = viewportTop - viewportDist;
        var dist = Math.min(
            offset(element).height + heightOffset + viewportDist,
            scrollHeight - (viewportTop + scrollTop),
            scrollHeight - viewportHeight
        );

        return clamp(-1 * top / dist);
    }

    function scrollParents(element, overflowRe) {
        if ( overflowRe === void 0 ) overflowRe = /auto|scroll/;

        var scrollEl = getScrollingElement(element);
        var scrollParents = parents(element).filter(function (parent) { return parent === scrollEl
            || overflowRe.test(css(parent, 'overflow'))
            && parent.scrollHeight > offset(parent).height; }
        ).reverse();
        return scrollParents.length ? scrollParents : [scrollEl];
    }

    function getViewport(scrollElement) {
        return scrollElement === getScrollingElement(scrollElement) ? window : scrollElement;
    }

    function overflowParents(element) {
        return scrollParents(element, /auto|scroll|hidden/);
    }

    function getScrollingElement(element) {
        var ref = toWindow(element);
        var document = ref.document;
        return document.scrollingElement || document.documentElement;
    }

    var IntersectionObserver = 'IntersectionObserver' in window
        ? window.IntersectionObserver
        : /*@__PURE__*/(function () {
        function IntersectionObserverClass(callback, ref) {
            var this$1 = this;
            if ( ref === void 0 ) ref = {};
            var rootMargin = ref.rootMargin; if ( rootMargin === void 0 ) rootMargin = '0 0';


                this.targets = [];

                var ref$1 = (rootMargin || '0 0').split(' ').map(toFloat);
            var offsetTop = ref$1[0];
            var offsetLeft = ref$1[1];

                this.offsetTop = offsetTop;
                this.offsetLeft = offsetLeft;

                var pending;
                this.apply = function () {

                    if (pending) {
                        return;
                    }

                    pending = requestAnimationFrame(function () { return setTimeout(function () {
                        var records = this$1.takeRecords();

                        if (records.length) {
                            callback(records, this$1);
                        }

                        pending = false;
                    }); });

                };

                this.off = on(window, 'scroll resize load', this.apply, {passive: true, capture: true});

            }

            IntersectionObserverClass.prototype.takeRecords = function () {
                var this$1 = this;

                return this.targets.filter(function (entry) {

                    var inView = isInView(entry.target, this$1.offsetTop, this$1.offsetLeft);

                    if (entry.isIntersecting === null || inView ^ entry.isIntersecting) {
                        entry.isIntersecting = inView;
                        return true;
                    }

                });
            };

            IntersectionObserverClass.prototype.observe = function (target) {
                this.targets.push({
                    target: target,
                    isIntersecting: null
                });
                this.apply();
            };

            IntersectionObserverClass.prototype.disconnect = function () {
                this.targets = [];
                this.off();
            };

        return IntersectionObserverClass;
    }());



    var util = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ajax: ajax,
        getImage: getImage,
        transition: transition,
        Transition: Transition,
        animate: animate,
        Animation: Animation,
        attr: attr,
        hasAttr: hasAttr,
        removeAttr: removeAttr,
        data: data,
        addClass: addClass,
        removeClass: removeClass,
        removeClasses: removeClasses,
        replaceClass: replaceClass,
        hasClass: hasClass,
        toggleClass: toggleClass,
        positionAt: positionAt,
        offset: offset,
        position: position,
        offsetPosition: offsetPosition,
        height: height,
        width: width,
        boxModelAdjust: boxModelAdjust,
        flipPosition: flipPosition,
        toPx: toPx,
        ready: ready,
        index: index,
        getIndex: getIndex,
        empty: empty,
        html: html,
        prepend: prepend,
        append: append,
        before: before,
        after: after,
        remove: remove,
        wrapAll: wrapAll,
        wrapInner: wrapInner,
        unwrap: unwrap,
        fragment: fragment,
        apply: apply,
        $: $,
        $$: $$,
        isIE: isIE,
        isRtl: isRtl,
        hasTouch: hasTouch,
        pointerDown: pointerDown,
        pointerMove: pointerMove,
        pointerUp: pointerUp,
        pointerEnter: pointerEnter,
        pointerLeave: pointerLeave,
        pointerCancel: pointerCancel,
        on: on,
        off: off,
        once: once,
        trigger: trigger,
        createEvent: createEvent,
        toEventTargets: toEventTargets,
        isTouch: isTouch,
        getEventPos: getEventPos,
        fastdom: fastdom,
        isVoidElement: isVoidElement,
        isVisible: isVisible,
        selInput: selInput,
        isInput: isInput,
        filter: filter,
        within: within,
        hasOwn: hasOwn,
        hyphenate: hyphenate,
        camelize: camelize,
        ucfirst: ucfirst,
        startsWith: startsWith,
        endsWith: endsWith,
        includes: includes,
        findIndex: findIndex,
        isArray: isArray,
        isFunction: isFunction,
        isObject: isObject,
        isPlainObject: isPlainObject,
        isWindow: isWindow,
        isDocument: isDocument,
        isJQuery: isJQuery,
        isNode: isNode,
        isElement: isElement,
        isNodeCollection: isNodeCollection,
        isBoolean: isBoolean,
        isString: isString,
        isNumber: isNumber,
        isNumeric: isNumeric,
        isEmpty: isEmpty,
        isUndefined: isUndefined,
        toBoolean: toBoolean,
        toNumber: toNumber,
        toFloat: toFloat,
        toNode: toNode,
        toNodes: toNodes,
        toWindow: toWindow,
        toList: toList,
        toMs: toMs,
        isEqual: isEqual,
        swap: swap,
        assign: assign,
        last: last,
        each: each,
        sortBy: sortBy,
        uniqueBy: uniqueBy,
        clamp: clamp,
        noop: noop,
        intersectRect: intersectRect,
        pointInRect: pointInRect,
        Dimensions: Dimensions,
        MouseTracker: MouseTracker,
        mergeOptions: mergeOptions,
        parseOptions: parseOptions,
        Player: Player,
        Promise: Promise,
        Deferred: Deferred,
        IntersectionObserver: IntersectionObserver,
        query: query,
        queryAll: queryAll,
        find: find,
        findAll: findAll,
        matches: matches,
        closest: closest,
        parent: parent,
        parents: parents,
        children: children,
        escape: escape,
        css: css,
        getStyles: getStyles,
        getStyle: getStyle,
        getCssVar: getCssVar,
        propName: propName,
        isInView: isInView,
        scrollTop: scrollTop,
        scrollIntoView: scrollIntoView,
        scrolledOver: scrolledOver,
        scrollParents: scrollParents,
        getViewport: getViewport
    });

    function globalAPI (gslUIkit) {

        var DATA = gslUIkit.data;

        gslUIkit.use = function (plugin) {

            if (plugin.installed) {
                return;
            }

            plugin.call(null, this);
            plugin.installed = true;

            return this;
        };

        gslUIkit.mixin = function (mixin, component) {
            component = (isString(component) ? gslUIkit.component(component) : component) || this;
            component.options = mergeOptions(component.options, mixin);
        };

        gslUIkit.extend = function (options) {

            options = options || {};

            var Super = this;
            var Sub = function gslUIkitComponent(options) {
                this._init(options);
            };

            Sub.prototype = Object.create(Super.prototype);
            Sub.prototype.constructor = Sub;
            Sub.options = mergeOptions(Super.options, options);

            Sub.super = Super;
            Sub.extend = Super.extend;

            return Sub;
        };

        gslUIkit.update = function (element, e) {

            element = element ? toNode(element) : document.body;

            parents(element).reverse().forEach(function (element) { return update(element[DATA], e); });
            apply(element, function (element) { return update(element[DATA], e); });

        };

        var container;
        Object.defineProperty(gslUIkit, 'container', {

            get: function() {
                return container || document.body;
            },

            set: function(element) {
                container = $(element);
            }

        });

        function update(data, e) {

            if (!data) {
                return;
            }

            for (var name in data) {
                if (data[name]._connected) {
                    data[name]._callUpdate(e);
                }
            }

        }

    }

    function hooksAPI (gslUIkit) {

        gslUIkit.prototype._callHook = function (hook) {
            var this$1 = this;


            var handlers = this.$options[hook];

            if (handlers) {
                handlers.forEach(function (handler) { return handler.call(this$1); });
            }
        };

        gslUIkit.prototype._callConnected = function () {

            if (this._connected) {
                return;
            }

            this._data = {};
            this._computeds = {};
            this._initProps();

            this._callHook('beforeConnect');
            this._connected = true;

            this._initEvents();
            this._initObserver();

            this._callHook('connected');
            this._callUpdate();
        };

        gslUIkit.prototype._callDisconnected = function () {

            if (!this._connected) {
                return;
            }

            this._callHook('beforeDisconnect');

            if (this._observer) {
                this._observer.disconnect();
                this._observer = null;
            }

            this._unbindEvents();
            this._callHook('disconnected');

            this._connected = false;

        };

        gslUIkit.prototype._callUpdate = function (e) {
            var this$1 = this;
            if ( e === void 0 ) e = 'update';


            var type = e.type || e;

            if (includes(['update', 'resize'], type)) {
                this._callWatches();
            }

            var updates = this.$options.update;
            var ref = this._frames;
            var reads = ref.reads;
            var writes = ref.writes;

            if (!updates) {
                return;
            }

            updates.forEach(function (ref, i) {
                var read = ref.read;
                var write = ref.write;
                var events = ref.events;


                if (type !== 'update' && !includes(events, type)) {
                    return;
                }

                if (read && !includes(fastdom.reads, reads[i])) {
                    reads[i] = fastdom.read(function () {

                        var result = this$1._connected && read.call(this$1, this$1._data, type);

                        if (result === false && write) {
                            fastdom.clear(writes[i]);
                        } else if (isPlainObject(result)) {
                            assign(this$1._data, result);
                        }
                    });
                }

                if (write && !includes(fastdom.writes, writes[i])) {
                    writes[i] = fastdom.write(function () { return this$1._connected && write.call(this$1, this$1._data, type); });
                }

            });

        };

    }

    function stateAPI (gslUIkit) {

        var uid = 0;

        gslUIkit.prototype._init = function (options) {

            options = options || {};
            options.data = normalizeData(options, this.constructor.options);

            this.$options = mergeOptions(this.constructor.options, options, this);
            this.$el = null;
            this.$props = {};

            this._frames = {reads: {}, writes: {}};
            this._events = [];

            this._uid = uid++;
            this._initData();
            this._initMethods();
            this._initComputeds();
            this._callHook('created');

            if (options.el) {
                this.$mount(options.el);
            }
        };

        gslUIkit.prototype._initData = function () {

            var ref = this.$options;
            var data = ref.data; if ( data === void 0 ) data = {};

            for (var key in data) {
                this.$props[key] = this[key] = data[key];
            }
        };

        gslUIkit.prototype._initMethods = function () {

            var ref = this.$options;
            var methods = ref.methods;

            if (methods) {
                for (var key in methods) {
                    this[key] = methods[key].bind(this);
                }
            }
        };

        gslUIkit.prototype._initComputeds = function () {

            var ref = this.$options;
            var computed = ref.computed;

            this._computeds = {};

            if (computed) {
                for (var key in computed) {
                    registerComputed(this, key, computed[key]);
                }
            }
        };

        gslUIkit.prototype._callWatches = function () {

            var ref = this;
            var computed = ref.$options.computed;
            var _computeds = ref._computeds;

            for (var key in _computeds) {

                var value = _computeds[key];
                delete _computeds[key];

                if (computed[key].watch && !isEqual(value, this[key])) {
                    computed[key].watch.call(this, this[key], value);
                }

            }

        };

        gslUIkit.prototype._initProps = function (props) {

            var key;

            props = props || getProps(this.$options, this.$name);

            for (key in props) {
                if (!isUndefined(props[key])) {
                    this.$props[key] = props[key];
                }
            }

            var exclude = [this.$options.computed, this.$options.methods];
            for (key in this.$props) {
                if (key in props && notIn(exclude, key)) {
                    this[key] = this.$props[key];
                }
            }
        };

        gslUIkit.prototype._initEvents = function () {
            var this$1 = this;


            var ref = this.$options;
            var events = ref.events;

            if (events) {

                events.forEach(function (event) {

                    if (!hasOwn(event, 'handler')) {
                        for (var key in event) {
                            registerEvent(this$1, event[key], key);
                        }
                    } else {
                        registerEvent(this$1, event);
                    }

                });
            }
        };

        gslUIkit.prototype._unbindEvents = function () {
            this._events.forEach(function (unbind) { return unbind(); });
            this._events = [];
        };

        gslUIkit.prototype._initObserver = function () {
            var this$1 = this;


            var ref = this.$options;
            var attrs = ref.attrs;
            var props = ref.props;
            var el = ref.el;
            if (this._observer || !props || attrs === false) {
                return;
            }

            attrs = isArray(attrs) ? attrs : Object.keys(props);

            this._observer = new MutationObserver(function () {

                var data = getProps(this$1.$options, this$1.$name);
                if (attrs.some(function (key) { return !isUndefined(data[key]) && data[key] !== this$1.$props[key]; })) {
                    this$1.$reset();
                }

            });

            var filter = attrs.map(function (key) { return hyphenate(key); }).concat(this.$name);

            this._observer.observe(el, {
                attributes: true,
                attributeFilter: filter.concat(filter.map(function (key) { return ("data-" + key); }))
            });
        };

        function getProps(opts, name) {

            var data$1 = {};
            var args = opts.args; if ( args === void 0 ) args = [];
            var props = opts.props; if ( props === void 0 ) props = {};
            var el = opts.el;

            if (!props) {
                return data$1;
            }

            for (var key in props) {
                var prop = hyphenate(key);
                var value = data(el, prop);

                if (!isUndefined(value)) {

                    value = props[key] === Boolean && value === ''
                        ? true
                        : coerce(props[key], value);

                    if (prop === 'target' && (!value || startsWith(value, '_'))) {
                        continue;
                    }

                    data$1[key] = value;
                }
            }

            var options = parseOptions(data(el, name), args);

            for (var key$1 in options) {
                var prop$1 = camelize(key$1);
                if (props[prop$1] !== undefined) {
                    data$1[prop$1] = coerce(props[prop$1], options[key$1]);
                }
            }

            return data$1;
        }

        function registerComputed(component, key, cb) {
            Object.defineProperty(component, key, {

                enumerable: true,

                get: function() {

                    var _computeds = component._computeds;
                    var $props = component.$props;
                    var $el = component.$el;

                    if (!hasOwn(_computeds, key)) {
                        _computeds[key] = (cb.get || cb).call(component, $props, $el);
                    }

                    return _computeds[key];
                },

                set: function(value) {

                    var _computeds = component._computeds;

                    _computeds[key] = cb.set ? cb.set.call(component, value) : value;

                    if (isUndefined(_computeds[key])) {
                        delete _computeds[key];
                    }
                }

            });
        }

        function registerEvent(component, event, key) {

            if (!isPlainObject(event)) {
                event = ({name: key, handler: event});
            }

            var name = event.name;
            var el = event.el;
            var handler = event.handler;
            var capture = event.capture;
            var passive = event.passive;
            var delegate = event.delegate;
            var filter = event.filter;
            var self = event.self;
            el = isFunction(el)
                ? el.call(component)
                : el || component.$el;

            if (isArray(el)) {
                el.forEach(function (el) { return registerEvent(component, assign({}, event, {el: el}), key); });
                return;
            }

            if (!el || filter && !filter.call(component)) {
                return;
            }

            component._events.push(
                on(
                    el,
                    name,
                    !delegate
                        ? null
                        : isString(delegate)
                            ? delegate
                            : delegate.call(component),
                    isString(handler) ? component[handler] : handler.bind(component),
                    {passive: passive, capture: capture, self: self}
                )
            );

        }

        function notIn(options, key) {
            return options.every(function (arr) { return !arr || !hasOwn(arr, key); });
        }

        function coerce(type, value) {

            if (type === Boolean) {
                return toBoolean(value);
            } else if (type === Number) {
                return toNumber(value);
            } else if (type === 'list') {
                return toList(value);
            }

            return type ? type(value) : value;
        }

        function normalizeData(ref, ref$1) {
            var data = ref.data;
            var el = ref.el;
            var args = ref$1.args;
            var props = ref$1.props; if ( props === void 0 ) props = {};

            data = isArray(data)
                ? !isEmpty(args)
                    ? data.slice(0, args.length).reduce(function (data, value, index) {
                        if (isPlainObject(value)) {
                            assign(data, value);
                        } else {
                            data[args[index]] = value;
                        }
                        return data;
                    }, {})
                    : undefined
                : data;

            if (data) {
                for (var key in data) {
                    if (isUndefined(data[key])) {
                        delete data[key];
                    } else {
                        data[key] = props[key] ? coerce(props[key], data[key]) : data[key];
                    }
                }
            }

            return data;
        }
    }

    function instanceAPI (gslUIkit) {

        var DATA = gslUIkit.data;

        gslUIkit.prototype.$mount = function (el) {

            var ref = this.$options;
            var name = ref.name;

            if (!el[DATA]) {
                el[DATA] = {};
            }

            if (el[DATA][name]) {
                return;
            }

            el[DATA][name] = this;

            this.$el = this.$options.el = this.$options.el || el;

            if (within(el, document)) {
                this._callConnected();
            }
        };

        gslUIkit.prototype.$emit = function (e) {
            this._callUpdate(e);
        };

        gslUIkit.prototype.$reset = function () {
            this._callDisconnected();
            this._callConnected();
        };

        gslUIkit.prototype.$destroy = function (removeEl) {
            if ( removeEl === void 0 ) removeEl = false;


            var ref = this.$options;
            var el = ref.el;
            var name = ref.name;

            if (el) {
                this._callDisconnected();
            }

            this._callHook('destroy');

            if (!el || !el[DATA]) {
                return;
            }

            delete el[DATA][name];

            if (!isEmpty(el[DATA])) {
                delete el[DATA];
            }

            if (removeEl) {
                remove(this.$el);
            }
        };

        gslUIkit.prototype.$create = function (component, element, data) {
            return gslUIkit[component](element, data);
        };

        gslUIkit.prototype.$update = gslUIkit.update;
        gslUIkit.prototype.$getComponent = gslUIkit.getComponent;

        var names = {};
        Object.defineProperties(gslUIkit.prototype, {

            $container: Object.getOwnPropertyDescriptor(gslUIkit, 'container'),

            $name: {

                get: function() {
                    var ref = this.$options;
                    var name = ref.name;

                    if (!names[name]) {
                        names[name] = gslUIkit.prefix + hyphenate(name);
                    }

                    return names[name];
                }

            }

        });

    }

    function componentAPI (gslUIkit) {

        var DATA = gslUIkit.data;

        var components = {};

        gslUIkit.component = function (name, options) {

            var id = hyphenate(name);

            name = camelize(id);

            if (!options) {

                if (isPlainObject(components[name])) {
                    components[name] = gslUIkit.extend(components[name]);
                }

                return components[name];

            }

            gslUIkit[name] = function (element, data) {
                var i = arguments.length, argsArray = Array(i);
                while ( i-- ) argsArray[i] = arguments[i];


                var component = gslUIkit.component(name);

                return component.options.functional
                    ? new component({data: isPlainObject(element) ? element : [].concat( argsArray )})
                    : !element ? init(element) : $$(element).map(init)[0];

                function init(element) {

                    var instance = gslUIkit.getComponent(element, name);

                    if (instance) {
                        if (!data) {
                            return instance;
                        } else {
                            instance.$destroy();
                        }
                    }

                    return new component({el: element, data: data});

                }

            };

            var opt = isPlainObject(options) ? assign({}, options) : options.options;

            opt.name = name;

            if (opt.install) {
                opt.install(gslUIkit, opt, name);
            }

            if (gslUIkit._initialized && !opt.functional) {
                fastdom.read(function () { return gslUIkit[name](("[gsl-" + id + "],[data-gsl-" + id + "]")); });
            }

            return components[name] = isPlainObject(options) ? opt : options;
        };

        gslUIkit.getComponents = function (element) { return element && element[DATA] || {}; };
        gslUIkit.getComponent = function (element, name) { return gslUIkit.getComponents(element)[name]; };

        gslUIkit.connect = function (node) {

            if (node[DATA]) {
                for (var name in node[DATA]) {
                    node[DATA][name]._callConnected();
                }
            }

            for (var i = 0; i < node.attributes.length; i++) {

                var name$1 = getComponentName(node.attributes[i].name);

                if (name$1 && name$1 in components) {
                    gslUIkit[name$1](node);
                }

            }

        };

        gslUIkit.disconnect = function (node) {
            for (var name in node[DATA]) {
                node[DATA][name]._callDisconnected();
            }
        };

    }

    function getComponentName(attribute) {
        return startsWith(attribute, 'gsl-') || startsWith(attribute, 'data-gsl-')
            ? camelize(attribute.replace('data-gsl-', '').replace('gsl-', ''))
            : false;
    }

    var gslUIkit = function (options) {
        this._init(options);
    };

    gslUIkit.util = util;
    gslUIkit.data = '__uikit__';
    gslUIkit.prefix = 'gsl-';
    gslUIkit.options = {};
    gslUIkit.version = '3.2.6';

    globalAPI(gslUIkit);
    hooksAPI(gslUIkit);
    stateAPI(gslUIkit);
    componentAPI(gslUIkit);
    instanceAPI(gslUIkit);

    function Core (gslUIkit) {

        ready(function () {

            gslUIkit.update();
            on(window, 'load resize', function () { return gslUIkit.update(null, 'resize'); });
            on(document, 'loadedmetadata load', function (ref) {
                var target = ref.target;

                return gslUIkit.update(target, 'resize');
            }, true);

            // throttle `scroll` event (Safari triggers multiple `scroll` events per frame)
            var pending;
            on(window, 'scroll', function (e) {

                if (pending) {
                    return;
                }
                pending = true;
                fastdom.write(function () { return pending = false; });

                gslUIkit.update(null, e.type);

            }, {passive: true, capture: true});

            var started = 0;
            on(document, 'animationstart', function (ref) {
                var target = ref.target;

                if ((css(target, 'animationName') || '').match(/^gsl-.*(left|right)/)) {

                    started++;
                    css(document.body, 'overflowX', 'hidden');
                    setTimeout(function () {
                        if (!--started) {
                            css(document.body, 'overflowX', '');
                        }
                    }, toMs(css(target, 'animationDuration')) + 100);
                }
            }, true);

            var off;
            on(document, pointerDown, function (e) {

                off && off();

                if (!isTouch(e)) {
                    return;
                }

                // Handle Swipe Gesture
                var pos = getEventPos(e);
                var target = 'tagName' in e.target ? e.target : e.target.parentNode;
                off = once(document, (pointerUp + " " + pointerCancel), function (e) {

                    var ref = getEventPos(e);
                    var x = ref.x;
                    var y = ref.y;

                    // swipe
                    if (target && x && Math.abs(pos.x - x) > 100 || y && Math.abs(pos.y - y) > 100) {

                        setTimeout(function () {
                            trigger(target, 'swipe');
                            trigger(target, ("swipe" + (swipeDirection(pos.x, pos.y, x, y))));
                        });

                    }

                });

                // Force click event anywhere on iOS < 13
                if (pointerDown === 'touchstart') {
                    css(document.body, 'cursor', 'pointer');
                    once(document, (pointerUp + " " + pointerCancel), function () { return setTimeout(function () { return css(document.body, 'cursor', ''); }
                        , 50); }
                    );
                }

            }, {passive: true});

        });

    }

    function swipeDirection(x1, y1, x2, y2) {
        return Math.abs(x1 - x2) >= Math.abs(y1 - y2)
            ? x1 - x2 > 0
                ? 'Left'
                : 'Right'
            : y1 - y2 > 0
                ? 'Up'
                : 'Down';
    }

    function boot (gslUIkit) {

        var connect = gslUIkit.connect;
        var disconnect = gslUIkit.disconnect;

        if (!('MutationObserver' in window)) {
            return;
        }

        fastdom.read(init);

        function init() {

            if (document.body) {
                apply(document.body, connect);
            }

            (new MutationObserver(function (mutations) { return mutations.forEach(applyMutation); })).observe(document, {
                childList: true,
                subtree: true,
                characterData: true,
                attributes: true
            });

            gslUIkit._initialized = true;
        }

        function applyMutation(mutation) {

            var target = mutation.target;
            var type = mutation.type;

            var update = type !== 'attributes'
                ? applyChildList(mutation)
                : applyAttribute(mutation);

            update && gslUIkit.update(target);

        }

        function applyAttribute(ref) {
            var target = ref.target;
            var attributeName = ref.attributeName;


            if (attributeName === 'href') {
                return true;
            }

            var name = getComponentName(attributeName);

            if (!name || !(name in gslUIkit)) {
                return;
            }

            if (hasAttr(target, attributeName)) {
                gslUIkit[name](target);
                return true;
            }

            var component = gslUIkit.getComponent(target, name);

            if (component) {
                component.$destroy();
                return true;
            }

        }

        function applyChildList(ref) {
            var addedNodes = ref.addedNodes;
            var removedNodes = ref.removedNodes;


            for (var i = 0; i < addedNodes.length; i++) {
                apply(addedNodes[i], connect);
            }

            for (var i$1 = 0; i$1 < removedNodes.length; i$1++) {
                apply(removedNodes[i$1], disconnect);
            }

            return true;
        }

    }

    var Class = {

        connected: function() {
            !hasClass(this.$el, this.$name) && addClass(this.$el, this.$name);
        }

    };

    var Togglable = {

        props: {
            cls: Boolean,
            animation: 'list',
            duration: Number,
            origin: String,
            transition: String,
            queued: Boolean
        },

        data: {
            cls: false,
            animation: [false],
            duration: 200,
            origin: false,
            transition: 'linear',
            queued: false,

            initProps: {
                overflow: '',
                height: '',
                paddingTop: '',
                paddingBottom: '',
                marginTop: '',
                marginBottom: ''
            },

            hideProps: {
                overflow: 'hidden',
                height: 0,
                paddingTop: 0,
                paddingBottom: 0,
                marginTop: 0,
                marginBottom: 0
            }

        },

        computed: {

            hasAnimation: function(ref) {
                var animation = ref.animation;

                return !!animation[0];
            },

            hasTransition: function(ref) {
                var animation = ref.animation;

                return this.hasAnimation && animation[0] === true;
            }

        },

        methods: {

            toggleElement: function(targets, show, animate) {
                var this$1 = this;

                return new Promise(function (resolve) {

                    targets = toNodes(targets);

                    var all = function (targets) { return Promise.all(targets.map(function (el) { return this$1._toggleElement(el, show, animate); })); };

                    var p;

                    if (!this$1.queued || !isUndefined(animate) || !isUndefined(show) || !this$1.hasAnimation || targets.length < 2) {

                        p = all(targets);

                    } else {

                        var toggled = targets.filter(function (el) { return this$1.isToggled(el); });
                        var untoggled = targets.filter(function (el) { return !includes(toggled, el); });
                        var body = document.body;
                        var scroll = body.scrollTop;
                        var el = toggled[0];
                        var inProgress = Animation.inProgress(el) && hasClass(el, 'gsl-animation-leave')
                                || Transition.inProgress(el) && el.style.height === '0px';

                        p = all(toggled);

                        if (!inProgress) {
                            p = p.then(function () {
                                var p = all(untoggled);
                                body.scrollTop = scroll;
                                return p;
                            });
                        }

                    }

                    p.then(resolve, noop);

                });
            },

            toggleNow: function(targets, show) {
                return this.toggleElement(targets, show, false);
            },

            isToggled: function(el) {
                var nodes = toNodes(el || this.$el);
                return this.cls
                    ? hasClass(nodes, this.cls.split(' ')[0])
                    : !hasAttr(nodes, 'hidden');
            },

            updateAria: function(el) {
                if (this.cls === false) {
                    attr(el, 'aria-hidden', !this.isToggled(el));
                }
            },

            _toggleElement: function(el, show, animate) {
                var this$1 = this;


                show = isBoolean(show)
                    ? show
                    : Animation.inProgress(el)
                        ? hasClass(el, 'gsl-animation-leave')
                        : Transition.inProgress(el)
                            ? el.style.height === '0px'
                            : !this.isToggled(el);

                if (!trigger(el, ("before" + (show ? 'show' : 'hide')), [this])) {
                    return Promise.reject();
                }

                var promise = (
                    isFunction(animate)
                        ? animate
                        : animate === false || !this.hasAnimation
                            ? this._toggle
                            : this.hasTransition
                                ? toggleHeight(this)
                                : toggleAnimation(this)
                )(el, show);

                trigger(el, show ? 'show' : 'hide', [this]);

                var final = function () {
                    trigger(el, show ? 'shown' : 'hidden', [this$1]);
                    this$1.$update(el);
                };

                return promise ? promise.then(final) : Promise.resolve(final());
            },

            _toggle: function(el, toggled) {

                if (!el) {
                    return;
                }

                toggled = Boolean(toggled);

                var changed;
                if (this.cls) {
                    changed = includes(this.cls, ' ') || toggled !== hasClass(el, this.cls);
                    changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);
                } else {
                    changed = toggled === hasAttr(el, 'hidden');
                    changed && attr(el, 'hidden', !toggled ? '' : null);
                }

                $$('[autofocus]', el).some(function (el) { return isVisible(el) ? el.focus() || true : el.blur(); });

                this.updateAria(el);
                changed && this.$update(el);
            }

        }

    };

    function toggleHeight(ref) {
        var isToggled = ref.isToggled;
        var duration = ref.duration;
        var initProps = ref.initProps;
        var hideProps = ref.hideProps;
        var transition = ref.transition;
        var _toggle = ref._toggle;

        return function (el, show) {

            var inProgress = Transition.inProgress(el);
            var inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;
            var currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;

            Transition.cancel(el);

            if (!isToggled(el)) {
                _toggle(el, true);
            }

            height(el, '');

            // Update child components first
            fastdom.flush();

            var endHeight = height(el) + (inProgress ? 0 : inner);
            height(el, currentHeight);

            return (show
                    ? Transition.start(el, assign({}, initProps, {overflow: 'hidden', height: endHeight}), Math.round(duration * (1 - currentHeight / endHeight)), transition)
                    : Transition.start(el, hideProps, Math.round(duration * (currentHeight / endHeight)), transition).then(function () { return _toggle(el, false); })
            ).then(function () { return css(el, initProps); });

        };
    }

    function toggleAnimation(ref) {
        var animation = ref.animation;
        var duration = ref.duration;
        var origin = ref.origin;
        var _toggle = ref._toggle;

        return function (el, show) {

            Animation.cancel(el);

            if (show) {
                _toggle(el, true);
                return Animation.in(el, animation[0], duration, origin);
            }

            return Animation.out(el, animation[1] || animation[0], duration, origin).then(function () { return _toggle(el, false); });
        };
    }

    var Accordion = {

        mixins: [Class, Togglable],

        props: {
            targets: String,
            active: null,
            collapsible: Boolean,
            multiple: Boolean,
            toggle: String,
            content: String,
            transition: String
        },

        data: {
            targets: '> *',
            active: false,
            animation: [true],
            collapsible: true,
            multiple: false,
            clsOpen: 'gsl-open',
            toggle: '> .gsl-accordion-title',
            content: '> .gsl-accordion-content',
            transition: 'ease'
        },

        computed: {

            items: function(ref, $el) {
                var targets = ref.targets;

                return $$(targets, $el);
            }

        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return ((this.targets) + " " + (this.$props.toggle));
                },

                handler: function(e) {
                    e.preventDefault();
                    this.toggle(index($$(((this.targets) + " " + (this.$props.toggle)), this.$el), e.current));
                }

            }

        ],

        connected: function() {

            if (this.active === false) {
                return;
            }

            var active = this.items[Number(this.active)];
            if (active && !hasClass(active, this.clsOpen)) {
                this.toggle(active, false);
            }
        },

        update: function() {
            var this$1 = this;


            this.items.forEach(function (el) { return this$1._toggle($(this$1.content, el), hasClass(el, this$1.clsOpen)); });

            var active = !this.collapsible && !hasClass(this.items, this.clsOpen) && this.items[0];
            if (active) {
                this.toggle(active, false);
            }
        },

        methods: {

            toggle: function(item, animate) {
                var this$1 = this;


                var index = getIndex(item, this.items);
                var active = filter(this.items, ("." + (this.clsOpen)));

                item = this.items[index];

                item && [item]
                    .concat(!this.multiple && !includes(active, item) && active || [])
                    .forEach(function (el) {

                        var isItem = el === item;
                        var state = isItem && !hasClass(el, this$1.clsOpen);

                        if (!state && isItem && !this$1.collapsible && active.length < 2) {
                            return;
                        }

                        toggleClass(el, this$1.clsOpen, state);

                        var content = el._wrapper ? el._wrapper.firstElementChild : $(this$1.content, el);

                        if (!el._wrapper) {
                            el._wrapper = wrapAll(content, '<div>');
                            attr(el._wrapper, 'hidden', state ? '' : null);
                        }

                        this$1._toggle(content, true);
                        this$1.toggleElement(el._wrapper, state, animate).then(function () {

                            if (hasClass(el, this$1.clsOpen) !== state) {
                                return;
                            }

                            if (!state) {
                                this$1._toggle(content, false);
                            } else {
                                var toggle = $(this$1.$props.toggle, el);
                                if (animate !== false && !isInView(toggle)) {
                                    scrollIntoView(toggle);
                                }
                            }

                            el._wrapper = null;
                            unwrap(content);

                        });

                    });
            }

        }

    };

    var alert = {

        mixins: [Class, Togglable],

        args: 'animation',

        props: {
            close: String
        },

        data: {
            animation: [true],
            selClose: '.gsl-alert-close',
            duration: 150,
            hideProps: assign({opacity: 0}, Togglable.data.hideProps)
        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return this.selClose;
                },

                handler: function(e) {
                    e.preventDefault();
                    this.close();
                }

            }

        ],

        methods: {

            close: function() {
                var this$1 = this;

                this.toggleElement(this.$el).then(function () { return this$1.$destroy(true); });
            }

        }

    };

    var Video = {

        args: 'autoplay',

        props: {
            automute: Boolean,
            autoplay: Boolean
        },

        data: {
            automute: false,
            autoplay: true
        },

        computed: {

            inView: function(ref) {
                var autoplay = ref.autoplay;

                return autoplay === 'inview';
            }

        },

        connected: function() {

            if (this.inView && !hasAttr(this.$el, 'preload')) {
                this.$el.preload = 'none';
            }

            this.player = new Player(this.$el);

            if (this.automute) {
                this.player.mute();
            }

        },

        update: {

            read: function() {

                return !this.player
                    ? false
                    : {
                        visible: isVisible(this.$el) && css(this.$el, 'visibility') !== 'hidden',
                        inView: this.inView && isInView(this.$el)
                    };
            },

            write: function(ref) {
                var visible = ref.visible;
                var inView = ref.inView;


                if (!visible || this.inView && !inView) {
                    this.player.pause();
                } else if (this.autoplay === true || this.inView && inView) {
                    this.player.play();
                }

            },

            events: ['resize', 'scroll']

        }

    };

    var cover = {

        mixins: [Class, Video],

        props: {
            width: Number,
            height: Number
        },

        data: {
            automute: true
        },

        update: {

            read: function() {

                var el = this.$el;
                var ref = el.parentNode;
                var height = ref.offsetHeight;
                var width = ref.offsetWidth;
                var dim = Dimensions.cover(
                    {
                        width: this.width || el.naturalWidth || el.videoWidth || el.clientWidth,
                        height: this.height || el.naturalHeight || el.videoHeight || el.clientHeight
                    },
                    {
                        width: width + (width % 2 ? 1 : 0),
                        height: height + (height % 2 ? 1 : 0)
                    }
                );

                if (!dim.width || !dim.height) {
                    return false;
                }

                return dim;
            },

            write: function(ref) {
                var height = ref.height;
                var width = ref.width;

                css(this.$el, {height: height, width: width});
            },

            events: ['resize']

        }

    };

    var Position = {

        props: {
            pos: String,
            offset: null,
            flip: Boolean,
            clsPos: String
        },

        data: {
            pos: ("bottom-" + (!isRtl ? 'left' : 'right')),
            flip: true,
            offset: false,
            clsPos: ''
        },

        computed: {

            pos: function(ref) {
                var pos = ref.pos;

                return (pos + (!includes(pos, '-') ? '-center' : '')).split('-');
            },

            dir: function() {
                return this.pos[0];
            },

            align: function() {
                return this.pos[1];
            }

        },

        methods: {

            positionAt: function(element, target, boundary) {

                removeClasses(element, ((this.clsPos) + "-(top|bottom|left|right)(-[a-z]+)?"));
                css(element, {top: '', left: ''});

                var node;
                var ref = this;
                var offset$1 = ref.offset;
                var axis = this.getAxis();

                if (!isNumeric(offset$1)) {
                    node = $(offset$1);
                    offset$1 = node
                        ? offset(node)[axis === 'x' ? 'left' : 'top'] - offset(target)[axis === 'x' ? 'right' : 'bottom']
                        : 0;
                }

                var ref$1 = positionAt(
                    element,
                    target,
                    axis === 'x' ? ((flipPosition(this.dir)) + " " + (this.align)) : ((this.align) + " " + (flipPosition(this.dir))),
                    axis === 'x' ? ((this.dir) + " " + (this.align)) : ((this.align) + " " + (this.dir)),
                    axis === 'x' ? ("" + (this.dir === 'left' ? -offset$1 : offset$1)) : (" " + (this.dir === 'top' ? -offset$1 : offset$1)),
                    null,
                    this.flip,
                    boundary
                ).target;
                var x = ref$1.x;
                var y = ref$1.y;

                this.dir = axis === 'x' ? x : y;
                this.align = axis === 'x' ? y : x;

                toggleClass(element, ((this.clsPos) + "-" + (this.dir) + "-" + (this.align)), this.offset === false);

            },

            getAxis: function() {
                return this.dir === 'top' || this.dir === 'bottom' ? 'y' : 'x';
            }

        }

    };

    var active;

    var Drop = {

        mixins: [Position, Togglable],

        args: 'pos',

        props: {
            mode: 'list',
            toggle: Boolean,
            boundary: Boolean,
            boundaryAlign: Boolean,
            delayShow: Number,
            delayHide: Number,
            clsDrop: String
        },

        data: {
            mode: ['click', 'hover'],
            toggle: '- *',
            boundary: window,
            boundaryAlign: false,
            delayShow: 0,
            delayHide: 800,
            clsDrop: false,
            animation: ['gsl-animation-fade'],
            cls: 'gsl-open'
        },

        computed: {

            boundary: function(ref, $el) {
                var boundary = ref.boundary;

                return query(boundary, $el);
            },

            clsDrop: function(ref) {
                var clsDrop = ref.clsDrop;

                return clsDrop || ("gsl-" + (this.$options.name));
            },

            clsPos: function() {
                return this.clsDrop;
            }

        },

        created: function() {
            this.tracker = new MouseTracker();
        },

        connected: function() {

            addClass(this.$el, this.clsDrop);

            var ref = this.$props;
            var toggle = ref.toggle;
            this.toggle = toggle && this.$create('toggle', query(toggle, this.$el), {
                target: this.$el,
                mode: this.mode
            });

            !this.toggle && trigger(this.$el, 'updatearia');

        },

        events: [


            {

                name: 'click',

                delegate: function() {
                    return ("." + (this.clsDrop) + "-close");
                },

                handler: function(e) {
                    e.preventDefault();
                    this.hide(false);
                }

            },

            {

                name: 'click',

                delegate: function() {
                    return 'a[href^="#"]';
                },

                handler: function(ref) {
                    var defaultPrevented = ref.defaultPrevented;
                    var hash = ref.current.hash;

                    if (!defaultPrevented && hash && !within(hash, this.$el)) {
                        this.hide(false);
                    }
                }

            },

            {

                name: 'beforescroll',

                handler: function() {
                    this.hide(false);
                }

            },

            {

                name: 'toggle',

                self: true,

                handler: function(e, toggle) {

                    e.preventDefault();

                    if (this.isToggled()) {
                        this.hide(false);
                    } else {
                        this.show(toggle, false);
                    }
                }

            },

            {

                name: 'toggleshow',

                self: true,

                handler: function(e, toggle) {
                    e.preventDefault();
                    this.show(toggle);
                }

            },

            {

                name: 'togglehide',

                self: true,

                handler: function(e) {
                    e.preventDefault();
                    this.hide();
                }

            },

            {

                name: pointerEnter,

                filter: function() {
                    return includes(this.mode, 'hover');
                },

                handler: function(e) {
                    if (!isTouch(e)) {
                        this.clearTimers();
                    }
                }

            },

            {

                name: pointerLeave,

                filter: function() {
                    return includes(this.mode, 'hover');
                },

                handler: function(e) {
                    if (!isTouch(e) && !matches(this.$el, ':hover')) {
                        this.hide();
                    }
                }

            },

            {

                name: 'beforeshow',

                self: true,

                handler: function() {
                    this.clearTimers();
                    Animation.cancel(this.$el);
                    this.position();
                }

            },

            {

                name: 'show',

                self: true,

                handler: function() {
                    var this$1 = this;


                    active = this;

                    this.tracker.init();
                    trigger(this.$el, 'updatearia');

                    // If triggered from an click event handler, delay adding the click handler
                    var off = delayOn(document, 'click', function (ref) {
                        var defaultPrevented = ref.defaultPrevented;
                        var target = ref.target;

                        if (!defaultPrevented && !within(target, this$1.$el) && !(this$1.toggle && within(target, this$1.toggle.$el))) {
                            this$1.hide(false);
                        }
                    });

                    once(this.$el, 'hide', off, {self: true});
                }

            },

            {

                name: 'beforehide',

                self: true,

                handler: function() {
                    this.clearTimers();
                }

            },

            {

                name: 'hide',

                handler: function(ref) {
                    var target = ref.target;


                    if (this.$el !== target) {
                        active = active === null && within(target, this.$el) && this.isToggled() ? this : active;
                        return;
                    }

                    active = this.isActive() ? null : active;
                    trigger(this.$el, 'updatearia');
                    this.tracker.cancel();
                }

            },

            {

                name: 'updatearia',

                self: true,

                handler: function(e, toggle) {

                    e.preventDefault();

                    this.updateAria(this.$el);

                    if (toggle || this.toggle) {
                        attr((toggle || this.toggle).$el, 'aria-expanded', this.isToggled());
                        toggleClass(this.toggle.$el, this.cls, this.isToggled());
                    }
                }
            }

        ],

        update: {

            write: function() {

                if (this.isToggled() && !Animation.inProgress(this.$el)) {
                    this.position();
                }

            },

            events: ['resize']

        },

        methods: {

            show: function(toggle, delay) {
                var this$1 = this;
                if ( toggle === void 0 ) toggle = this.toggle;
                if ( delay === void 0 ) delay = true;


                if (this.isToggled() && toggle && this.toggle && toggle.$el !== this.toggle.$el) {
                    this.hide(false);
                }

                this.toggle = toggle;

                this.clearTimers();

                if (this.isActive()) {
                    return;
                }

                if (active) {

                    if (delay && active.isDelaying) {
                        this.showTimer = setTimeout(this.show, 10);
                        return;
                    }

                    while (active && !within(this.$el, active.$el)) {
                        active.hide(false);
                    }
                }

                this.showTimer = setTimeout(function () { return !this$1.isToggled() && this$1.toggleElement(this$1.$el, true); }, delay && this.delayShow || 0);

            },

            hide: function(delay) {
                var this$1 = this;
                if ( delay === void 0 ) delay = true;


                var hide = function () { return this$1.toggleNow(this$1.$el, false); };

                this.clearTimers();

                this.isDelaying = getPositionedElements(this.$el).some(function (el) { return this$1.tracker.movesTo(el); });

                if (delay && this.isDelaying) {
                    this.hideTimer = setTimeout(this.hide, 50);
                } else if (delay && this.delayHide) {
                    this.hideTimer = setTimeout(hide, this.delayHide);
                } else {
                    hide();
                }
            },

            clearTimers: function() {
                clearTimeout(this.showTimer);
                clearTimeout(this.hideTimer);
                this.showTimer = null;
                this.hideTimer = null;
                this.isDelaying = false;
            },

            isActive: function() {
                return active === this;
            },

            position: function() {

                removeClasses(this.$el, ((this.clsDrop) + "-(stack|boundary)"));
                css(this.$el, {top: '', left: '', display: 'block'});
                toggleClass(this.$el, ((this.clsDrop) + "-boundary"), this.boundaryAlign);

                var boundary = offset(this.boundary);
                var alignTo = this.boundaryAlign ? boundary : offset(this.toggle.$el);

                if (this.align === 'justify') {
                    var prop = this.getAxis() === 'y' ? 'width' : 'height';
                    css(this.$el, prop, alignTo[prop]);
                } else if (this.$el.offsetWidth > Math.max(boundary.right - alignTo.left, alignTo.right - boundary.left)) {
                    addClass(this.$el, ((this.clsDrop) + "-stack"));
                }

                this.positionAt(this.$el, this.boundaryAlign ? this.boundary : this.toggle.$el, this.boundary);

                css(this.$el, 'display', '');

            }

        }

    };

    function getPositionedElements(el) {
        var result = css(el, 'position') !== 'static' ? [el] : [];
        return result.concat.apply(result, children(el).map(getPositionedElements));
    }

    function delayOn(el, type, fn) {
        var off = once(el, type, function () { return off = on(el, type, fn); }
        , true);
        return function () { return off(); };
    }

    var dropdown = {

        extends: Drop

    };

    var formCustom = {

        mixins: [Class],

        args: 'target',

        props: {
            target: Boolean
        },

        data: {
            target: false
        },

        computed: {

            input: function(_, $el) {
                return $(selInput, $el);
            },

            state: function() {
                return this.input.nextElementSibling;
            },

            target: function(ref, $el) {
                var target = ref.target;

                return target && (target === true
                    && this.input.parentNode === $el
                    && this.input.nextElementSibling
                    || query(target, $el));
            }

        },

        update: function() {

            var ref = this;
            var target = ref.target;
            var input = ref.input;

            if (!target) {
                return;
            }

            var option;
            var prop = isInput(target) ? 'value' : 'textContent';
            var prev = target[prop];
            var value = input.files && input.files[0]
                ? input.files[0].name
                : matches(input, 'select') && (option = $$('option', input).filter(function (el) { return el.selected; })[0]) // eslint-disable-line prefer-destructuring
                    ? option.textContent
                    : input.value;

            if (prev !== value) {
                target[prop] = value;
            }

        },

        events: [

            {
                name: 'change',

                handler: function() {
                    this.$emit();
                }
            },

            {
                name: 'reset',

                el: function() {
                    return closest(this.$el, 'form');
                },

                handler: function() {
                    this.$emit();
                }
            }

        ]

    };

    // Deprecated
    var gif = {

        update: {

            read: function(data) {

                var inview = isInView(this.$el);

                if (!inview || data.isInView === inview) {
                    return false;
                }

                data.isInView = inview;
            },

            write: function() {
                this.$el.src = this.$el.src;
            },

            events: ['scroll', 'resize']
        }

    };

    var Margin = {

        props: {
            margin: String,
            firstColumn: Boolean
        },

        data: {
            margin: 'gsl-margin-small-top',
            firstColumn: 'gsl-first-column'
        },

        update: {

            read: function(data) {

                var items = this.$el.children;
                var rows = [[]];

                if (!items.length || !isVisible(this.$el)) {
                    return data.rows = rows;
                }

                data.rows = getRows(items);
                data.stacks = !data.rows.some(function (row) { return row.length > 1; });

            },

            write: function(ref) {
                var this$1 = this;
                var rows = ref.rows;


                rows.forEach(function (row, i) { return row.forEach(function (el, j) {
                        toggleClass(el, this$1.margin, i !== 0);
                        toggleClass(el, this$1.firstColumn, j === 0);
                    }); }
                );

            },

            events: ['resize']

        }

    };

    function getRows(items) {
        var rows = [[]];

        for (var i = 0; i < items.length; i++) {

            var el = items[i];
            var dim = getOffset(el);

            if (!dim.height) {
                continue;
            }

            for (var j = rows.length - 1; j >= 0; j--) {

                var row = rows[j];

                if (!row[0]) {
                    row.push(el);
                    break;
                }

                var leftDim = (void 0);
                if (row[0].offsetParent === el.offsetParent) {
                    leftDim = getOffset(row[0]);
                } else {
                    dim = getOffset(el, true);
                    leftDim = getOffset(row[0], true);
                }

                if (dim.top >= leftDim.bottom - 1 && dim.top !== leftDim.top) {
                    rows.push([el]);
                    break;
                }

                if (dim.bottom > leftDim.top) {

                    if (dim.left < leftDim.left && !isRtl) {
                        row.unshift(el);
                        break;
                    }

                    row.push(el);
                    break;
                }

                if (j === 0) {
                    rows.unshift([el]);
                    break;
                }

            }

        }

        return rows;

    }

    function getOffset(element, offset) {
        var assign;

        if ( offset === void 0 ) offset = false;

        var offsetTop = element.offsetTop;
        var offsetLeft = element.offsetLeft;
        var offsetHeight = element.offsetHeight;

        if (offset) {
            (assign = offsetPosition(element), offsetTop = assign[0], offsetLeft = assign[1]);
        }

        return {
            top: offsetTop,
            left: offsetLeft,
            height: offsetHeight,
            bottom: offsetTop + offsetHeight
        };
    }

    var grid = {

        extends: Margin,

        mixins: [Class],

        name: 'grid',

        props: {
            masonry: Boolean,
            parallax: Number
        },

        data: {
            margin: 'gsl-grid-margin',
            clsStack: 'gsl-grid-stack',
            masonry: false,
            parallax: 0
        },

        computed: {

            length: function(_, $el) {
                return $el.children.length;
            },

            parallax: function(ref) {
                var parallax = ref.parallax;

                return parallax && this.length ? Math.abs(parallax) : '';
            }

        },

        connected: function() {
            this.masonry && addClass(this.$el, 'gsl-flex-top gsl-flex-wrap-top');
        },

        update: [

            {

                write: function(ref) {
                    var stacks = ref.stacks;

                    toggleClass(this.$el, this.clsStack, stacks);
                },

                events: ['resize']

            },

            {

                read: function(ref) {
                    var rows = ref.rows;


                    if (this.masonry || this.parallax) {
                        rows = rows.map(function (elements) { return sortBy(elements, 'offsetLeft'); });

                        if (isRtl) {
                            rows.map(function (row) { return row.reverse(); });
                        }

                    } else {
                        return false;
                    }

                    var transitionInProgress = rows.some(function (elements) { return elements.some(Transition.inProgress); });
                    var translates = false;
                    var elHeight = '';

                    if (this.masonry && this.length) {

                        var height = 0;

                        translates = rows.reduce(function (translates, row, i) {

                            translates[i] = row.map(function (_, j) { return i === 0 ? 0 : toFloat(translates[i - 1][j]) + (height - toFloat(rows[i - 1][j] && rows[i - 1][j].offsetHeight)); });
                            height = row.reduce(function (height, el) { return Math.max(height, el.offsetHeight); }, 0);

                            return translates;

                        }, []);

                        elHeight = maxColumnHeight(rows) + getMarginTop(this.$el, this.margin) * (rows.length - 1);

                    }

                    var padding = this.parallax && getPaddingBottom(this.parallax, rows, translates);

                    return {padding: padding, rows: rows, translates: translates, height: !transitionInProgress ? elHeight : false};

                },

                write: function(ref) {
                    var stacks = ref.stacks;
                    var height = ref.height;
                    var padding = ref.padding;


                    toggleClass(this.$el, this.clsStack, stacks);

                    css(this.$el, 'paddingBottom', padding);
                    height !== false && css(this.$el, 'height', height);

                },

                events: ['resize']

            },

            {

                read: function(ref) {
                    var height$1 = ref.height;

                    return {
                        scrolled: this.parallax
                            ? scrolledOver(this.$el, height$1 ? height$1 - height(this.$el) : 0) * this.parallax
                            : false
                    };
                },

                write: function(ref) {
                    var rows = ref.rows;
                    var scrolled = ref.scrolled;
                    var translates = ref.translates;


                    if (scrolled === false && !translates) {
                        return;
                    }

                    rows.forEach(function (row, i) { return row.forEach(function (el, j) { return css(el, 'transform', !scrolled && !translates ? '' : ("translateY(" + ((translates && -translates[i][j]) + (scrolled ? j % 2 ? scrolled : scrolled / 8 : 0)) + "px)")); }
                        ); }
                    );

                },

                events: ['scroll', 'resize']

            }

        ]

    };

    function getPaddingBottom(distance, rows, translates) {
        var column = 0;
        var max = 0;
        var maxScrolled = 0;
        for (var i = rows.length - 1; i >= 0; i--) {
            for (var j = column; j < rows[i].length; j++) {
                var el = rows[i][j];
                var bottom = el.offsetTop + height(el) + (translates && -translates[i][j]);
                max = Math.max(max, bottom);
                maxScrolled = Math.max(maxScrolled, bottom + (j % 2 ? distance : distance / 8));
                column++;
            }
        }
        return maxScrolled - max;
    }

    function getMarginTop(root, cls) {

        var nodes = children(root);
        var ref = nodes.filter(function (el) { return hasClass(el, cls); });
        var node = ref[0];

        return toFloat(node
            ? css(node, 'marginTop')
            : css(nodes[0], 'paddingLeft'));
    }

    function maxColumnHeight(rows) {
        return Math.max.apply(Math, rows.reduce(function (sum, row) {
            row.forEach(function (el, i) { return sum[i] = (sum[i] || 0) + el.offsetHeight; });
            return sum;
        }, []));
    }

    // IE 11 fix (min-height on a flex container won't apply to its flex items)
    var FlexBug = isIE ? {

        props: {
            selMinHeight: String
        },

        data: {
            selMinHeight: false,
            forceHeight: false
        },

        computed: {

            elements: function(ref, $el) {
                var selMinHeight = ref.selMinHeight;

                return selMinHeight ? $$(selMinHeight, $el) : [$el];
            }

        },

        update: [

            {

                read: function() {
                    css(this.elements, 'height', '');
                },

                order: -5,

                events: ['resize']

            },

            {

                write: function() {
                    var this$1 = this;

                    this.elements.forEach(function (el) {
                        var height = toFloat(css(el, 'minHeight'));
                        if (height && (this$1.forceHeight || Math.round(height + boxModelAdjust(el, 'height', 'content-box')) >= el.offsetHeight)) {
                            css(el, 'height', height);
                        }
                    });
                },

                order: 5,

                events: ['resize']

            }

        ]

    } : {};

    var heightMatch = {

        mixins: [FlexBug],

        args: 'target',

        props: {
            target: String,
            row: Boolean
        },

        data: {
            target: '> *',
            row: true,
            forceHeight: true
        },

        computed: {

            elements: function(ref, $el) {
                var target = ref.target;

                return $$(target, $el);
            }

        },

        update: {

            read: function() {
                return {
                    rows: (this.row ? getRows(this.elements) : [this.elements]).map(match)
                };
            },

            write: function(ref) {
                var rows = ref.rows;

                rows.forEach(function (ref) {
                        var heights = ref.heights;
                        var elements = ref.elements;

                        return elements.forEach(function (el, i) { return css(el, 'minHeight', heights[i]); }
                    );
                }
                );
            },

            events: ['resize']

        }

    };

    function match(elements) {
        var assign;


        if (elements.length < 2) {
            return {heights: [''], elements: elements};
        }

        var ref = getHeights(elements);
        var heights = ref.heights;
        var max = ref.max;
        var hasMinHeight = elements.some(function (el) { return el.style.minHeight; });
        var hasShrunk = elements.some(function (el, i) { return !el.style.minHeight && heights[i] < max; });

        if (hasMinHeight && hasShrunk) {
            css(elements, 'minHeight', '');
            ((assign = getHeights(elements), heights = assign.heights, max = assign.max));
        }

        heights = elements.map(function (el, i) { return heights[i] === max && toFloat(el.style.minHeight).toFixed(2) !== max.toFixed(2) ? '' : max; }
        );

        return {heights: heights, elements: elements};
    }

    function getHeights(elements) {
        var heights = elements.map(function (el) { return offset(el).height - boxModelAdjust(el, 'height', 'content-box'); });
        var max = Math.max.apply(null, heights);

        return {heights: heights, max: max};
    }

    var heightViewport = {

        mixins: [FlexBug],

        props: {
            expand: Boolean,
            offsetTop: Boolean,
            offsetBottom: Boolean,
            minHeight: Number
        },

        data: {
            expand: false,
            offsetTop: false,
            offsetBottom: false,
            minHeight: 0
        },

        update: {

            read: function(ref) {
                var prev = ref.minHeight;


                if (!isVisible(this.$el)) {
                    return false;
                }

                var minHeight = '';
                var box = boxModelAdjust(this.$el, 'height', 'content-box');

                if (this.expand) {

                    this.$el.dataset.heightExpand = '';

                    if ($('[data-height-expand]') !== this.$el) {
                        return false;
                    }

                    minHeight = height(window) - (offsetHeight(document.documentElement) - offsetHeight(this.$el)) - box || '';

                } else {

                    // on mobile devices (iOS and Android) window.innerHeight !== 100vh
                    minHeight = 'calc(100vh';

                    if (this.offsetTop) {

                        var ref$1 = offset(this.$el);
                        var top = ref$1.top;
                        minHeight += top > 0 && top < height(window) / 2 ? (" - " + top + "px") : '';

                    }

                    if (this.offsetBottom === true) {

                        minHeight += " - " + (offsetHeight(this.$el.nextElementSibling)) + "px";

                    } else if (isNumeric(this.offsetBottom)) {

                        minHeight += " - " + (this.offsetBottom) + "vh";

                    } else if (this.offsetBottom && endsWith(this.offsetBottom, 'px')) {

                        minHeight += " - " + (toFloat(this.offsetBottom)) + "px";

                    } else if (isString(this.offsetBottom)) {

                        minHeight += " - " + (offsetHeight(query(this.offsetBottom, this.$el))) + "px";

                    }

                    minHeight += (box ? (" - " + box + "px") : '') + ")";

                }

                return {minHeight: minHeight, prev: prev};
            },

            write: function(ref) {
                var minHeight = ref.minHeight;
                var prev = ref.prev;


                css(this.$el, {minHeight: minHeight});

                if (minHeight !== prev) {
                    this.$update(this.$el, 'resize');
                }

                if (this.minHeight && toFloat(css(this.$el, 'minHeight')) < this.minHeight) {
                    css(this.$el, 'minHeight', this.minHeight);
                }

            },

            events: ['resize']

        }

    };

    function offsetHeight(el) {
        return el && offset(el).height || 0;
    }

    var SVG = {

        args: 'src',

        props: {
            id: Boolean,
            icon: String,
            src: String,
            style: String,
            width: Number,
            height: Number,
            ratio: Number,
            class: String,
            strokeAnimation: Boolean,
            focusable: Boolean, // IE 11
            attributes: 'list'
        },

        data: {
            ratio: 1,
            include: ['style', 'class', 'focusable'],
            class: '',
            strokeAnimation: false
        },

        beforeConnect: function() {
            var this$1 = this;
            var assign;


            this.class += ' gsl-svg';

            if (!this.icon && includes(this.src, '#')) {

                var parts = this.src.split('#');

                if (parts.length > 1) {
                    (assign = parts, this.src = assign[0], this.icon = assign[1]);
                }
            }

            this.svg = this.getSvg().then(function (el) {
                this$1.applyAttributes(el);
                return this$1.svgEl = insertSVG(el, this$1.$el);
            }, noop);

        },

        disconnected: function() {
            var this$1 = this;


            if (isVoidElement(this.$el)) {
                attr(this.$el, 'hidden', null);
            }

            if (this.svg) {
                this.svg.then(function (svg) { return (!this$1._connected || svg !== this$1.svgEl) && remove(svg); }, noop);
            }

            this.svg = this.svgEl = null;

        },

        update: {

            read: function() {
                return !!(this.strokeAnimation && this.svgEl && isVisible(this.svgEl));
            },

            write: function() {
                applyAnimation(this.svgEl);
            },

            type: ['resize']

        },

        methods: {

            getSvg: function() {
                var this$1 = this;

                return loadSVG(this.src).then(function (svg) { return parseSVG(svg, this$1.icon) || Promise.reject('SVG not found.'); }
                );
            },

            applyAttributes: function(el) {
                var this$1 = this;


                for (var prop in this.$options.props) {
                    if (this[prop] && includes(this.include, prop)) {
                        attr(el, prop, this[prop]);
                    }
                }

                for (var attribute in this.attributes) {
                    var ref = this.attributes[attribute].split(':', 2);
                    var prop$1 = ref[0];
                    var value = ref[1];
                    attr(el, prop$1, value);
                }

                if (!this.id) {
                    removeAttr(el, 'id');
                }

                var props = ['width', 'height'];
                var dimensions = [this.width, this.height];

                if (!dimensions.some(function (val) { return val; })) {
                    dimensions = props.map(function (prop) { return attr(el, prop); });
                }

                var viewBox = attr(el, 'viewBox');
                if (viewBox && !dimensions.some(function (val) { return val; })) {
                    dimensions = viewBox.split(' ').slice(2);
                }

                dimensions.forEach(function (val, i) {
                    val = (val | 0) * this$1.ratio;
                    val && attr(el, props[i], val);

                    if (val && !dimensions[i ^ 1]) {
                        removeAttr(el, props[i ^ 1]);
                    }
                });

                attr(el, 'data-svg', this.icon || this.src);

            }

        }

    };

    var svgs = {};

    function loadSVG(src) {

        if (svgs[src]) {
            return svgs[src];
        }

        return svgs[src] = new Promise(function (resolve, reject) {

            if (!src) {
                reject();
                return;
            }

            if (startsWith(src, 'data:')) {
                resolve(decodeURIComponent(src.split(',')[1]));
            } else {

                ajax(src).then(
                    function (xhr) { return resolve(xhr.response); },
                    function () { return reject('SVG not found.'); }
                );

            }

        });
    }

    function parseSVG(svg, icon) {

        if (icon && includes(svg, '<symbol')) {
            svg = parseSymbols(svg, icon) || svg;
        }

        svg = $(svg.substr(svg.indexOf('<svg')));
        return svg && svg.hasChildNodes() && svg;
    }

    var symbolRe = /<symbol(.*?id=(['"])(.*?)\2[^]*?<\/)symbol>/g;
    var symbols = {};

    function parseSymbols(svg, icon) {

        if (!symbols[svg]) {

            symbols[svg] = {};

            var match;
            while ((match = symbolRe.exec(svg))) {
                symbols[svg][match[3]] = "<svg xmlns=\"http://www.w3.org/2000/svg\"" + (match[1]) + "svg>";
            }

            symbolRe.lastIndex = 0;

        }

        return symbols[svg][icon];
    }

    function applyAnimation(el) {

        var length = getMaxPathLength(el);

        if (length) {
            el.style.setProperty('--gsl-animation-stroke', length);
        }

    }

    function getMaxPathLength(el) {
        return Math.ceil(Math.max.apply(Math, $$('[stroke]', el).map(function (stroke) { return stroke.getTotalLength && stroke.getTotalLength() || 0; }
        ).concat([0])));
    }

    function insertSVG(el, root) {
        if (isVoidElement(root) || root.tagName === 'CANVAS') {

            attr(root, 'hidden', true);

            var next = root.nextElementSibling;
            return equals(el, next)
                ? next
                : after(root, el);

        } else {

            var last = root.lastElementChild;
            return equals(el, last)
                ? last
                : append(root, el);

        }
    }

    function equals(el, other) {
        return attr(el, 'data-svg') === attr(other, 'data-svg');
    }

    var closeIcon = "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"1\" y1=\"1\" x2=\"13\" y2=\"13\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"13\" y1=\"1\" x2=\"1\" y2=\"13\"/></svg>";

    var closeLarge = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" x1=\"1\" y1=\"1\" x2=\"19\" y2=\"19\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" x1=\"19\" y1=\"1\" x2=\"1\" y2=\"19\"/></svg>";

    var marker = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"9\" y=\"4\" width=\"1\" height=\"11\"/><rect x=\"4\" y=\"9\" width=\"11\" height=\"1\"/></svg>";

    var navbarToggleIcon = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><rect y=\"9\" width=\"20\" height=\"2\"/><rect y=\"3\" width=\"20\" height=\"2\"/><rect y=\"15\" width=\"20\" height=\"2\"/></svg>";

    var overlayIcon = "<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"19\" y=\"0\" width=\"1\" height=\"40\"/><rect x=\"0\" y=\"19\" width=\"40\" height=\"1\"/></svg>";

    var paginationNext = "<svg width=\"7\" height=\"12\" viewBox=\"0 0 7 12\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" points=\"1 1 6 6 1 11\"/></svg>";

    var paginationPrevious = "<svg width=\"7\" height=\"12\" viewBox=\"0 0 7 12\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" points=\"6 1 1 6 6 11\"/></svg>";

    var searchIcon = "<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"9\" cy=\"9\" r=\"7\"/><path fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" d=\"M14,14 L18,18 L14,14 Z\"/></svg>";

    var searchLarge = "<svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.8\" cx=\"17.5\" cy=\"17.5\" r=\"16.5\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.8\" x1=\"38\" y1=\"39\" x2=\"29\" y2=\"30\"/></svg>";

    var searchNavbar = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" cx=\"10.5\" cy=\"10.5\" r=\"9.5\"/><line fill=\"none\" stroke=\"#000\" stroke-width=\"1.1\" x1=\"23\" y1=\"23\" x2=\"17\" y2=\"17\"/></svg>";

    var slidenavNext = "<svg width=\"14px\" height=\"24px\" viewBox=\"0 0 14 24\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" points=\"1.225,23 12.775,12 1.225,1 \"/></svg>";

    var slidenavNextLarge = "<svg width=\"25px\" height=\"40px\" viewBox=\"0 0 25 40\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"2\" points=\"4.002,38.547 22.527,20.024 4,1.5 \"/></svg>";

    var slidenavPrevious = "<svg width=\"14px\" height=\"24px\" viewBox=\"0 0 14 24\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.4\" points=\"12.775,1 1.225,12 12.775,23 \"/></svg>";

    var slidenavPreviousLarge = "<svg width=\"25px\" height=\"40px\" viewBox=\"0 0 25 40\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"2\" points=\"20.527,1.5 2,20.024 20.525,38.547 \"/></svg>";

    var spinner = "<svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" xmlns=\"http://www.w3.org/2000/svg\"><circle fill=\"none\" stroke=\"#000\" cx=\"15\" cy=\"15\" r=\"14\"/></svg>";

    var totop = "<svg width=\"18\" height=\"10\" viewBox=\"0 0 18 10\" xmlns=\"http://www.w3.org/2000/svg\"><polyline fill=\"none\" stroke=\"#000\" stroke-width=\"1.2\" points=\"1 9 9 1 17 9 \"/></svg>";

    var parsed = {};
    var icons = {
        spinner: spinner,
        totop: totop,
        marker: marker,
        'close-icon': closeIcon,
        'close-large': closeLarge,
        'navbar-toggle-icon': navbarToggleIcon,
        'overlay-icon': overlayIcon,
        'pagination-next': paginationNext,
        'pagination-previous': paginationPrevious,
        'search-icon': searchIcon,
        'search-large': searchLarge,
        'search-navbar': searchNavbar,
        'slidenav-next': slidenavNext,
        'slidenav-next-large': slidenavNextLarge,
        'slidenav-previous': slidenavPrevious,
        'slidenav-previous-large': slidenavPreviousLarge
    };

    var Icon = {

        install: install,

        extends: SVG,

        args: 'icon',

        props: ['icon'],

        data: {
            include: ['focusable']
        },

        isIcon: true,

        beforeConnect: function() {
            addClass(this.$el, 'gsl-icon');
        },

        methods: {

            getSvg: function() {

                var icon = getIcon(applyRtl(this.icon));

                if (!icon) {
                    return Promise.reject('Icon not found.');
                }

                return Promise.resolve(icon);
            }

        }

    };

    var IconComponent = {

        args: false,

        extends: Icon,

        data: function (vm) { return ({
            icon: hyphenate(vm.constructor.options.name)
        }); },

        beforeConnect: function() {
            addClass(this.$el, this.$name);
        }

    };

    var Slidenav = {

        extends: IconComponent,

        beforeConnect: function() {
            addClass(this.$el, 'gsl-slidenav');
        },

        computed: {

            icon: function(ref, $el) {
                var icon = ref.icon;

                return hasClass($el, 'gsl-slidenav-large')
                    ? (icon + "-large")
                    : icon;
            }

        }

    };

    var Search = {

        extends: IconComponent,

        computed: {

            icon: function(ref, $el) {
                var icon = ref.icon;

                return hasClass($el, 'gsl-search-icon') && parents($el, '.gsl-search-large').length
                    ? 'search-large'
                    : parents($el, '.gsl-search-navbar').length
                        ? 'search-navbar'
                        : icon;
            }

        }

    };

    var Close = {

        extends: IconComponent,

        computed: {

            icon: function() {
                return ("close-" + (hasClass(this.$el, 'gsl-close-large') ? 'large' : 'icon'));
            }

        }

    };

    var Spinner = {

        extends: IconComponent,

        connected: function() {
            var this$1 = this;

            this.svg.then(function (svg) { return this$1.ratio !== 1 && css($('circle', svg), 'strokeWidth', 1 / this$1.ratio); }, noop);
        }

    };

    function install(gslUIkit) {
        gslUIkit.icon.add = function (name, svg) {
            var obj;


            var added = isString(name) ? (( obj = {}, obj[name] = svg, obj )) : name;
            each(added, function (svg, name) {
                icons[name] = svg;
                delete parsed[name];
            });

            if (gslUIkit._initialized) {
                apply(document.body, function (el) { return each(gslUIkit.getComponents(el), function (cmp) {
                        cmp.$options.isIcon && cmp.icon in added && cmp.$reset();
                    }); }
                );
            }
        };
    }

    function getIcon(icon) {

        if (!icons[icon]) {
            return null;
        }

        if (!parsed[icon]) {
            parsed[icon] = $(icons[icon].trim());
        }

        return parsed[icon].cloneNode(true);
    }

    function applyRtl(icon) {
        return isRtl ? swap(swap(icon, 'left', 'right'), 'previous', 'next') : icon;
    }

    var img = {

        args: 'dataSrc',

        props: {
            dataSrc: String,
            dataSrcset: Boolean,
            sizes: String,
            width: Number,
            height: Number,
            offsetTop: String,
            offsetLeft: String,
            target: String
        },

        data: {
            dataSrc: '',
            dataSrcset: false,
            sizes: false,
            width: false,
            height: false,
            offsetTop: '50vh',
            offsetLeft: 0,
            target: false
        },

        computed: {

            cacheKey: function(ref) {
                var dataSrc = ref.dataSrc;

                return ((this.$name) + "." + dataSrc);
            },

            width: function(ref) {
                var width = ref.width;
                var dataWidth = ref.dataWidth;

                return width || dataWidth;
            },

            height: function(ref) {
                var height = ref.height;
                var dataHeight = ref.dataHeight;

                return height || dataHeight;
            },

            sizes: function(ref) {
                var sizes = ref.sizes;
                var dataSizes = ref.dataSizes;

                return sizes || dataSizes;
            },

            isImg: function(_, $el) {
                return isImg($el);
            },

            target: {

                get: function(ref) {
                    var target = ref.target;

                    return [this.$el].concat(queryAll(target, this.$el));
                },

                watch: function() {
                    this.observe();
                }

            },

            offsetTop: function(ref) {
                var offsetTop = ref.offsetTop;

                return toPx(offsetTop, 'height');
            },

            offsetLeft: function(ref) {
                var offsetLeft = ref.offsetLeft;

                return toPx(offsetLeft, 'width');
            }

        },

        connected: function() {

            if (storage[this.cacheKey]) {
                setSrcAttrs(this.$el, storage[this.cacheKey] || this.dataSrc, this.dataSrcset, this.sizes);
            } else if (this.isImg && this.width && this.height) {
                setSrcAttrs(this.$el, getPlaceholderImage(this.width, this.height, this.sizes));
            }

            this.observer = new IntersectionObserver(this.load, {
                rootMargin: ((this.offsetTop) + "px " + (this.offsetLeft) + "px")
            });

            requestAnimationFrame(this.observe);

        },

        disconnected: function() {
            this.observer.disconnect();
        },

        update: {

            read: function(ref) {
                var this$1 = this;
                var image = ref.image;


                if (!image && document.readyState === 'complete') {
                    this.load(this.observer.takeRecords());
                }

                if (this.isImg) {
                    return false;
                }

                image && image.then(function (img) { return img && img.currentSrc !== '' && setSrcAttrs(this$1.$el, currentSrc(img)); });

            },

            write: function(data) {

                if (this.dataSrcset && window.devicePixelRatio !== 1) {

                    var bgSize = css(this.$el, 'backgroundSize');
                    if (bgSize.match(/^(auto\s?)+$/) || toFloat(bgSize) === data.bgSize) {
                        data.bgSize = getSourceSize(this.dataSrcset, this.sizes);
                        css(this.$el, 'backgroundSize', ((data.bgSize) + "px"));
                    }

                }

            },

            events: ['resize']

        },

        methods: {

            load: function(entries) {
                var this$1 = this;


                // Old chromium based browsers (UC Browser) did not implement `isIntersecting`
                if (!entries.some(function (entry) { return isUndefined(entry.isIntersecting) || entry.isIntersecting; })) {
                    return;
                }

                this._data.image = getImage(this.dataSrc, this.dataSrcset, this.sizes).then(function (img) {

                    setSrcAttrs(this$1.$el, currentSrc(img), img.srcset, img.sizes);
                    storage[this$1.cacheKey] = currentSrc(img);
                    return img;

                }, noop);

                this.observer.disconnect();
            },

            observe: function() {
                var this$1 = this;

                if (!this._data.image && this._connected) {
                    this.target.forEach(function (el) { return this$1.observer.observe(el); });
                }
            }

        }

    };

    function setSrcAttrs(el, src, srcset, sizes) {

        if (isImg(el)) {
            sizes && (el.sizes = sizes);
            srcset && (el.srcset = srcset);
            src && (el.src = src);
        } else if (src) {

            var change = !includes(el.style.backgroundImage, src);
            if (change) {
                css(el, 'backgroundImage', ("url(" + (escape(src)) + ")"));
                trigger(el, createEvent('load', false));
            }

        }

    }

    function getPlaceholderImage(width, height, sizes) {
        var assign;


        if (sizes) {
            ((assign = Dimensions.ratio({width: width, height: height}, 'width', toPx(sizesToPixel(sizes))), width = assign.width, height = assign.height));
        }

        return ("data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"" + width + "\" height=\"" + height + "\"></svg>");
    }

    var sizesRe = /\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;
    function sizesToPixel(sizes) {
        var matches;

        sizesRe.lastIndex = 0;

        while ((matches = sizesRe.exec(sizes))) {
            if (!matches[1] || window.matchMedia(matches[1]).matches) {
                matches = evaluateSize(matches[2]);
                break;
            }
        }

        return matches || '100vw';
    }

    var sizeRe = /\d+(?:\w+|%)/g;
    var additionRe = /[+-]?(\d+)/g;
    function evaluateSize(size) {
        return startsWith(size, 'calc')
            ? size
                .substring(5, size.length - 1)
                .replace(sizeRe, function (size) { return toPx(size); })
                .replace(/ /g, '')
                .match(additionRe)
                .reduce(function (a, b) { return a + +b; }, 0)
            : size;
    }

    var srcSetRe = /\s+\d+w\s*(?:,|$)/g;
    function getSourceSize(srcset, sizes) {
        var srcSize = toPx(sizesToPixel(sizes));
        var descriptors = (srcset.match(srcSetRe) || []).map(toFloat).sort(function (a, b) { return a - b; });

        return descriptors.filter(function (size) { return size >= srcSize; })[0] || descriptors.pop() || '';
    }

    function isImg(el) {
        return el.tagName === 'IMG';
    }

    function currentSrc(el) {
        return el.currentSrc || el.src;
    }

    var key = '__test__';
    var storage;

    // workaround for Safari's private browsing mode and accessing sessionStorage in Blink
    try {
        storage = window.sessionStorage || {};
        storage[key] = 1;
        delete storage[key];
    } catch (e) {
        storage = {};
    }

    var Media = {

        props: {
            media: Boolean
        },

        data: {
            media: false
        },

        computed: {

            matchMedia: function() {
                var media = toMedia(this.media);
                return !media || window.matchMedia(media).matches;
            }

        }

    };

    function toMedia(value) {

        if (isString(value)) {
            if (value[0] === '@') {
                var name = "breakpoint-" + (value.substr(1));
                value = toFloat(getCssVar(name));
            } else if (isNaN(value)) {
                return value;
            }
        }

        return value && !isNaN(value) ? ("(min-width: " + value + "px)") : false;
    }

    var leader = {

        mixins: [Class, Media],

        props: {
            fill: String
        },

        data: {
            fill: '',
            clsWrapper: 'gsl-leader-fill',
            clsHide: 'gsl-leader-hide',
            attrFill: 'data-fill'
        },

        computed: {

            fill: function(ref) {
                var fill = ref.fill;

                return fill || getCssVar('leader-fill-content');
            }

        },

        connected: function() {
            var assign;

            (assign = wrapInner(this.$el, ("<span class=\"" + (this.clsWrapper) + "\">")), this.wrapper = assign[0]);
        },

        disconnected: function() {
            unwrap(this.wrapper.childNodes);
        },

        update: {

            read: function(ref) {
                var changed = ref.changed;
                var width = ref.width;


                var prev = width;

                width = Math.floor(this.$el.offsetWidth / 2);

                return {
                    width: width,
                    fill: this.fill,
                    changed: changed || prev !== width,
                    hide: !this.matchMedia
                };
            },

            write: function(data) {

                toggleClass(this.wrapper, this.clsHide, data.hide);

                if (data.changed) {
                    data.changed = false;
                    attr(this.wrapper, this.attrFill, new Array(data.width).join(data.fill));
                }

            },

            events: ['resize']

        }

    };

    var Container = {

        props: {
            container: Boolean
        },

        data: {
            container: true
        },

        computed: {

            container: function(ref) {
                var container = ref.container;

                return container === true && this.$container || container && $(container);
            }

        }

    };

    var active$1 = [];

    var Modal = {

        mixins: [Class, Container, Togglable],

        props: {
            selPanel: String,
            selClose: String,
            escClose: Boolean,
            bgClose: Boolean,
            stack: Boolean
        },

        data: {
            cls: 'gsl-open',
            escClose: true,
            bgClose: true,
            overlay: true,
            stack: false
        },

        computed: {

            panel: function(ref, $el) {
                var selPanel = ref.selPanel;

                return $(selPanel, $el);
            },

            transitionElement: function() {
                return this.panel;
            },

            bgClose: function(ref) {
                var bgClose = ref.bgClose;

                return bgClose && this.panel;
            }

        },

        beforeDisconnect: function() {
            if (this.isToggled()) {
                this.toggleNow(this.$el, false);
            }
        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return this.selClose;
                },

                handler: function(e) {
                    e.preventDefault();
                    this.hide();
                }

            },

            {

                name: 'toggle',

                self: true,

                handler: function(e) {

                    if (e.defaultPrevented) {
                        return;
                    }

                    e.preventDefault();
                    this.toggle();
                }

            },

            {
                name: 'beforeshow',

                self: true,

                handler: function(e) {

                    if (includes(active$1, this)) {
                        return false;
                    }

                    if (!this.stack && active$1.length) {
                        Promise.all(active$1.map(function (modal) { return modal.hide(); })).then(this.show);
                        e.preventDefault();
                    } else {
                        active$1.push(this);
                    }
                }

            },

            {

                name: 'show',

                self: true,

                handler: function() {
                    var this$1 = this;


                    if (width(window) - width(document) && this.overlay) {
                        css(document.body, 'overflowY', 'scroll');
                    }

                    addClass(document.documentElement, this.clsPage);

                    if (this.bgClose) {
                        once(this.$el, 'hide', delayOn(document, 'click', function (ref) {
                            var defaultPrevented = ref.defaultPrevented;
                            var target = ref.target;

                            var current = last(active$1);
                            if (!defaultPrevented
                                && current === this$1
                                && (!current.overlay || within(target, current.$el))
                                && !within(target, current.panel)
                            ) {
                                current.hide();
                            }
                        }), {self: true});
                    }

                    if (this.escClose) {
                        once(this.$el, 'hide', on(document, 'keydown', function (e) {
                            var current = last(active$1);
                            if (e.keyCode === 27 && current === this$1) {
                                e.preventDefault();
                                current.hide();
                            }
                        }), {self: true});
                    }
                }

            },

            {

                name: 'hidden',

                self: true,

                handler: function() {
                    var this$1 = this;


                    active$1.splice(active$1.indexOf(this), 1);

                    if (!active$1.length) {
                        css(document.body, 'overflowY', '');
                    }

                    if (!active$1.some(function (modal) { return modal.clsPage === this$1.clsPage; })) {
                        removeClass(document.documentElement, this.clsPage);
                    }

                }

            }

        ],

        methods: {

            toggle: function() {
                return this.isToggled() ? this.hide() : this.show();
            },

            show: function() {
                var this$1 = this;


                if (this.container && this.$el.parentNode !== this.container) {
                    append(this.container, this.$el);
                    return new Promise(function (resolve) { return requestAnimationFrame(function () { return this$1.show().then(resolve); }
                        ); }
                    );
                }

                return this.toggleElement(this.$el, true, animate$1(this));
            },

            hide: function() {
                return this.toggleElement(this.$el, false, animate$1(this));
            }

        }

    };

    function animate$1(ref) {
        var transitionElement = ref.transitionElement;
        var _toggle = ref._toggle;

        return function (el, show) { return new Promise(function (resolve, reject) { return once(el, 'show hide', function () {
                    el._reject && el._reject();
                    el._reject = reject;

                    _toggle(el, show);

                    var off = once(transitionElement, 'transitionstart', function () {
                        once(transitionElement, 'transitionend transitioncancel', resolve, {self: true});
                        clearTimeout(timer);
                    }, {self: true});

                    var timer = setTimeout(function () {
                        off();
                        resolve();
                    }, toMs(css(transitionElement, 'transitionDuration')));

                }); }
            ); };
    }

    var modal = {

        install: install$1,

        mixins: [Modal],

        data: {
            clsPage: 'gsl-modal-page',
            selPanel: '.gsl-modal-dialog',
            selClose: '.gsl-modal-close, .gsl-modal-close-default, .gsl-modal-close-outside, .gsl-modal-close-full'
        },

        events: [

            {
                name: 'show',

                self: true,

                handler: function() {

                    if (hasClass(this.panel, 'gsl-margin-auto-vertical')) {
                        addClass(this.$el, 'gsl-flex');
                    } else {
                        css(this.$el, 'display', 'block');
                    }

                    height(this.$el); // force reflow
                }
            },

            {
                name: 'hidden',

                self: true,

                handler: function() {

                    css(this.$el, 'display', '');
                    removeClass(this.$el, 'gsl-flex');

                }
            }

        ]

    };

    function install$1(gslUIkit) {

        gslUIkit.modal.dialog = function (content, options) {

            var dialog = gslUIkit.modal((" <div class=\"gsl-modal\"> <div class=\"gsl-modal-dialog\">" + content + "</div> </div> "), options);

            dialog.show();

            on(dialog.$el, 'hidden', function () { return Promise.resolve(function () { return dialog.$destroy(true); }); }, {self: true});

            return dialog;
        };

        gslUIkit.modal.alert = function (message, options) {

            options = assign({bgClose: false, escClose: false, labels: gslUIkit.modal.labels}, options);

            return new Promise(
                function (resolve) { return on(gslUIkit.modal.dialog((" <div class=\"gsl-modal-body\">" + (isString(message) ? message : html(message)) + "</div> <div class=\"gsl-modal-footer gsl-text-right\"> <button class=\"gsl-button gsl-button-primary gsl-modal-close\" autofocus>" + (options.labels.ok) + "</button> </div> "), options).$el, 'hide', resolve); }
            );
        };

        gslUIkit.modal.confirm = function (message, options) {

            options = assign({bgClose: false, escClose: true, labels: gslUIkit.modal.labels}, options);

            return new Promise(function (resolve, reject) {

                var confirm = gslUIkit.modal.dialog((" <form> <div class=\"gsl-modal-body\">" + (isString(message) ? message : html(message)) + "</div> <div class=\"gsl-modal-footer gsl-text-right\"> <button class=\"gsl-button gsl-button-default gsl-modal-close\" type=\"button\">" + (options.labels.cancel) + "</button> <button class=\"gsl-button gsl-button-primary\" autofocus>" + (options.labels.ok) + "</button> </div> </form> "), options);

                var resolved = false;

                on(confirm.$el, 'submit', 'form', function (e) {
                    e.preventDefault();
                    resolve();
                    resolved = true;
                    confirm.hide();
                });
                on(confirm.$el, 'hide', function () {
                    if (!resolved) {
                        reject();
                    }
                });

            });
        };

        gslUIkit.modal.prompt = function (message, value, options) {

            options = assign({bgClose: false, escClose: true, labels: gslUIkit.modal.labels}, options);

            return new Promise(function (resolve) {

                var prompt = gslUIkit.modal.dialog((" <form class=\"gsl-form-stacked\"> <div class=\"gsl-modal-body\"> <label>" + (isString(message) ? message : html(message)) + "</label> <input class=\"gsl-input\" autofocus> </div> <div class=\"gsl-modal-footer gsl-text-right\"> <button class=\"gsl-button gsl-button-default gsl-modal-close\" type=\"button\">" + (options.labels.cancel) + "</button> <button class=\"gsl-button gsl-button-primary\">" + (options.labels.ok) + "</button> </div> </form> "), options),
                    input = $('input', prompt.$el);

                input.value = value;

                var resolved = false;

                on(prompt.$el, 'submit', 'form', function (e) {
                    e.preventDefault();
                    resolve(input.value);
                    resolved = true;
                    prompt.hide();
                });
                on(prompt.$el, 'hide', function () {
                    if (!resolved) {
                        resolve(null);
                    }
                });

            });
        };

        gslUIkit.modal.labels = {
            ok: 'Ok',
            cancel: 'Cancel'
        };

    }

    var nav = {

        extends: Accordion,

        data: {
            targets: '> .gsl-parent',
            toggle: '> a',
            content: '> ul'
        }

    };

    var navbar = {

        mixins: [Class, FlexBug],

        props: {
            dropdown: String,
            mode: 'list',
            align: String,
            offset: Number,
            boundary: Boolean,
            boundaryAlign: Boolean,
            clsDrop: String,
            delayShow: Number,
            delayHide: Number,
            dropbar: Boolean,
            dropbarMode: String,
            dropbarAnchor: Boolean,
            duration: Number
        },

        data: {
            dropdown: '.gsl-navbar-nav > li',
            align: !isRtl ? 'left' : 'right',
            clsDrop: 'gsl-navbar-dropdown',
            mode: undefined,
            offset: undefined,
            delayShow: undefined,
            delayHide: undefined,
            boundaryAlign: undefined,
            flip: 'x',
            boundary: true,
            dropbar: false,
            dropbarMode: 'slide',
            dropbarAnchor: false,
            duration: 200,
            forceHeight: true,
            selMinHeight: '.gsl-navbar-nav > li > a, .gsl-navbar-item, .gsl-navbar-toggle'
        },

        computed: {

            boundary: function(ref, $el) {
                var boundary = ref.boundary;
                var boundaryAlign = ref.boundaryAlign;

                return (boundary === true || boundaryAlign) ? $el : boundary;
            },

            dropbarAnchor: function(ref, $el) {
                var dropbarAnchor = ref.dropbarAnchor;

                return query(dropbarAnchor, $el);
            },

            pos: function(ref) {
                var align = ref.align;

                return ("bottom-" + align);
            },

            dropdowns: function(ref, $el) {
                var dropdown = ref.dropdown;
                var clsDrop = ref.clsDrop;

                return $$((dropdown + " ." + clsDrop), $el);
            }

        },

        beforeConnect: function() {

            var ref = this.$props;
            var dropbar = ref.dropbar;

            this.dropbar = dropbar && (query(dropbar, this.$el) || $('+ .gsl-navbar-dropbar', this.$el) || $('<div></div>'));

            if (this.dropbar) {

                addClass(this.dropbar, 'gsl-navbar-dropbar');

                if (this.dropbarMode === 'slide') {
                    addClass(this.dropbar, 'gsl-navbar-dropbar-slide');
                }
            }

        },

        disconnected: function() {
            this.dropbar && remove(this.dropbar);
        },

        update: function() {
            var this$1 = this;


            this.$create(
                'drop',
                this.dropdowns.filter(function (el) { return !this$1.getDropdown(el); }),
                assign({}, this.$props, {boundary: this.boundary, pos: this.pos, offset: this.dropbar || this.offset})
            );

        },

        events: [

            {
                name: 'mouseover',

                delegate: function() {
                    return this.dropdown;
                },

                handler: function(ref) {
                    var current = ref.current;

                    var active = this.getActive();
                    if (active && active.toggle && !within(active.toggle.$el, current) && !active.tracker.movesTo(active.$el)) {
                        active.hide(false);
                    }
                }

            },

            {
                name: 'mouseleave',

                el: function() {
                    return this.dropbar;
                },

                handler: function() {
                    var active = this.getActive();

                    if (active && !this.dropdowns.some(function (el) { return matches(el, ':hover'); })) {
                        active.hide();
                    }
                }
            },

            {
                name: 'beforeshow',

                capture: true,

                filter: function() {
                    return this.dropbar;
                },

                handler: function() {

                    if (!this.dropbar.parentNode) {
                        after(this.dropbarAnchor || this.$el, this.dropbar);
                    }

                }
            },

            {
                name: 'show',

                capture: true,

                filter: function() {
                    return this.dropbar;
                },

                handler: function(_, drop) {

                    var $el = drop.$el;
                    var dir = drop.dir;

                    this.clsDrop && addClass($el, ((this.clsDrop) + "-dropbar"));

                    if (dir === 'bottom') {
                        this.transitionTo($el.offsetHeight + toFloat(css($el, 'marginTop')) + toFloat(css($el, 'marginBottom')), $el);
                    }
                }
            },

            {
                name: 'beforehide',

                filter: function() {
                    return this.dropbar;
                },

                handler: function(e, ref) {
                    var $el = ref.$el;


                    var active = this.getActive();

                    if (matches(this.dropbar, ':hover') && active && active.$el === $el) {
                        e.preventDefault();
                    }
                }
            },

            {
                name: 'hide',

                filter: function() {
                    return this.dropbar;
                },

                handler: function(_, ref) {
                    var $el = ref.$el;


                    var active = this.getActive();

                    if (!active || active && active.$el === $el) {
                        this.transitionTo(0);
                    }
                }
            }

        ],

        methods: {

            getActive: function() {
                var ref = this.dropdowns.map(this.getDropdown).filter(function (drop) { return drop && drop.isActive(); });
                var active = ref[0];
                return active && includes(active.mode, 'hover') && within(active.toggle.$el, this.$el) && active;
            },

            transitionTo: function(newHeight, el) {
                var this$1 = this;


                var ref = this;
                var dropbar = ref.dropbar;
                var oldHeight = isVisible(dropbar) ? height(dropbar) : 0;

                el = oldHeight < newHeight && el;

                css(el, 'clip', ("rect(0," + (el.offsetWidth) + "px," + oldHeight + "px,0)"));

                height(dropbar, oldHeight);

                Transition.cancel([el, dropbar]);
                return Promise.all([
                    Transition.start(dropbar, {height: newHeight}, this.duration),
                    Transition.start(el, {clip: ("rect(0," + (el.offsetWidth) + "px," + newHeight + "px,0)")}, this.duration)
                ])
                    .catch(noop)
                    .then(function () {
                        css(el, {clip: ''});
                        this$1.$update(dropbar);
                    });
            },

            getDropdown: function(el) {
                return this.$getComponent(el, 'drop') || this.$getComponent(el, 'dropdown');
            }

        }

    };

    var offcanvas = {

        mixins: [Modal],

        args: 'mode',

        props: {
            mode: String,
            flip: Boolean,
            overlay: Boolean
        },

        data: {
            mode: 'slide',
            flip: false,
            overlay: false,
            clsPage: 'gsl-offcanvas-page',
            clsContainer: 'gsl-offcanvas-container',
            selPanel: '.gsl-offcanvas-bar',
            clsFlip: 'gsl-offcanvas-flip',
            clsContainerAnimation: 'gsl-offcanvas-container-animation',
            clsSidebarAnimation: 'gsl-offcanvas-bar-animation',
            clsMode: 'gsl-offcanvas',
            clsOverlay: 'gsl-offcanvas-overlay',
            selClose: '.gsl-offcanvas-close',
            container: false
        },

        computed: {

            clsFlip: function(ref) {
                var flip = ref.flip;
                var clsFlip = ref.clsFlip;

                return flip ? clsFlip : '';
            },

            clsOverlay: function(ref) {
                var overlay = ref.overlay;
                var clsOverlay = ref.clsOverlay;

                return overlay ? clsOverlay : '';
            },

            clsMode: function(ref) {
                var mode = ref.mode;
                var clsMode = ref.clsMode;

                return (clsMode + "-" + mode);
            },

            clsSidebarAnimation: function(ref) {
                var mode = ref.mode;
                var clsSidebarAnimation = ref.clsSidebarAnimation;

                return mode === 'none' || mode === 'reveal' ? '' : clsSidebarAnimation;
            },

            clsContainerAnimation: function(ref) {
                var mode = ref.mode;
                var clsContainerAnimation = ref.clsContainerAnimation;

                return mode !== 'push' && mode !== 'reveal' ? '' : clsContainerAnimation;
            },

            transitionElement: function(ref) {
                var mode = ref.mode;

                return mode === 'reveal' ? this.panel.parentNode : this.panel;
            }

        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return 'a[href^="#"]';
                },

                handler: function(ref) {
                    var hash = ref.current.hash;
                    var defaultPrevented = ref.defaultPrevented;

                    if (!defaultPrevented && hash && $(hash, document.body)) {
                        this.hide();
                    }
                }

            },

            {
                name: 'touchstart',

                passive: true,

                el: function() {
                    return this.panel;
                },

                handler: function(ref) {
                    var targetTouches = ref.targetTouches;


                    if (targetTouches.length === 1) {
                        this.clientY = targetTouches[0].clientY;
                    }

                }

            },

            {
                name: 'touchmove',

                self: true,
                passive: false,

                filter: function() {
                    return this.overlay;
                },

                handler: function(e) {
                    e.cancelable && e.preventDefault();
                }

            },

            {
                name: 'touchmove',

                passive: false,

                el: function() {
                    return this.panel;
                },

                handler: function(e) {

                    if (e.targetTouches.length !== 1) {
                        return;
                    }

                    var clientY = event.targetTouches[0].clientY - this.clientY;
                    var ref = this.panel;
                    var scrollTop = ref.scrollTop;
                    var scrollHeight = ref.scrollHeight;
                    var clientHeight = ref.clientHeight;

                    if (clientHeight >= scrollHeight
                        || scrollTop === 0 && clientY > 0
                        || scrollHeight - scrollTop <= clientHeight && clientY < 0
                    ) {
                        e.cancelable && e.preventDefault();
                    }

                }

            },

            {
                name: 'show',

                self: true,

                handler: function() {

                    if (this.mode === 'reveal' && !hasClass(this.panel.parentNode, this.clsMode)) {
                        wrapAll(this.panel, '<div>');
                        addClass(this.panel.parentNode, this.clsMode);
                    }

                    css(document.documentElement, 'overflowY', this.overlay ? 'hidden' : '');
                    addClass(document.body, this.clsContainer, this.clsFlip);
                    css(document.body, 'touch-action', 'pan-y pinch-zoom');
                    css(this.$el, 'display', 'block');
                    addClass(this.$el, this.clsOverlay);
                    addClass(this.panel, this.clsSidebarAnimation, this.mode !== 'reveal' ? this.clsMode : '');

                    height(document.body); // force reflow
                    addClass(document.body, this.clsContainerAnimation);

                    this.clsContainerAnimation && suppressUserScale();


                }
            },

            {
                name: 'hide',

                self: true,

                handler: function() {
                    removeClass(document.body, this.clsContainerAnimation);
                    css(document.body, 'touch-action', '');
                }
            },

            {
                name: 'hidden',

                self: true,

                handler: function() {

                    this.clsContainerAnimation && resumeUserScale();

                    if (this.mode === 'reveal') {
                        unwrap(this.panel);
                    }

                    removeClass(this.panel, this.clsSidebarAnimation, this.clsMode);
                    removeClass(this.$el, this.clsOverlay);
                    css(this.$el, 'display', '');
                    removeClass(document.body, this.clsContainer, this.clsFlip);

                    css(document.documentElement, 'overflowY', '');

                }
            },

            {
                name: 'swipeLeft swipeRight',

                handler: function(e) {

                    if (this.isToggled() && endsWith(e.type, 'Left') ^ this.flip) {
                        this.hide();
                    }

                }
            }

        ]

    };

    // Chrome in responsive mode zooms page upon opening offcanvas
    function suppressUserScale() {
        getViewport$1().content += ',user-scalable=0';
    }

    function resumeUserScale() {
        var viewport = getViewport$1();
        viewport.content = viewport.content.replace(/,user-scalable=0$/, '');
    }

    function getViewport$1() {
        return $('meta[name="viewport"]', document.head) || append(document.head, '<meta name="viewport">');
    }

    var overflowAuto = {

        mixins: [Class],

        props: {
            selContainer: String,
            selContent: String
        },

        data: {
            selContainer: '.gsl-modal',
            selContent: '.gsl-modal-dialog'
        },

        computed: {

            container: function(ref, $el) {
                var selContainer = ref.selContainer;

                return closest($el, selContainer);
            },

            content: function(ref, $el) {
                var selContent = ref.selContent;

                return closest($el, selContent);
            }

        },

        connected: function() {
            css(this.$el, 'minHeight', 150);
        },

        update: {

            read: function() {

                if (!this.content || !this.container) {
                    return false;
                }

                return {
                    current: toFloat(css(this.$el, 'maxHeight')),
                    max: Math.max(150, height(this.container) - (offset(this.content).height - height(this.$el)))
                };
            },

            write: function(ref) {
                var current = ref.current;
                var max = ref.max;

                css(this.$el, 'maxHeight', max);
                if (Math.round(current) !== Math.round(max)) {
                    trigger(this.$el, 'resize');
                }
            },

            events: ['resize']

        }

    };

    var responsive = {

        props: ['width', 'height'],

        connected: function() {
            addClass(this.$el, 'gsl-responsive-width');
        },

        update: {

            read: function() {
                return isVisible(this.$el) && this.width && this.height
                    ? {width: width(this.$el.parentNode), height: this.height}
                    : false;
            },

            write: function(dim) {
                height(this.$el, Dimensions.contain({
                    height: this.height,
                    width: this.width
                }, dim).height);
            },

            events: ['resize']

        }

    };

    var scroll = {

        props: {
            duration: Number,
            offset: Number
        },

        data: {
            duration: 1000,
            offset: 0
        },

        methods: {

            scrollTo: function(el) {
                var this$1 = this;


                el = el && $(el) || document.body;

                if (trigger(this.$el, 'beforescroll', [this, el])) {
                    scrollIntoView(el, this.$props).then(function () { return trigger(this$1.$el, 'scrolled', [this$1, el]); }
                    );
                }

            }

        },

        events: {

            click: function(e) {

                if (e.defaultPrevented) {
                    return;
                }

                e.preventDefault();
                this.scrollTo(escape(decodeURIComponent(this.$el.hash)).substr(1));
            }

        }

    };

    var scrollspy = {

        args: 'cls',

        props: {
            cls: String,
            target: String,
            hidden: Boolean,
            offsetTop: Number,
            offsetLeft: Number,
            repeat: Boolean,
            delay: Number
        },

        data: function () { return ({
            cls: false,
            target: false,
            hidden: true,
            offsetTop: 0,
            offsetLeft: 0,
            repeat: false,
            delay: 0,
            inViewClass: 'gsl-scrollspy-inview'
        }); },

        computed: {

            elements: function(ref, $el) {
                var target = ref.target;

                return target ? $$(target, $el) : [$el];
            }

        },

        update: [

            {

                write: function() {
                    if (this.hidden) {
                        css(filter(this.elements, (":not(." + (this.inViewClass) + ")")), 'visibility', 'hidden');
                    }
                }

            },

            {

                read: function(ref) {
                    var this$1 = this;
                    var update = ref.update;


                    if (!update) {
                        return;
                    }

                    this.elements.forEach(function (el) {

                        var state = el._ukScrollspyState;

                        if (!state) {
                            state = {cls: data(el, 'gsl-scrollspy-class') || this$1.cls};
                        }

                        state.show = isInView(el, this$1.offsetTop, this$1.offsetLeft);
                        el._ukScrollspyState = state;

                    });

                },

                write: function(data) {
                    var this$1 = this;


                    // Let child components be applied at least once first
                    if (!data.update) {
                        this.$emit();
                        return data.update = true;
                    }

                    this.elements.forEach(function (el) {

                        var state = el._ukScrollspyState;
                        var toggle = function (inview) {

                            css(el, 'visibility', !inview && this$1.hidden ? 'hidden' : '');

                            toggleClass(el, this$1.inViewClass, inview);
                            toggleClass(el, state.cls);

                            trigger(el, inview ? 'inview' : 'outview');

                            state.inview = inview;

                            this$1.$update(el);

                        };

                        if (state.show && !state.inview && !state.queued) {

                            state.queued = true;

                            data.promise = (data.promise || Promise.resolve()).then(function () { return new Promise(function (resolve) { return setTimeout(resolve, this$1.delay); }
                                ); }
                            ).then(function () {
                                toggle(true);
                                setTimeout(function () { return state.queued = false; }, 300);
                            });

                        } else if (!state.show && state.inview && !state.queued && this$1.repeat) {

                            toggle(false);

                        }

                    });

                },

                events: ['scroll', 'resize']

            }

        ]

    };

    var scrollspyNav = {

        props: {
            cls: String,
            closest: String,
            scroll: Boolean,
            overflow: Boolean,
            offset: Number
        },

        data: {
            cls: 'gsl-active',
            closest: false,
            scroll: false,
            overflow: true,
            offset: 0
        },

        computed: {

            links: function(_, $el) {
                return $$('a[href^="#"]', $el).filter(function (el) { return el.hash; });
            },

            targets: function() {
                return $$(this.links.map(function (el) { return escape(el.hash).substr(1); }).join(','));
            },

            elements: function(ref) {
                var selector = ref.closest;

                return closest($$(this.targets.map(function (el) { return ("[href=\"#" + (el.id) + "\"]"); }).join(',')), selector || '*');
            }

        },

        update: [

            {

                read: function() {
                    if (this.scroll) {
                        this.$create('scroll', this.links, {offset: this.offset || 0});
                    }
                }

            },

            {

                read: function() {
                    var this$1 = this;


                    var ref = this.targets;
                    var length = ref.length;

                    if (!length || !isVisible(this.$el)) {
                        return false;
                    }

                    var scrollElement = last(scrollParents(this.targets[0]));
                    var scrollTop = scrollElement.scrollTop;
                    var scrollHeight = scrollElement.scrollHeight;
                    var viewport = getViewport(scrollElement);
                    var scroll = scrollTop;
                    var max = scrollHeight - offset(viewport).height;
                    var active = false;

                    if (scroll === max) {
                        active = length - 1;
                    } else {

                        this.targets.every(function (el, i) {
                            var ref = position(el, viewport);
                            var top = ref.top;
                            if (top - this$1.offset <= 0) {
                                active = i;
                                return true;
                            }
                        });

                        if (active === false && this.overflow) {
                            active = 0;
                        }
                    }

                    return {active: active};
                },

                write: function(ref) {
                    var active = ref.active;


                    this.links.forEach(function (el) { return el.blur(); });
                    removeClass(this.elements, this.cls);

                    if (active !== false) {
                        trigger(this.$el, 'active', [active, addClass(this.elements[active], this.cls)]);
                    }

                },

                events: ['scroll', 'resize']

            }

        ]

    };

    var sticky = {

        mixins: [Class, Media],

        props: {
            top: null,
            bottom: Boolean,
            offset: String,
            animation: String,
            clsActive: String,
            clsInactive: String,
            clsFixed: String,
            clsBelow: String,
            selTarget: String,
            widthElement: Boolean,
            showOnUp: Boolean,
            targetOffset: Number
        },

        data: {
            top: 0,
            bottom: false,
            offset: 0,
            animation: '',
            clsActive: 'gsl-active',
            clsInactive: '',
            clsFixed: 'gsl-sticky-fixed',
            clsBelow: 'gsl-sticky-below',
            selTarget: '',
            widthElement: false,
            showOnUp: false,
            targetOffset: false
        },

        computed: {

            offset: function(ref) {
                var offset = ref.offset;

                return toPx(offset);
            },

            selTarget: function(ref, $el) {
                var selTarget = ref.selTarget;

                return selTarget && $(selTarget, $el) || $el;
            },

            widthElement: function(ref, $el) {
                var widthElement = ref.widthElement;

                return query(widthElement, $el) || this.placeholder;
            },

            isActive: {

                get: function() {
                    return hasClass(this.selTarget, this.clsActive);
                },

                set: function(value) {
                    if (value && !this.isActive) {
                        replaceClass(this.selTarget, this.clsInactive, this.clsActive);
                        trigger(this.$el, 'active');
                    } else if (!value && !hasClass(this.selTarget, this.clsInactive)) {
                        replaceClass(this.selTarget, this.clsActive, this.clsInactive);
                        trigger(this.$el, 'inactive');
                    }
                }

            }

        },

        connected: function() {
            this.placeholder = $('+ .gsl-sticky-placeholder', this.$el) || $('<div class="gsl-sticky-placeholder"></div>');
            this.isFixed = false;
            this.isActive = false;
        },

        disconnected: function() {

            if (this.isFixed) {
                this.hide();
                removeClass(this.selTarget, this.clsInactive);
            }

            remove(this.placeholder);
            this.placeholder = null;
            this.widthElement = null;
        },

        events: [

            {

                name: 'load hashchange popstate',

                el: window,

                handler: function() {
                    var this$1 = this;


                    if (!(this.targetOffset !== false && location.hash && window.pageYOffset > 0)) {
                        return;
                    }

                    var target = $(location.hash);

                    if (target) {
                        fastdom.read(function () {

                            var ref = offset(target);
                            var top = ref.top;
                            var elTop = offset(this$1.$el).top;
                            var elHeight = this$1.$el.offsetHeight;

                            if (this$1.isFixed && elTop + elHeight >= top && elTop <= top + target.offsetHeight) {
                                scrollTop(window, top - elHeight - (isNumeric(this$1.targetOffset) ? this$1.targetOffset : 0) - this$1.offset);
                            }

                        });
                    }

                }

            }

        ],

        update: [

            {

                read: function(ref, type) {
                    var height = ref.height;


                    if (this.isActive && type !== 'update') {

                        this.hide();
                        height = this.$el.offsetHeight;
                        this.show();

                    }

                    height = !this.isActive ? this.$el.offsetHeight : height;

                    this.topOffset = offset(this.isFixed ? this.placeholder : this.$el).top;
                    this.bottomOffset = this.topOffset + height;

                    var bottom = parseProp('bottom', this);

                    this.top = Math.max(toFloat(parseProp('top', this)), this.topOffset) - this.offset;
                    this.bottom = bottom && bottom - height;
                    this.inactive = !this.matchMedia;

                    return {
                        lastScroll: false,
                        height: height,
                        margins: css(this.$el, ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'])
                    };
                },

                write: function(ref) {
                    var height = ref.height;
                    var margins = ref.margins;


                    var ref$1 = this;
                    var placeholder = ref$1.placeholder;

                    css(placeholder, assign({height: height}, margins));

                    if (!within(placeholder, document)) {
                        after(this.$el, placeholder);
                        attr(placeholder, 'hidden', '');
                    }

                    // ensure active/inactive classes are applied
                    this.isActive = this.isActive;

                },

                events: ['resize']

            },

            {

                read: function(ref) {
                    var scroll = ref.scroll; if ( scroll === void 0 ) scroll = 0;


                    this.width = (isVisible(this.widthElement) ? this.widthElement : this.$el).offsetWidth;

                    this.scroll = window.pageYOffset;

                    return {
                        dir: scroll <= this.scroll ? 'down' : 'up',
                        scroll: this.scroll,
                        visible: isVisible(this.$el),
                        top: offsetPosition(this.placeholder)[0]
                    };
                },

                write: function(data, type) {
                    var this$1 = this;


                    var initTimestamp = data.initTimestamp; if ( initTimestamp === void 0 ) initTimestamp = 0;
                    var dir = data.dir;
                    var lastDir = data.lastDir;
                    var lastScroll = data.lastScroll;
                    var scroll = data.scroll;
                    var top = data.top;
                    var visible = data.visible;
                    var now = performance.now();

                    data.lastScroll = scroll;

                    if (scroll < 0 || scroll === lastScroll || !visible || this.disabled || this.showOnUp && type !== 'scroll') {
                        return;
                    }

                    if (now - initTimestamp > 300 || dir !== lastDir) {
                        data.initScroll = scroll;
                        data.initTimestamp = now;
                    }

                    data.lastDir = dir;

                    if (this.showOnUp && Math.abs(data.initScroll - scroll) <= 30 && Math.abs(lastScroll - scroll) <= 10) {
                        return;
                    }

                    if (this.inactive
                        || scroll < this.top
                        || this.showOnUp && (scroll <= this.top || dir === 'down' || dir === 'up' && !this.isFixed && scroll <= this.bottomOffset)
                    ) {

                        if (!this.isFixed) {

                            if (Animation.inProgress(this.$el) && top > scroll) {
                                Animation.cancel(this.$el);
                                this.hide();
                            }

                            return;
                        }

                        this.isFixed = false;

                        if (this.animation && scroll > this.topOffset) {
                            Animation.cancel(this.$el);
                            Animation.out(this.$el, this.animation).then(function () { return this$1.hide(); }, noop);
                        } else {
                            this.hide();
                        }

                    } else if (this.isFixed) {

                        this.update();

                    } else if (this.animation) {

                        Animation.cancel(this.$el);
                        this.show();
                        Animation.in(this.$el, this.animation).catch(noop);

                    } else {
                        this.show();
                    }

                },

                events: ['resize', 'scroll']

            }

        ],

        methods: {

            show: function() {

                this.isFixed = true;
                this.update();
                attr(this.placeholder, 'hidden', null);

            },

            hide: function() {

                this.isActive = false;
                removeClass(this.$el, this.clsFixed, this.clsBelow);
                css(this.$el, {position: '', top: '', width: ''});
                attr(this.placeholder, 'hidden', '');

            },

            update: function() {

                var active = this.top !== 0 || this.scroll > this.top;
                var top = Math.max(0, this.offset);

                if (this.bottom && this.scroll > this.bottom - this.offset) {
                    top = this.bottom - this.scroll;
                }

                css(this.$el, {
                    position: 'fixed',
                    top: (top + "px"),
                    width: this.width
                });

                this.isActive = active;
                toggleClass(this.$el, this.clsBelow, this.scroll > this.bottomOffset);
                addClass(this.$el, this.clsFixed);

            }

        }

    };

    function parseProp(prop, ref) {
        var $props = ref.$props;
        var $el = ref.$el;
        var propOffset = ref[(prop + "Offset")];


        var value = $props[prop];

        if (!value) {
            return;
        }

        if (isNumeric(value) && isString(value) && value.match(/^-?\d/)) {

            return propOffset + toPx(value);

        } else {

            return offset(value === true ? $el.parentNode : query(value, $el)).bottom;

        }
    }

    var Switcher = {

        mixins: [Togglable],

        args: 'connect',

        props: {
            connect: String,
            toggle: String,
            active: Number,
            swiping: Boolean
        },

        data: {
            connect: '~.gsl-switcher',
            toggle: '> * > :first-child',
            active: 0,
            swiping: true,
            cls: 'gsl-active',
            clsContainer: 'gsl-switcher',
            attrItem: 'gsl-switcher-item',
            queued: true
        },

        computed: {

            connects: function(ref, $el) {
                var connect = ref.connect;

                return queryAll(connect, $el);
            },

            toggles: function(ref, $el) {
                var toggle = ref.toggle;

                return $$(toggle, $el);
            }

        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return ((this.toggle) + ":not(.gsl-disabled)");
                },

                handler: function(e) {
                    e.preventDefault();
                    this.show(children(this.$el).filter(function (el) { return within(e.current, el); })[0]);
                }

            },

            {
                name: 'click',

                el: function() {
                    return this.connects;
                },

                delegate: function() {
                    return ("[" + (this.attrItem) + "],[data-" + (this.attrItem) + "]");
                },

                handler: function(e) {
                    e.preventDefault();
                    this.show(data(e.current, this.attrItem));
                }
            },

            {
                name: 'swipeRight swipeLeft',

                filter: function() {
                    return this.swiping;
                },

                el: function() {
                    return this.connects;
                },

                handler: function(ref) {
                    var type = ref.type;

                    this.show(endsWith(type, 'Left') ? 'next' : 'previous');
                }
            }

        ],

        update: function() {
            var this$1 = this;


            this.connects.forEach(function (list) { return this$1.updateAria(list.children); });
            var ref = this.$el;
            var children = ref.children;
            this.show(filter(children, ("." + (this.cls)))[0] || children[this.active] || children[0]);

            this.swiping && css(this.connects, 'touch-action', 'pan-y pinch-zoom');

        },

        methods: {

            index: function() {
                return !isEmpty(this.connects) ? index(filter(this.connects[0].children, ("." + (this.cls)))[0]) : -1;
            },

            show: function(item) {
                var this$1 = this;


                var ref = this.$el;
                var children = ref.children;
                var length = children.length;
                var prev = this.index();
                var hasPrev = prev >= 0;
                var dir = item === 'previous' ? -1 : 1;

                var toggle, active, next = getIndex(item, children, prev);

                for (var i = 0; i < length; i++, next = (next + dir + length) % length) {
                    if (!matches(this.toggles[next], '.gsl-disabled *, .gsl-disabled, [disabled]')) {
                        toggle = this.toggles[next];
                        active = children[next];
                        break;
                    }
                }

                if (!active || prev === next) {
                    return;
                }

                removeClass(children, this.cls);
                addClass(active, this.cls);
                attr(this.toggles, 'aria-expanded', false);
                attr(toggle, 'aria-expanded', true);

                this.connects.forEach(function (list) {
                    if (!hasPrev) {
                        this$1.toggleNow(list.children[next]);
                    } else {
                        this$1.toggleElement([list.children[prev], list.children[next]]);
                    }
                });

            }

        }

    };

    var tab = {

        mixins: [Class],

        extends: Switcher,

        props: {
            media: Boolean
        },

        data: {
            media: 960,
            attrItem: 'gsl-tab-item'
        },

        connected: function() {

            var cls = hasClass(this.$el, 'gsl-tab-left')
                ? 'gsl-tab-left'
                : hasClass(this.$el, 'gsl-tab-right')
                    ? 'gsl-tab-right'
                    : false;

            if (cls) {
                this.$create('toggle', this.$el, {cls: cls, mode: 'media', media: this.media});
            }
        }

    };

    var toggle = {

        mixins: [Media, Togglable],

        args: 'target',

        props: {
            href: String,
            target: null,
            mode: 'list'
        },

        data: {
            href: false,
            target: false,
            mode: 'click',
            queued: true
        },

        computed: {

            target: function(ref, $el) {
                var href = ref.href;
                var target = ref.target;

                target = queryAll(target || href, $el);
                return target.length && target || [$el];
            }

        },

        connected: function() {
            trigger(this.target, 'updatearia', [this]);
        },

        events: [

            {

                name: (pointerEnter + " " + pointerLeave),

                filter: function() {
                    return includes(this.mode, 'hover');
                },

                handler: function(e) {
                    if (!isTouch(e)) {
                        this.toggle(("toggle" + (e.type === pointerEnter ? 'show' : 'hide')));
                    }
                }

            },

            {

                name: 'click',

                filter: function() {
                    return includes(this.mode, 'click') || hasTouch && includes(this.mode, 'hover');
                },

                handler: function(e) {

                    // TODO better isToggled handling
                    var link;
                    if (closest(e.target, 'a[href="#"], a[href=""]')
                        || (link = closest(e.target, 'a[href]')) && (
                            this.cls && !hasClass(this.target, this.cls.split(' ')[0])
                            || !isVisible(this.target)
                            || link.hash && matches(this.target, link.hash)
                        )
                    ) {
                        e.preventDefault();
                    }

                    this.toggle();
                }

            }

        ],

        update: {

            read: function() {
                return includes(this.mode, 'media') && this.media
                    ? {match: this.matchMedia}
                    : false;
            },

            write: function(ref) {
                var match = ref.match;


                var toggled = this.isToggled(this.target);
                if (match ? !toggled : toggled) {
                    this.toggle();
                }

            },

            events: ['resize']

        },

        methods: {

            toggle: function(type) {
                if (trigger(this.target, type || 'toggle', [this])) {
                    this.toggleElement(this.target);
                }
            }

        }

    };



    var coreComponents = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Accordion: Accordion,
        Alert: alert,
        Cover: cover,
        Drop: Drop,
        Dropdown: dropdown,
        FormCustom: formCustom,
        Gif: gif,
        Grid: grid,
        HeightMatch: heightMatch,
        HeightViewport: heightViewport,
        Icon: Icon,
        Img: img,
        Leader: leader,
        Margin: Margin,
        Modal: modal,
        Nav: nav,
        Navbar: navbar,
        Offcanvas: offcanvas,
        OverflowAuto: overflowAuto,
        Responsive: responsive,
        Scroll: scroll,
        Scrollspy: scrollspy,
        ScrollspyNav: scrollspyNav,
        Sticky: sticky,
        Svg: SVG,
        Switcher: Switcher,
        Tab: tab,
        Toggle: toggle,
        Video: Video,
        Close: Close,
        Spinner: Spinner,
        SlidenavNext: Slidenav,
        SlidenavPrevious: Slidenav,
        SearchIcon: Search,
        Marker: IconComponent,
        NavbarToggleIcon: IconComponent,
        OverlayIcon: IconComponent,
        PaginationNext: IconComponent,
        PaginationPrevious: IconComponent,
        Totop: IconComponent
    });

    var countdown = {

        mixins: [Class],

        props: {
            date: String,
            clsWrapper: String
        },

        data: {
            date: '',
            clsWrapper: '.gsl-countdown-%unit%'
        },

        computed: {

            date: function(ref) {
                var date = ref.date;

                return Date.parse(date);
            },

            days: function(ref, $el) {
                var clsWrapper = ref.clsWrapper;

                return $(clsWrapper.replace('%unit%', 'days'), $el);
            },

            hours: function(ref, $el) {
                var clsWrapper = ref.clsWrapper;

                return $(clsWrapper.replace('%unit%', 'hours'), $el);
            },

            minutes: function(ref, $el) {
                var clsWrapper = ref.clsWrapper;

                return $(clsWrapper.replace('%unit%', 'minutes'), $el);
            },

            seconds: function(ref, $el) {
                var clsWrapper = ref.clsWrapper;

                return $(clsWrapper.replace('%unit%', 'seconds'), $el);
            },

            units: function() {
                var this$1 = this;

                return ['days', 'hours', 'minutes', 'seconds'].filter(function (unit) { return this$1[unit]; });
            }

        },

        connected: function() {
            this.start();
        },

        disconnected: function() {
            var this$1 = this;

            this.stop();
            this.units.forEach(function (unit) { return empty(this$1[unit]); });
        },

        events: [

            {

                name: 'visibilitychange',

                el: document,

                handler: function() {
                    if (document.hidden) {
                        this.stop();
                    } else {
                        this.start();
                    }
                }

            }

        ],

        update: {

            write: function() {
                var this$1 = this;


                var timespan = getTimeSpan(this.date);

                if (timespan.total <= 0) {

                    this.stop();

                    timespan.days
                        = timespan.hours
                        = timespan.minutes
                        = timespan.seconds
                        = 0;
                }

                this.units.forEach(function (unit) {

                    var digits = String(Math.floor(timespan[unit]));

                    digits = digits.length < 2 ? ("0" + digits) : digits;

                    var el = this$1[unit];
                    if (el.textContent !== digits) {
                        digits = digits.split('');

                        if (digits.length !== el.children.length) {
                            html(el, digits.map(function () { return '<span></span>'; }).join(''));
                        }

                        digits.forEach(function (digit, i) { return el.children[i].textContent = digit; });
                    }

                });

            }

        },

        methods: {

            start: function() {
                var this$1 = this;


                this.stop();

                if (this.date && this.units.length) {
                    this.$emit();
                    this.timer = setInterval(function () { return this$1.$emit(); }, 1000);
                }

            },

            stop: function() {

                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }

            }

        }

    };

    function getTimeSpan(date) {

        var total = date - Date.now();

        return {
            total: total,
            seconds: total / 1000 % 60,
            minutes: total / 1000 / 60 % 60,
            hours: total / 1000 / 60 / 60 % 24,
            days: total / 1000 / 60 / 60 / 24
        };
    }

    var targetClass = 'gsl-animation-target';

    var Animate = {

        props: {
            animation: Number
        },

        data: {
            animation: 150
        },

        computed: {

            target: function() {
                return this.$el;
            }

        },

        methods: {

            animate: function(action) {
                var this$1 = this;


                addStyle();

                var children$1 = children(this.target);
                var propsFrom = children$1.map(function (el) { return getProps(el, true); });

                var oldHeight = height(this.target);
                var oldScrollY = window.pageYOffset;

                action();

                Transition.cancel(this.target);
                children$1.forEach(Transition.cancel);

                reset(this.target);
                this.$update(this.target);
                fastdom.flush();

                var newHeight = height(this.target);

                children$1 = children$1.concat(children(this.target).filter(function (el) { return !includes(children$1, el); }));

                var propsTo = children$1.map(function (el, i) { return el.parentNode && i in propsFrom
                        ? propsFrom[i]
                        ? isVisible(el)
                            ? getPositionWithMargin(el)
                            : {opacity: 0}
                        : {opacity: isVisible(el) ? 1 : 0}
                        : false; }
                );

                propsFrom = propsTo.map(function (props, i) {
                    var from = children$1[i].parentNode === this$1.target
                        ? propsFrom[i] || getProps(children$1[i])
                        : false;

                    if (from) {
                        if (!props) {
                            delete from.opacity;
                        } else if (!('opacity' in props)) {
                            var opacity = from.opacity;

                            if (opacity % 1) {
                                props.opacity = 1;
                            } else {
                                delete from.opacity;
                            }
                        }
                    }

                    return from;
                });

                addClass(this.target, targetClass);
                children$1.forEach(function (el, i) { return propsFrom[i] && css(el, propsFrom[i]); });
                css(this.target, 'height', oldHeight);
                scrollTop(window, oldScrollY);

                return Promise.all(children$1.map(function (el, i) { return propsFrom[i] && propsTo[i]
                        ? Transition.start(el, propsTo[i], this$1.animation, 'ease')
                        : Promise.resolve(); }
                ).concat(Transition.start(this.target, {height: newHeight}, this.animation, 'ease'))).then(function () {
                    children$1.forEach(function (el, i) { return css(el, {display: propsTo[i].opacity === 0 ? 'none' : '', zIndex: ''}); });
                    reset(this$1.target);
                    this$1.$update(this$1.target);
                    fastdom.flush(); // needed for IE11
                }, noop);

            }
        }
    };

    function getProps(el, opacity) {

        var zIndex = css(el, 'zIndex');

        return isVisible(el)
            ? assign({
                display: '',
                opacity: opacity ? css(el, 'opacity') : '0',
                pointerEvents: 'none',
                position: 'absolute',
                zIndex: zIndex === 'auto' ? index(el) : zIndex
            }, getPositionWithMargin(el))
            : false;
    }

    function reset(el) {
        css(el.children, {
            height: '',
            left: '',
            opacity: '',
            pointerEvents: '',
            position: '',
            top: '',
            width: ''
        });
        removeClass(el, targetClass);
        css(el, 'height', '');
    }

    function getPositionWithMargin(el) {
        var ref = offset(el);
        var height = ref.height;
        var width = ref.width;
        var ref$1 = position(el);
        var top = ref$1.top;
        var left = ref$1.left;

        return {top: top, left: left, height: height, width: width};
    }

    var style;

    function addStyle() {
        if (style) {
            return;
        }
        style = append(document.head, '<style>').sheet;
        style.insertRule(
            ("." + targetClass + " > * {\n            margin-top: 0 !important;\n            transform: none !important;\n        }"), 0
        );
    }

    var filter$1 = {

        mixins: [Animate],

        args: 'target',

        props: {
            target: Boolean,
            selActive: Boolean
        },

        data: {
            target: null,
            selActive: false,
            attrItem: 'gsl-filter-control',
            cls: 'gsl-active',
            animation: 250
        },

        computed: {

            toggles: {

                get: function(ref, $el) {
                    var attrItem = ref.attrItem;

                    return $$(("[" + (this.attrItem) + "],[data-" + (this.attrItem) + "]"), $el);
                },

                watch: function() {
                    this.updateState();
                }

            },

            target: function(ref, $el) {
                var target = ref.target;

                return $(target, $el);
            },

            children: {

                get: function() {
                    return children(this.target);
                },

                watch: function(list, old) {
                    if (!isEqualList(list, old)) {
                        this.updateState();
                    }
                }
            }

        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return ("[" + (this.attrItem) + "],[data-" + (this.attrItem) + "]");
                },

                handler: function(e) {

                    e.preventDefault();
                    this.apply(e.current);

                }

            }

        ],

        connected: function() {
            var this$1 = this;


            this.updateState();

            if (this.selActive !== false) {
                var actives = $$(this.selActive, this.$el);
                this.toggles.forEach(function (el) { return toggleClass(el, this$1.cls, includes(actives, el)); });
            }

        },

        methods: {

            apply: function(el) {
                this.setState(mergeState(el, this.attrItem, this.getState()));
            },

            getState: function() {
                var this$1 = this;

                return this.toggles
                    .filter(function (item) { return hasClass(item, this$1.cls); })
                    .reduce(function (state, el) { return mergeState(el, this$1.attrItem, state); }, {filter: {'': ''}, sort: []});
            },

            setState: function(state, animate) {
                var this$1 = this;
                if ( animate === void 0 ) animate = true;


                state = assign({filter: {'': ''}, sort: []}, state);

                trigger(this.$el, 'beforeFilter', [this, state]);

                var ref = this;
                var children = ref.children;

                this.toggles.forEach(function (el) { return toggleClass(el, this$1.cls, !!matchFilter(el, this$1.attrItem, state)); });

                var apply = function () {

                    var selector = getSelector(state);

                    children.forEach(function (el) { return css(el, 'display', selector && !matches(el, selector) ? 'none' : ''); });

                    var ref = state.sort;
                    var sort = ref[0];
                    var order = ref[1];

                    if (sort) {
                        var sorted = sortItems(children, sort, order);
                        if (!isEqual(sorted, children)) {
                            sorted.forEach(function (el) { return append(this$1.target, el); });
                        }
                    }

                };

                if (animate) {
                    this.animate(apply).then(function () { return trigger(this$1.$el, 'afterFilter', [this$1]); });
                } else {
                    apply();
                    trigger(this.$el, 'afterFilter', [this]);
                }

            },

            updateState: function() {
                var this$1 = this;

                fastdom.write(function () { return this$1.setState(this$1.getState(), false); });
            }

        }

    };

    function getFilter(el, attr) {
        return parseOptions(data(el, attr), ['filter']);
    }

    function mergeState(el, attr, state) {

        var filterBy = getFilter(el, attr);
        var filter = filterBy.filter;
        var group = filterBy.group;
        var sort = filterBy.sort;
        var order = filterBy.order; if ( order === void 0 ) order = 'asc';

        if (filter || isUndefined(sort)) {

            if (group) {

                if (filter) {
                    delete state.filter[''];
                    state.filter[group] = filter;
                } else {
                    delete state.filter[group];

                    if (isEmpty(state.filter) || '' in state.filter) {
                        state.filter = {'': filter || ''};
                    }

                }

            } else {
                state.filter = {'': filter || ''};
            }

        }

        if (!isUndefined(sort)) {
            state.sort = [sort, order];
        }

        return state;
    }

    function matchFilter(el, attr, ref) {
        var stateFilter = ref.filter; if ( stateFilter === void 0 ) stateFilter = {'': ''};
        var ref_sort = ref.sort;
        var stateSort = ref_sort[0];
        var stateOrder = ref_sort[1];


        var ref$1 = getFilter(el, attr);
        var filter = ref$1.filter; if ( filter === void 0 ) filter = '';
        var group = ref$1.group; if ( group === void 0 ) group = '';
        var sort = ref$1.sort;
        var order = ref$1.order; if ( order === void 0 ) order = 'asc';

        return isUndefined(sort)
            ? group in stateFilter && filter === stateFilter[group]
                || !filter && group && !(group in stateFilter) && !stateFilter['']
            : stateSort === sort && stateOrder === order;
    }

    function isEqualList(listA, listB) {
        return listA.length === listB.length
            && listA.every(function (el) { return ~listB.indexOf(el); });
    }

    function getSelector(ref) {
        var filter = ref.filter;

        var selector = '';
        each(filter, function (value) { return selector += value || ''; });
        return selector;
    }

    function sortItems(nodes, sort, order) {
        return assign([], nodes).sort(function (a, b) { return data(a, sort).localeCompare(data(b, sort), undefined, {numeric: true}) * (order === 'asc' || -1); });
    }

    var Animations = {

        slide: {

            show: function(dir) {
                return [
                    {transform: translate(dir * -100)},
                    {transform: translate()}
                ];
            },

            percent: function(current) {
                return translated(current);
            },

            translate: function(percent, dir) {
                return [
                    {transform: translate(dir * -100 * percent)},
                    {transform: translate(dir * 100 * (1 - percent))}
                ];
            }

        }

    };

    function translated(el) {
        return Math.abs(css(el, 'transform').split(',')[4] / el.offsetWidth) || 0;
    }

    function translate(value, unit) {
        if ( value === void 0 ) value = 0;
        if ( unit === void 0 ) unit = '%';

        value += value ? unit : '';
        return isIE ? ("translateX(" + value + ")") : ("translate3d(" + value + ", 0, 0)"); // currently not translate3d in IE, translate3d within translate3d does not work while transitioning
    }

    function scale3d(value) {
        return ("scale3d(" + value + ", " + value + ", 1)");
    }

    var Animations$1 = assign({}, Animations, {

        fade: {

            show: function() {
                return [
                    {opacity: 0},
                    {opacity: 1}
                ];
            },

            percent: function(current) {
                return 1 - css(current, 'opacity');
            },

            translate: function(percent) {
                return [
                    {opacity: 1 - percent},
                    {opacity: percent}
                ];
            }

        },

        scale: {

            show: function() {
                return [
                    {opacity: 0, transform: scale3d(1 - .2)},
                    {opacity: 1, transform: scale3d(1)}
                ];
            },

            percent: function(current) {
                return 1 - css(current, 'opacity');
            },

            translate: function(percent) {
                return [
                    {opacity: 1 - percent, transform: scale3d(1 - .2 * percent)},
                    {opacity: percent, transform: scale3d(1 - .2 + .2 * percent)}
                ];
            }

        }

    });

    function Transitioner(prev, next, dir, ref) {
        var animation = ref.animation;
        var easing = ref.easing;


        var percent = animation.percent;
        var translate = animation.translate;
        var show = animation.show; if ( show === void 0 ) show = noop;
        var props = show(dir);
        var deferred = new Deferred();

        return {

            dir: dir,

            show: function(duration, percent, linear) {
                var this$1 = this;
                if ( percent === void 0 ) percent = 0;


                var timing = linear ? 'linear' : easing;
                duration -= Math.round(duration * clamp(percent, -1, 1));

                this.translate(percent);

                triggerUpdate(next, 'itemin', {percent: percent, duration: duration, timing: timing, dir: dir});
                triggerUpdate(prev, 'itemout', {percent: 1 - percent, duration: duration, timing: timing, dir: dir});

                Promise.all([
                    Transition.start(next, props[1], duration, timing),
                    Transition.start(prev, props[0], duration, timing)
                ]).then(function () {
                    this$1.reset();
                    deferred.resolve();
                }, noop);

                return deferred.promise;
            },

            stop: function() {
                return Transition.stop([next, prev]);
            },

            cancel: function() {
                Transition.cancel([next, prev]);
            },

            reset: function() {
                for (var prop in props[0]) {
                    css([next, prev], prop, '');
                }
            },

            forward: function(duration, percent) {
                if ( percent === void 0 ) percent = this.percent();

                Transition.cancel([next, prev]);
                return this.show(duration, percent, true);

            },

            translate: function(percent) {

                this.reset();

                var props = translate(percent, dir);
                css(next, props[1]);
                css(prev, props[0]);
                triggerUpdate(next, 'itemtranslatein', {percent: percent, dir: dir});
                triggerUpdate(prev, 'itemtranslateout', {percent: 1 - percent, dir: dir});

            },

            percent: function() {
                return percent(prev || next, next, dir);
            },

            getDistance: function() {
                return prev && prev.offsetWidth;
            }

        };

    }

    function triggerUpdate(el, type, data) {
        trigger(el, createEvent(type, false, false, data));
    }

    var SliderAutoplay = {

        props: {
            autoplay: Boolean,
            autoplayInterval: Number,
            pauseOnHover: Boolean
        },

        data: {
            autoplay: false,
            autoplayInterval: 7000,
            pauseOnHover: true
        },

        connected: function() {
            this.autoplay && this.startAutoplay();
        },

        disconnected: function() {
            this.stopAutoplay();
        },

        update: function() {
            attr(this.slides, 'tabindex', '-1');
        },

        events: [

            {

                name: 'visibilitychange',

                el: document,

                filter: function() {
                    return this.autoplay;
                },

                handler: function() {
                    if (document.hidden) {
                        this.stopAutoplay();
                    } else {
                        this.startAutoplay();
                    }
                }

            }

        ],

        methods: {

            startAutoplay: function() {
                var this$1 = this;


                this.stopAutoplay();

                this.interval = setInterval(
                    function () { return (!this$1.draggable || !$(':focus', this$1.$el))
                        && (!this$1.pauseOnHover || !matches(this$1.$el, ':hover'))
                        && !this$1.stack.length
                        && this$1.show('next'); },
                    this.autoplayInterval
                );

            },

            stopAutoplay: function() {
                this.interval && clearInterval(this.interval);
            }

        }

    };

    var SliderDrag = {

        props: {
            draggable: Boolean
        },

        data: {
            draggable: true,
            threshold: 10
        },

        created: function() {
            var this$1 = this;


            ['start', 'move', 'end'].forEach(function (key) {

                var fn = this$1[key];
                this$1[key] = function (e) {

                    var pos = getEventPos(e).x * (isRtl ? -1 : 1);

                    this$1.prevPos = pos !== this$1.pos ? this$1.pos : this$1.prevPos;
                    this$1.pos = pos;

                    fn(e);
                };

            });

        },

        events: [

            {

                name: pointerDown,

                delegate: function() {
                    return this.selSlides;
                },

                handler: function(e) {

                    if (!this.draggable
                        || !isTouch(e) && hasTextNodesOnly(e.target)
                        || closest(e.target, selInput)
                        || e.button > 0
                        || this.length < 2
                    ) {
                        return;
                    }

                    this.start(e);
                }

            },

            {

                // Workaround for iOS 11 bug: https://bugs.webkit.org/show_bug.cgi?id=184250

                name: 'touchmove',
                passive: false,
                handler: 'move',
                delegate: function() {
                    return this.selSlides;
                }

            },

            {
                name: 'dragstart',

                handler: function(e) {
                    e.preventDefault();
                }
            }

        ],

        methods: {

            start: function() {
                var this$1 = this;


                this.drag = this.pos;

                if (this._transitioner) {

                    this.percent = this._transitioner.percent();
                    this.drag += this._transitioner.getDistance() * this.percent * this.dir;

                    this._transitioner.cancel();
                    this._transitioner.translate(this.percent);

                    this.dragging = true;

                    this.stack = [];

                } else {
                    this.prevIndex = this.index;
                }

                // See above workaround notice
                var off = pointerMove !== 'touchmove'
                    ? on(document, pointerMove, this.move, {passive: false})
                    : noop;
                this.unbindMove = function () {
                    off();
                    this$1.unbindMove = null;
                };
                on(window, 'scroll', this.unbindMove);
                on(document, pointerUp, this.end, true);

                css(this.list, 'userSelect', 'none');

            },

            move: function(e) {
                var this$1 = this;


                // See above workaround notice
                if (!this.unbindMove) {
                    return;
                }

                var distance = this.pos - this.drag;

                if (distance === 0 || this.prevPos === this.pos || !this.dragging && Math.abs(distance) < this.threshold) {
                    return;
                }

                css(this.list, 'pointerEvents', 'none');

                e.cancelable && e.preventDefault();

                this.dragging = true;
                this.dir = (distance < 0 ? 1 : -1);

                var ref = this;
                var slides = ref.slides;
                var ref$1 = this;
                var prevIndex = ref$1.prevIndex;
                var dis = Math.abs(distance);
                var nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);
                var width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;

                while (nextIndex !== prevIndex && dis > width) {

                    this.drag -= width * this.dir;

                    prevIndex = nextIndex;
                    dis -= width;
                    nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);
                    width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;

                }

                this.percent = dis / width;

                var prev = slides[prevIndex];
                var next = slides[nextIndex];
                var changed = this.index !== nextIndex;
                var edge = prevIndex === nextIndex;

                var itemShown;

                [this.index, this.prevIndex].filter(function (i) { return !includes([nextIndex, prevIndex], i); }).forEach(function (i) {
                    trigger(slides[i], 'itemhidden', [this$1]);

                    if (edge) {
                        itemShown = true;
                        this$1.prevIndex = prevIndex;
                    }

                });

                if (this.index === prevIndex && this.prevIndex !== prevIndex || itemShown) {
                    trigger(slides[this.index], 'itemshown', [this]);
                }

                if (changed) {
                    this.prevIndex = prevIndex;
                    this.index = nextIndex;

                    !edge && trigger(prev, 'beforeitemhide', [this]);
                    trigger(next, 'beforeitemshow', [this]);
                }

                this._transitioner = this._translate(Math.abs(this.percent), prev, !edge && next);

                if (changed) {
                    !edge && trigger(prev, 'itemhide', [this]);
                    trigger(next, 'itemshow', [this]);
                }

            },

            end: function() {

                off(window, 'scroll', this.unbindMove);
                this.unbindMove && this.unbindMove();
                off(document, pointerUp, this.end, true);

                if (this.dragging) {

                    this.dragging = null;

                    if (this.index === this.prevIndex) {
                        this.percent = 1 - this.percent;
                        this.dir *= -1;
                        this._show(false, this.index, true);
                        this._transitioner = null;
                    } else {

                        var dirChange = (isRtl ? this.dir * (isRtl ? 1 : -1) : this.dir) < 0 === this.prevPos > this.pos;
                        this.index = dirChange ? this.index : this.prevIndex;

                        if (dirChange) {
                            this.percent = 1 - this.percent;
                        }

                        this.show(this.dir > 0 && !dirChange || this.dir < 0 && dirChange ? 'next' : 'previous', true);
                    }

                }

                css(this.list, {userSelect: '', pointerEvents: ''});

                this.drag
                    = this.percent
                    = null;

            }

        }

    };

    function hasTextNodesOnly(el) {
        return !el.children.length && el.childNodes.length;
    }

    var SliderNav = {

        data: {
            selNav: false
        },

        computed: {

            nav: function(ref, $el) {
                var selNav = ref.selNav;

                return $(selNav, $el);
            },

            selNavItem: function(ref) {
                var attrItem = ref.attrItem;

                return ("[" + attrItem + "],[data-" + attrItem + "]");
            },

            navItems: function(_, $el) {
                return $$(this.selNavItem, $el);
            }

        },

        update: {

            write: function() {
                var this$1 = this;


                if (this.nav && this.length !== this.nav.children.length) {
                    html(this.nav, this.slides.map(function (_, i) { return ("<li " + (this$1.attrItem) + "=\"" + i + "\"><a href=\"#\"></a></li>"); }).join(''));
                }

                toggleClass($$(this.selNavItem, this.$el).concat(this.nav), 'gsl-hidden', !this.maxIndex);

                this.updateNav();

            },

            events: ['resize']

        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return this.selNavItem;
                },

                handler: function(e) {
                    e.preventDefault();
                    this.show(data(e.current, this.attrItem));
                }

            },

            {

                name: 'itemshow',
                handler: 'updateNav'

            }

        ],

        methods: {

            updateNav: function() {
                var this$1 = this;


                var i = this.getValidIndex();
                this.navItems.forEach(function (el) {

                    var cmd = data(el, this$1.attrItem);

                    toggleClass(el, this$1.clsActive, toNumber(cmd) === i);
                    toggleClass(el, 'gsl-invisible', this$1.finite && (cmd === 'previous' && i === 0 || cmd === 'next' && i >= this$1.maxIndex));
                });

            }

        }

    };

    var Slider = {

        mixins: [SliderAutoplay, SliderDrag, SliderNav],

        props: {
            clsActivated: Boolean,
            easing: String,
            index: Number,
            finite: Boolean,
            velocity: Number,
            selSlides: String
        },

        data: function () { return ({
            easing: 'ease',
            finite: false,
            velocity: 1,
            index: 0,
            prevIndex: -1,
            stack: [],
            percent: 0,
            clsActive: 'gsl-active',
            clsActivated: false,
            Transitioner: false,
            transitionOptions: {}
        }); },

        connected: function() {
            this.prevIndex = -1;
            this.index = this.getValidIndex(this.index);
            this.stack = [];
        },

        disconnected: function() {
            removeClass(this.slides, this.clsActive);
        },

        computed: {

            duration: function(ref, $el) {
                var velocity = ref.velocity;

                return speedUp($el.offsetWidth / velocity);
            },

            list: function(ref, $el) {
                var selList = ref.selList;

                return $(selList, $el);
            },

            maxIndex: function() {
                return this.length - 1;
            },

            selSlides: function(ref) {
                var selList = ref.selList;
                var selSlides = ref.selSlides;

                return (selList + " " + (selSlides || '> *'));
            },

            slides: {

                get: function() {
                    return $$(this.selSlides, this.$el);
                },

                watch: function() {
                    this.$reset();
                }

            },

            length: function() {
                return this.slides.length;
            }

        },

        events: {

            itemshown: function() {
                this.$update(this.list);
            }

        },

        methods: {

            show: function(index, force) {
                var this$1 = this;
                if ( force === void 0 ) force = false;


                if (this.dragging || !this.length) {
                    return;
                }

                var ref = this;
                var stack = ref.stack;
                var queueIndex = force ? 0 : stack.length;
                var reset = function () {
                    stack.splice(queueIndex, 1);

                    if (stack.length) {
                        this$1.show(stack.shift(), true);
                    }
                };

                stack[force ? 'unshift' : 'push'](index);

                if (!force && stack.length > 1) {

                    if (stack.length === 2) {
                        this._transitioner.forward(Math.min(this.duration, 200));
                    }

                    return;
                }

                var prevIndex = this.index;
                var prev = hasClass(this.slides, this.clsActive) && this.slides[prevIndex];
                var nextIndex = this.getIndex(index, this.index);
                var next = this.slides[nextIndex];

                if (prev === next) {
                    reset();
                    return;
                }

                this.dir = getDirection(index, prevIndex);
                this.prevIndex = prevIndex;
                this.index = nextIndex;

                prev && trigger(prev, 'beforeitemhide', [this]);
                if (!trigger(next, 'beforeitemshow', [this, prev])) {
                    this.index = this.prevIndex;
                    reset();
                    return;
                }

                var promise = this._show(prev, next, force).then(function () {

                    prev && trigger(prev, 'itemhidden', [this$1]);
                    trigger(next, 'itemshown', [this$1]);

                    return new Promise(function (resolve) {
                        fastdom.write(function () {
                            stack.shift();
                            if (stack.length) {
                                this$1.show(stack.shift(), true);
                            } else {
                                this$1._transitioner = null;
                            }
                            resolve();
                        });
                    });

                });

                prev && trigger(prev, 'itemhide', [this]);
                trigger(next, 'itemshow', [this]);

                return promise;

            },

            getIndex: function(index, prev) {
                if ( index === void 0 ) index = this.index;
                if ( prev === void 0 ) prev = this.index;

                return clamp(getIndex(index, this.slides, prev, this.finite), 0, this.maxIndex);
            },

            getValidIndex: function(index, prevIndex) {
                if ( index === void 0 ) index = this.index;
                if ( prevIndex === void 0 ) prevIndex = this.prevIndex;

                return this.getIndex(index, prevIndex);
            },

            _show: function(prev, next, force) {

                this._transitioner = this._getTransitioner(
                    prev,
                    next,
                    this.dir,
                    assign({
                        easing: force
                            ? next.offsetWidth < 600
                                ? 'cubic-bezier(0.25, 0.46, 0.45, 0.94)' /* easeOutQuad */
                                : 'cubic-bezier(0.165, 0.84, 0.44, 1)' /* easeOutQuart */
                            : this.easing
                    }, this.transitionOptions)
                );

                if (!force && !prev) {
                    this._translate(1);
                    return Promise.resolve();
                }

                var ref = this.stack;
                var length = ref.length;
                return this._transitioner[length > 1 ? 'forward' : 'show'](length > 1 ? Math.min(this.duration, 75 + 75 / (length - 1)) : this.duration, this.percent);

            },

            _getDistance: function(prev, next) {
                return this._getTransitioner(prev, prev !== next && next).getDistance();
            },

            _translate: function(percent, prev, next) {
                if ( prev === void 0 ) prev = this.prevIndex;
                if ( next === void 0 ) next = this.index;

                var transitioner = this._getTransitioner(prev !== next ? prev : false, next);
                transitioner.translate(percent);
                return transitioner;
            },

            _getTransitioner: function(prev, next, dir, options) {
                if ( prev === void 0 ) prev = this.prevIndex;
                if ( next === void 0 ) next = this.index;
                if ( dir === void 0 ) dir = this.dir || 1;
                if ( options === void 0 ) options = this.transitionOptions;

                return new this.Transitioner(
                    isNumber(prev) ? this.slides[prev] : prev,
                    isNumber(next) ? this.slides[next] : next,
                    dir * (isRtl ? -1 : 1),
                    options
                );
            }

        }

    };

    function getDirection(index, prevIndex) {
        return index === 'next'
            ? 1
            : index === 'previous'
                ? -1
                : index < prevIndex
                    ? -1
                    : 1;
    }

    function speedUp(x) {
        return .5 * x + 300; // parabola through (400,500; 600,600; 1800,1200)
    }

    var Slideshow = {

        mixins: [Slider],

        props: {
            animation: String
        },

        data: {
            animation: 'slide',
            clsActivated: 'gsl-transition-active',
            Animations: Animations,
            Transitioner: Transitioner
        },

        computed: {

            animation: function(ref) {
                var animation = ref.animation;
                var Animations = ref.Animations;

                return assign(animation in Animations ? Animations[animation] : Animations.slide, {name: animation});
            },

            transitionOptions: function() {
                return {animation: this.animation};
            }

        },

        events: {

            'itemshow itemhide itemshown itemhidden': function(ref) {
                var target = ref.target;

                this.$update(target);
            },

            beforeitemshow: function(ref) {
                var target = ref.target;

                addClass(target, this.clsActive);
            },

            itemshown: function(ref) {
                var target = ref.target;

                addClass(target, this.clsActivated);
            },

            itemhidden: function(ref) {
                var target = ref.target;

                removeClass(target, this.clsActive, this.clsActivated);
            }

        }

    };

    var LightboxPanel = {

        mixins: [Container, Modal, Togglable, Slideshow],

        functional: true,

        props: {
            delayControls: Number,
            preload: Number,
            videoAutoplay: Boolean,
            template: String
        },

        data: function () { return ({
            preload: 1,
            videoAutoplay: false,
            delayControls: 3000,
            items: [],
            cls: 'gsl-open',
            clsPage: 'gsl-lightbox-page',
            selList: '.gsl-lightbox-items',
            attrItem: 'gsl-lightbox-item',
            selClose: '.gsl-close-large',
            selCaption: '.gsl-lightbox-caption',
            pauseOnHover: false,
            velocity: 2,
            Animations: Animations$1,
            template: "<div class=\"gsl-lightbox gsl-overflow-hidden\"> <ul class=\"gsl-lightbox-items\"></ul> <div class=\"gsl-lightbox-toolbar gsl-position-top gsl-text-right gsl-transition-slide-top gsl-transition-opaque\"> <button class=\"gsl-lightbox-toolbar-icon gsl-close-large\" type=\"button\" gsl-close></button> </div> <a class=\"gsl-lightbox-button gsl-position-center-left gsl-position-medium gsl-transition-fade\" href=\"#\" gsl-slidenav-previous gsl-lightbox-item=\"previous\"></a> <a class=\"gsl-lightbox-button gsl-position-center-right gsl-position-medium gsl-transition-fade\" href=\"#\" gsl-slidenav-next gsl-lightbox-item=\"next\"></a> <div class=\"gsl-lightbox-toolbar gsl-lightbox-caption gsl-position-bottom gsl-text-center gsl-transition-slide-bottom gsl-transition-opaque\"></div> </div>"
        }); },

        created: function() {

            var $el = $(this.template);
            var list = $(this.selList, $el);
            this.items.forEach(function () { return append(list, '<li></li>'); });

            this.$mount(append(this.container, $el));

        },

        computed: {

            caption: function(ref, $el) {
                var selCaption = ref.selCaption;

                return $('.gsl-lightbox-caption', $el);
            }

        },

        events: [

            {

                name: (pointerMove + " " + pointerDown + " keydown"),

                handler: 'showControls'

            },

            {

                name: 'click',

                self: true,

                delegate: function() {
                    return this.selSlides;
                },

                handler: function(e) {

                    if (e.defaultPrevented) {
                        return;
                    }

                    this.hide();
                }

            },

            {

                name: 'shown',

                self: true,

                handler: function() {
                    this.showControls();
                }

            },

            {

                name: 'hide',

                self: true,

                handler: function() {

                    this.hideControls();

                    removeClass(this.slides, this.clsActive);
                    Transition.stop(this.slides);

                }
            },

            {

                name: 'hidden',

                self: true,

                handler: function() {
                    this.$destroy(true);
                }

            },

            {

                name: 'keyup',

                el: document,

                handler: function(e) {

                    if (!this.isToggled(this.$el)) {
                        return;
                    }

                    switch (e.keyCode) {
                        case 37:
                            this.show('previous');
                            break;
                        case 39:
                            this.show('next');
                            break;
                    }
                }
            },

            {

                name: 'beforeitemshow',

                handler: function(e) {

                    if (this.isToggled()) {
                        return;
                    }

                    this.draggable = false;

                    e.preventDefault();

                    this.toggleNow(this.$el, true);

                    this.animation = Animations$1['scale'];
                    removeClass(e.target, this.clsActive);
                    this.stack.splice(1, 0, this.index);

                }

            },

            {

                name: 'itemshow',

                handler: function(ref) {
                    var target = ref.target;


                    var i = index(target);
                    var ref$1 = this.getItem(i);
                    var caption = ref$1.caption;

                    css(this.caption, 'display', caption ? '' : 'none');
                    html(this.caption, caption);

                    for (var j = 0; j <= this.preload; j++) {
                        this.loadItem(this.getIndex(i + j));
                        this.loadItem(this.getIndex(i - j));
                    }

                }

            },

            {

                name: 'itemshown',

                handler: function() {
                    this.draggable = this.$props.draggable;
                }

            },

            {

                name: 'itemload',

                handler: function(_, item) {
                    var this$1 = this;


                    var source = item.source;
                    var type = item.type;
                    var alt = item.alt;

                    this.setItem(item, '<span gsl-spinner></span>');

                    if (!source) {
                        return;
                    }

                    var matches;

                    // Image
                    if (type === 'image' || source.match(/\.(jp(e)?g|png|gif|svg|webp)($|\?)/i)) {

                        getImage(source).then(
                            function (img) { return this$1.setItem(item, ("<img width=\"" + (img.width) + "\" height=\"" + (img.height) + "\" src=\"" + source + "\" alt=\"" + (alt ? alt : '') + "\">")); },
                            function () { return this$1.setError(item); }
                        );

                        // Video
                    } else if (type === 'video' || source.match(/\.(mp4|webm|ogv)($|\?)/i)) {

                        var video = $(("<video controls playsinline" + (item.poster ? (" poster=\"" + (item.poster) + "\"") : '') + " gsl-video=\"" + (this.videoAutoplay) + "\"></video>"));
                        attr(video, 'src', source);

                        once(video, 'error loadedmetadata', function (type) {
                            if (type === 'error') {
                                this$1.setError(item);
                            } else {
                                attr(video, {width: video.videoWidth, height: video.videoHeight});
                                this$1.setItem(item, video);
                            }
                        });

                        // Iframe
                    } else if (type === 'iframe' || source.match(/\.(html|php)($|\?)/i)) {

                        this.setItem(item, ("<iframe class=\"gsl-lightbox-iframe\" src=\"" + source + "\" frameborder=\"0\" allowfullscreen></iframe>"));

                        // YouTube
                    } else if ((matches = source.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/watch\?v=([^&\s]+)/) || source.match(/()youtu\.be\/(.*)/))) {

                        var id = matches[2];
                        var setIframe = function (width, height) {
                            if ( width === void 0 ) width = 640;
                            if ( height === void 0 ) height = 450;

                            return this$1.setItem(item, getIframe(("https://www.youtube" + (matches[1] || '') + ".com/embed/" + id), width, height, this$1.videoAutoplay));
                        };

                        getImage(("https://img.youtube.com/vi/" + id + "/maxresdefault.jpg")).then(
                            function (ref) {
                                var width = ref.width;
                                var height = ref.height;

                                // YouTube default 404 thumb, fall back to low resolution
                                if (width === 120 && height === 90) {
                                    getImage(("https://img.youtube.com/vi/" + id + "/0.jpg")).then(
                                        function (ref) {
                                            var width = ref.width;
                                            var height = ref.height;

                                            return setIframe(width, height);
                                    },
                                        setIframe
                                    );
                                } else {
                                    setIframe(width, height);
                                }
                            },
                            setIframe
                        );

                        // Vimeo
                    } else if ((matches = source.match(/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/))) {

                        ajax(("https://vimeo.com/api/oembed.json?maxwidth=1920&url=" + (encodeURI(source))), {responseType: 'json', withCredentials: false})
                            .then(
                                function (ref) {
                                    var ref_response = ref.response;
                                    var height = ref_response.height;
                                    var width = ref_response.width;

                                    return this$1.setItem(item, getIframe(("https://player.vimeo.com/video/" + (matches[2])), width, height, this$1.videoAutoplay));
                        },
                                function () { return this$1.setError(item); }
                            );

                    }

                }

            }

        ],

        methods: {

            loadItem: function(index) {
                if ( index === void 0 ) index = this.index;


                var item = this.getItem(index);

                if (item.content) {
                    return;
                }

                trigger(this.$el, 'itemload', [item]);
            },

            getItem: function(index) {
                if ( index === void 0 ) index = this.index;

                return this.items[index] || {};
            },

            setItem: function(item, content) {
                assign(item, {content: content});
                var el = html(this.slides[this.items.indexOf(item)], content);
                trigger(this.$el, 'itemloaded', [this, el]);
                this.$update(el);
            },

            setError: function(item) {
                this.setItem(item, '<span gsl-icon="icon: bolt; ratio: 2"></span>');
            },

            showControls: function() {

                clearTimeout(this.controlsTimer);
                this.controlsTimer = setTimeout(this.hideControls, this.delayControls);

                addClass(this.$el, 'gsl-active', 'gsl-transition-active');

            },

            hideControls: function() {
                removeClass(this.$el, 'gsl-active', 'gsl-transition-active');
            }

        }

    };

    function getIframe(src, width, height, autoplay) {
        return ("<iframe src=\"" + src + "\" width=\"" + width + "\" height=\"" + height + "\" style=\"max-width: 100%; box-sizing: border-box;\" frameborder=\"0\" allowfullscreen gsl-video=\"autoplay: " + autoplay + "\" gsl-responsive></iframe>");
    }

    var lightbox = {

        install: install$2,

        props: {toggle: String},

        data: {toggle: 'a'},

        computed: {

            toggles: {

                get: function(ref, $el) {
                    var toggle = ref.toggle;

                    return $$(toggle, $el);
                },

                watch: function() {
                    this.hide();
                }

            },

            items: function() {
                return uniqueBy(this.toggles.map(toItem), 'source');
            }

        },

        disconnected: function() {
            this.hide();
        },

        events: [

            {

                name: 'click',

                delegate: function() {
                    return ((this.toggle) + ":not(.gsl-disabled)");
                },

                handler: function(e) {
                    e.preventDefault();
                    var src = data(e.current, 'href');
                    this.show(findIndex(this.items, function (ref) {
                        var source = ref.source;

                        return source === src;
                    }));
                }

            }

        ],

        methods: {

            show: function(index) {
                var this$1 = this;


                this.panel = this.panel || this.$create('lightboxPanel', assign({}, this.$props, {items: this.items}));

                on(this.panel.$el, 'hidden', function () { return this$1.panel = false; });

                return this.panel.show(index);

            },

            hide: function() {

                return this.panel && this.panel.hide();

            }

        }

    };

    function install$2(gslUIkit, Lightbox) {

        if (!gslUIkit.lightboxPanel) {
            gslUIkit.component('lightboxPanel', LightboxPanel);
        }

        assign(
            Lightbox.props,
            gslUIkit.component('lightboxPanel').options.props
        );

    }

    function toItem(el) {
        return ['href', 'caption', 'type', 'poster', 'alt'].reduce(function (obj, attr) {
            obj[attr === 'href' ? 'source' : attr] = data(el, attr);
            return obj;
        }, {});
    }

    var obj;

    var containers = {};

    var notification = {

        functional: true,

        args: ['message', 'status'],

        data: {
            message: '',
            status: '',
            timeout: 5000,
            group: null,
            pos: 'top-center',
            clsClose: 'gsl-notification-close',
            clsMsg: 'gsl-notification-message'
        },

        install: install$3,

        computed: {

            marginProp: function(ref) {
                var pos = ref.pos;

                return ("margin" + (startsWith(pos, 'top') ? 'Top' : 'Bottom'));
            },

            startProps: function() {
                var obj;

                return ( obj = {opacity: 0}, obj[this.marginProp] = -this.$el.offsetHeight, obj );
            }

        },

        created: function() {

            if (!containers[this.pos]) {
                containers[this.pos] = append(this.$container, ("<div class=\"gsl-notification gsl-notification-" + (this.pos) + "\"></div>"));
            }

            var container = css(containers[this.pos], 'display', 'block');

            this.$mount(append(container,
                ("<div class=\"" + (this.clsMsg) + (this.status ? (" " + (this.clsMsg) + "-" + (this.status)) : '') + "\"> <a href=\"#\" class=\"" + (this.clsClose) + "\" data-gsl-close></a> <div>" + (this.message) + "</div> </div>")
            ));

        },

        connected: function() {
            var this$1 = this;
            var obj;


            var margin = toFloat(css(this.$el, this.marginProp));
            Transition.start(
                css(this.$el, this.startProps),
                ( obj = {opacity: 1}, obj[this.marginProp] = margin, obj )
            ).then(function () {
                if (this$1.timeout) {
                    this$1.timer = setTimeout(this$1.close, this$1.timeout);
                }
            });

        },

        events: ( obj = {

            click: function(e) {
                if (closest(e.target, 'a[href="#"],a[href=""]')) {
                    e.preventDefault();
                }
                this.close();
            }

        }, obj[pointerEnter] = function () {
                if (this.timer) {
                    clearTimeout(this.timer);
                }
            }, obj[pointerLeave] = function () {
                if (this.timeout) {
                    this.timer = setTimeout(this.close, this.timeout);
                }
            }, obj ),

        methods: {

            close: function(immediate) {
                var this$1 = this;


                var removeFn = function () {

                    trigger(this$1.$el, 'close', [this$1]);
                    remove(this$1.$el);

                    if (!containers[this$1.pos].children.length) {
                        css(containers[this$1.pos], 'display', 'none');
                    }

                };

                if (this.timer) {
                    clearTimeout(this.timer);
                }

                if (immediate) {
                    removeFn();
                } else {
                    Transition.start(this.$el, this.startProps).then(removeFn);
                }
            }

        }

    };

    function install$3(gslUIkit) {
        gslUIkit.notification.closeAll = function (group, immediate) {
            apply(document.body, function (el) {
                var notification = gslUIkit.getComponent(el, 'notification');
                if (notification && (!group || group === notification.group)) {
                    notification.close(immediate);
                }
            });
        };
    }

    var props = ['x', 'y', 'bgx', 'bgy', 'rotate', 'scale', 'color', 'backgroundColor', 'borderColor', 'opacity', 'blur', 'hue', 'grayscale', 'invert', 'saturate', 'sepia', 'fopacity', 'stroke'];

    var Parallax = {

        mixins: [Media],

        props: props.reduce(function (props, prop) {
            props[prop] = 'list';
            return props;
        }, {}),

        data: props.reduce(function (data, prop) {
            data[prop] = undefined;
            return data;
        }, {}),

        computed: {

            props: function(properties, $el) {
                var this$1 = this;


                return props.reduce(function (props, prop) {

                    if (isUndefined(properties[prop])) {
                        return props;
                    }

                    var isColor = prop.match(/color/i);
                    var isCssProp = isColor || prop === 'opacity';

                    var pos, bgPos, diff;
                    var steps = properties[prop].slice(0);

                    if (isCssProp) {
                        css($el, prop, '');
                    }

                    if (steps.length < 2) {
                        steps.unshift((prop === 'scale'
                            ? 1
                            : isCssProp
                                ? css($el, prop)
                                : 0) || 0);
                    }

                    var unit = getUnit(steps);

                    if (isColor) {

                        var ref = $el.style;
                        var color = ref.color;
                        steps = steps.map(function (step) { return parseColor($el, step); });
                        $el.style.color = color;

                    } else if (startsWith(prop, 'bg')) {

                        var attr = prop === 'bgy' ? 'height' : 'width';
                        steps = steps.map(function (step) { return toPx(step, attr, this$1.$el); });

                        css($el, ("background-position-" + (prop[2])), '');
                        bgPos = css($el, 'backgroundPosition').split(' ')[prop[2] === 'x' ? 0 : 1]; // IE 11 can't read background-position-[x|y]

                        if (this$1.covers) {

                            var min = Math.min.apply(Math, steps);
                            var max = Math.max.apply(Math, steps);
                            var down = steps.indexOf(min) < steps.indexOf(max);

                            diff = max - min;

                            steps = steps.map(function (step) { return step - (down ? min : max); });
                            pos = (down ? -diff : 0) + "px";

                        } else {

                            pos = bgPos;

                        }

                    } else {

                        steps = steps.map(toFloat);

                    }

                    if (prop === 'stroke') {

                        if (!steps.some(function (step) { return step; })) {
                            return props;
                        }

                        var length = getMaxPathLength(this$1.$el);
                        css($el, 'strokeDasharray', length);

                        if (unit === '%') {
                            steps = steps.map(function (step) { return step * length / 100; });
                        }

                        steps = steps.reverse();

                        prop = 'strokeDashoffset';
                    }

                    props[prop] = {steps: steps, unit: unit, pos: pos, bgPos: bgPos, diff: diff};

                    return props;

                }, {});

            },

            bgProps: function() {
                var this$1 = this;

                return ['bgx', 'bgy'].filter(function (bg) { return bg in this$1.props; });
            },

            covers: function(_, $el) {
                return covers($el);
            }

        },

        disconnected: function() {
            delete this._image;
        },

        update: {

            read: function(data) {
                var this$1 = this;


                data.active = this.matchMedia;

                if (!data.active) {
                    return;
                }

                if (!data.image && this.covers && this.bgProps.length) {
                    var src = css(this.$el, 'backgroundImage').replace(/^none|url\(["']?(.+?)["']?\)$/, '$1');

                    if (src) {
                        var img = new Image();
                        img.src = src;
                        data.image = img;

                        if (!img.naturalWidth) {
                            img.onload = function () { return this$1.$emit(); };
                        }
                    }

                }

                var image = data.image;

                if (!image || !image.naturalWidth) {
                    return;
                }

                var dimEl = {
                    width: this.$el.offsetWidth,
                    height: this.$el.offsetHeight
                };
                var dimImage = {
                    width: image.naturalWidth,
                    height: image.naturalHeight
                };

                var dim = Dimensions.cover(dimImage, dimEl);

                this.bgProps.forEach(function (prop) {

                    var ref = this$1.props[prop];
                    var diff = ref.diff;
                    var bgPos = ref.bgPos;
                    var steps = ref.steps;
                    var attr = prop === 'bgy' ? 'height' : 'width';
                    var span = dim[attr] - dimEl[attr];

                    if (span < diff) {
                        dimEl[attr] = dim[attr] + diff - span;
                    } else if (span > diff) {

                        var posPercentage = dimEl[attr] / toPx(bgPos, attr, this$1.$el);

                        if (posPercentage) {
                            this$1.props[prop].steps = steps.map(function (step) { return step - (span - diff) / posPercentage; });
                        }
                    }

                    dim = Dimensions.cover(dimImage, dimEl);
                });

                data.dim = dim;
            },

            write: function(ref) {
                var dim = ref.dim;
                var active = ref.active;


                if (!active) {
                    css(this.$el, {backgroundSize: '', backgroundRepeat: ''});
                    return;
                }

                dim && css(this.$el, {
                    backgroundSize: ((dim.width) + "px " + (dim.height) + "px"),
                    backgroundRepeat: 'no-repeat'
                });

            },

            events: ['resize']

        },

        methods: {

            reset: function() {
                var this$1 = this;

                each(this.getCss(0), function (_, prop) { return css(this$1.$el, prop, ''); });
            },

            getCss: function(percent) {

                var ref = this;
                var props = ref.props;
                return Object.keys(props).reduce(function (css, prop) {

                    var ref = props[prop];
                    var steps = ref.steps;
                    var unit = ref.unit;
                    var pos = ref.pos;
                    var value = getValue(steps, percent);

                    switch (prop) {

                        // transforms
                        case 'x':
                        case 'y': {
                            unit = unit || 'px';
                            css.transform += " translate" + (ucfirst(prop)) + "(" + (toFloat(value).toFixed(unit === 'px' ? 0 : 2)) + unit + ")";
                            break;
                        }
                        case 'rotate':
                            unit = unit || 'deg';
                            css.transform += " rotate(" + (value + unit) + ")";
                            break;
                        case 'scale':
                            css.transform += " scale(" + value + ")";
                            break;

                        // bg image
                        case 'bgy':
                        case 'bgx':
                            css[("background-position-" + (prop[2]))] = "calc(" + pos + " + " + value + "px)";
                            break;

                        // color
                        case 'color':
                        case 'backgroundColor':
                        case 'borderColor': {

                            var ref$1 = getStep(steps, percent);
                            var start = ref$1[0];
                            var end = ref$1[1];
                            var p = ref$1[2];

                            css[prop] = "rgba(" + (start.map(function (value, i) {
                                    value = value + p * (end[i] - value);
                                    return i === 3 ? toFloat(value) : parseInt(value, 10);
                                }).join(',')) + ")";
                            break;
                        }
                        // CSS Filter
                        case 'blur':
                            unit = unit || 'px';
                            css.filter += " blur(" + (value + unit) + ")";
                            break;
                        case 'hue':
                            unit = unit || 'deg';
                            css.filter += " hue-rotate(" + (value + unit) + ")";
                            break;
                        case 'fopacity':
                            unit = unit || '%';
                            css.filter += " opacity(" + (value + unit) + ")";
                            break;
                        case 'grayscale':
                        case 'invert':
                        case 'saturate':
                        case 'sepia':
                            unit = unit || '%';
                            css.filter += " " + prop + "(" + (value + unit) + ")";
                            break;
                        default:
                            css[prop] = value;
                    }

                    return css;

                }, {transform: '', filter: ''});

            }

        }

    };

    function parseColor(el, color) {
        return css(css(el, 'color', color), 'color')
            .split(/[(),]/g)
            .slice(1, -1)
            .concat(1)
            .slice(0, 4)
            .map(toFloat);
    }

    function getStep(steps, percent) {
        var count = steps.length - 1;
        var index = Math.min(Math.floor(count * percent), count - 1);
        var step = steps.slice(index, index + 2);

        step.push(percent === 1 ? 1 : percent % (1 / count) * count);

        return step;
    }

    function getValue(steps, percent, digits) {
        if ( digits === void 0 ) digits = 2;

        var ref = getStep(steps, percent);
        var start = ref[0];
        var end = ref[1];
        var p = ref[2];
        return (isNumber(start)
            ? start + Math.abs(start - end) * p * (start < end ? 1 : -1)
            : +end
        ).toFixed(digits);
    }

    function getUnit(steps) {
        return steps.reduce(function (unit, step) { return isString(step) && step.replace(/-|\d/g, '').trim() || unit; }, '');
    }

    function covers(el) {
        var ref = el.style;
        var backgroundSize = ref.backgroundSize;
        var covers = css(css(el, 'backgroundSize', ''), 'backgroundSize') === 'cover';
        el.style.backgroundSize = backgroundSize;
        return covers;
    }

    var parallax = {

        mixins: [Parallax],

        props: {
            target: String,
            viewport: Number,
            easing: Number
        },

        data: {
            target: false,
            viewport: 1,
            easing: 1
        },

        computed: {

            target: function(ref, $el) {
                var target = ref.target;

                return getOffsetElement(target && query(target, $el) || $el);
            }

        },

        update: {

            read: function(ref, type) {
                var percent = ref.percent;
                var active = ref.active;


                if (type !== 'scroll') {
                    percent = false;
                }

                if (!active) {
                    return;
                }

                var prev = percent;
                percent = ease(scrolledOver(this.target) / (this.viewport || 1), this.easing);

                return {
                    percent: percent,
                    style: prev !== percent ? this.getCss(percent) : false
                };
            },

            write: function(ref) {
                var style = ref.style;
                var active = ref.active;


                if (!active) {
                    this.reset();
                    return;
                }

                style && css(this.$el, style);

            },

            events: ['scroll', 'resize']
        }

    };

    function ease(percent, easing) {
        return clamp(percent * (1 - (easing - easing * percent)));
    }

    // SVG elements do not inherit from HTMLElement
    function getOffsetElement(el) {
        return el
            ? 'offsetTop' in el
                ? el
                : getOffsetElement(el.parentNode)
            : document.body;
    }

    var SliderReactive = {

        update: {

            write: function() {

                if (this.stack.length || this.dragging) {
                    return;
                }

                var index = this.getValidIndex(this.index);

                if (!~this.prevIndex || this.index !== index) {
                    this.show(index);
                }

            },

            events: ['resize']

        }

    };

    function Transitioner$1 (prev, next, dir, ref) {
        var center = ref.center;
        var easing = ref.easing;
        var list = ref.list;


        var deferred = new Deferred();

        var from = prev
            ? getLeft(prev, list, center)
            : getLeft(next, list, center) + offset(next).width * dir;
        var to = next
            ? getLeft(next, list, center)
            : from + offset(prev).width * dir * (isRtl ? -1 : 1);

        return {

            dir: dir,

            show: function(duration, percent, linear) {
                if ( percent === void 0 ) percent = 0;


                var timing = linear ? 'linear' : easing;
                duration -= Math.round(duration * clamp(percent, -1, 1));

                this.translate(percent);

                prev && this.updateTranslates();
                percent = prev ? percent : clamp(percent, 0, 1);
                triggerUpdate$1(this.getItemIn(), 'itemin', {percent: percent, duration: duration, timing: timing, dir: dir});
                prev && triggerUpdate$1(this.getItemIn(true), 'itemout', {percent: 1 - percent, duration: duration, timing: timing, dir: dir});

                Transition
                    .start(list, {transform: translate(-to * (isRtl ? -1 : 1), 'px')}, duration, timing)
                    .then(deferred.resolve, noop);

                return deferred.promise;

            },

            stop: function() {
                return Transition.stop(list);
            },

            cancel: function() {
                Transition.cancel(list);
            },

            reset: function() {
                css(list, 'transform', '');
            },

            forward: function(duration, percent) {
                if ( percent === void 0 ) percent = this.percent();

                Transition.cancel(list);
                return this.show(duration, percent, true);
            },

            translate: function(percent) {

                var distance = this.getDistance() * dir * (isRtl ? -1 : 1);

                css(list, 'transform', translate(clamp(
                    -to + (distance - distance * percent),
                    -getWidth(list),
                    offset(list).width
                ) * (isRtl ? -1 : 1), 'px'));

                this.updateTranslates();

                if (prev) {
                    percent = clamp(percent, -1, 1);
                    triggerUpdate$1(this.getItemIn(), 'itemtranslatein', {percent: percent, dir: dir});
                    triggerUpdate$1(this.getItemIn(true), 'itemtranslateout', {percent: 1 - percent, dir: dir});
                }

            },

            percent: function() {
                return Math.abs((css(list, 'transform').split(',')[4] * (isRtl ? -1 : 1) + from) / (to - from));
            },

            getDistance: function() {
                return Math.abs(to - from);
            },

            getItemIn: function(out) {
                if ( out === void 0 ) out = false;


                var actives = this.getActives();
                var all = sortBy(slides(list), 'offsetLeft');
                var i = index(all, actives[dir * (out ? -1 : 1) > 0 ? actives.length - 1 : 0]);

                return ~i && all[i + (prev && !out ? dir : 0)];

            },

            getActives: function() {

                var left = getLeft(prev || next, list, center);

                return sortBy(slides(list).filter(function (slide) {
                    var slideLeft = getElLeft(slide, list);
                    return slideLeft >= left && slideLeft + offset(slide).width <= offset(list).width + left;
                }), 'offsetLeft');

            },

            updateTranslates: function() {

                var actives = this.getActives();

                slides(list).forEach(function (slide) {
                    var isActive = includes(actives, slide);

                    triggerUpdate$1(slide, ("itemtranslate" + (isActive ? 'in' : 'out')), {
                        percent: isActive ? 1 : 0,
                        dir: slide.offsetLeft <= next.offsetLeft ? 1 : -1
                    });
                });
            }

        };

    }

    function getLeft(el, list, center) {

        var left = getElLeft(el, list);

        return center
            ? left - centerEl(el, list)
            : Math.min(left, getMax(list));

    }

    function getMax(list) {
        return Math.max(0, getWidth(list) - offset(list).width);
    }

    function getWidth(list) {
        return slides(list).reduce(function (right, el) { return offset(el).width + right; }, 0);
    }

    function getMaxWidth(list) {
        return slides(list).reduce(function (right, el) { return Math.max(right, offset(el).width); }, 0);
    }

    function centerEl(el, list) {
        return offset(list).width / 2 - offset(el).width / 2;
    }

    function getElLeft(el, list) {
        return (position(el).left + (isRtl ? offset(el).width - offset(list).width : 0)) * (isRtl ? -1 : 1);
    }

    function triggerUpdate$1(el, type, data) {
        trigger(el, createEvent(type, false, false, data));
    }

    function slides(list) {
        return children(list);
    }

    var slider = {

        mixins: [Class, Slider, SliderReactive],

        props: {
            center: Boolean,
            sets: Boolean
        },

        data: {
            center: false,
            sets: false,
            attrItem: 'gsl-slider-item',
            selList: '.gsl-slider-items',
            selNav: '.gsl-slider-nav',
            clsContainer: 'gsl-slider-container',
            Transitioner: Transitioner$1
        },

        computed: {

            avgWidth: function() {
                return getWidth(this.list) / this.length;
            },

            finite: function(ref) {
                var finite = ref.finite;

                return finite || Math.ceil(getWidth(this.list)) < offset(this.list).width + getMaxWidth(this.list) + this.center;
            },

            maxIndex: function() {

                if (!this.finite || this.center && !this.sets) {
                    return this.length - 1;
                }

                if (this.center) {
                    return last(this.sets);
                }

                css(this.slides, 'order', '');

                var max = getMax(this.list);
                var i = this.length;

                while (i--) {
                    if (getElLeft(this.list.children[i], this.list) < max) {
                        return Math.min(i + 1, this.length - 1);
                    }
                }

                return 0;
            },

            sets: function(ref) {
                var this$1 = this;
                var sets = ref.sets;


                var width = offset(this.list).width / (this.center ? 2 : 1);

                var left = 0;
                var leftCenter = width;
                var slideLeft = 0;

                sets = sets && this.slides.reduce(function (sets, slide, i) {

                    var ref = offset(slide);
                    var slideWidth = ref.width;
                    var slideRight = slideLeft + slideWidth;

                    if (slideRight > left) {

                        if (!this$1.center && i > this$1.maxIndex) {
                            i = this$1.maxIndex;
                        }

                        if (!includes(sets, i)) {

                            var cmp = this$1.slides[i + 1];
                            if (this$1.center && cmp && slideWidth < leftCenter - offset(cmp).width / 2) {
                                leftCenter -= slideWidth;
                            } else {
                                leftCenter = width;
                                sets.push(i);
                                left = slideLeft + width + (this$1.center ? slideWidth / 2 : 0);
                            }

                        }
                    }

                    slideLeft += slideWidth;

                    return sets;

                }, []);

                return !isEmpty(sets) && sets;

            },

            transitionOptions: function() {
                return {
                    center: this.center,
                    list: this.list
                };
            }

        },

        connected: function() {
            toggleClass(this.$el, this.clsContainer, !$(("." + (this.clsContainer)), this.$el));
        },

        update: {

            write: function() {
                var this$1 = this;


                $$(("[" + (this.attrItem) + "],[data-" + (this.attrItem) + "]"), this.$el).forEach(function (el) {
                    var index = data(el, this$1.attrItem);
                    this$1.maxIndex && toggleClass(el, 'gsl-hidden', isNumeric(index) && (this$1.sets && !includes(this$1.sets, toFloat(index)) || index > this$1.maxIndex));
                });

                if (this.length && !this.dragging && !this.stack.length) {
                    this._translate(1);
                }

            },

            events: ['resize']

        },

        events: {

            beforeitemshow: function(e) {

                if (!this.dragging && this.sets && this.stack.length < 2 && !includes(this.sets, this.index)) {
                    this.index = this.getValidIndex();
                }

                var diff = Math.abs(
                    this.index
                    - this.prevIndex
                    + (this.dir > 0 && this.index < this.prevIndex || this.dir < 0 && this.index > this.prevIndex ? (this.maxIndex + 1) * this.dir : 0)
                );

                if (!this.dragging && diff > 1) {

                    for (var i = 0; i < diff; i++) {
                        this.stack.splice(1, 0, this.dir > 0 ? 'next' : 'previous');
                    }

                    e.preventDefault();
                    return;
                }

                this.duration = speedUp(this.avgWidth / this.velocity)
                    * (offset(
                        this.dir < 0 || !this.slides[this.prevIndex]
                            ? this.slides[this.index]
                            : this.slides[this.prevIndex]
                    ).width / this.avgWidth);

                this.reorder();

            },

            itemshow: function() {
                !isUndefined(this.prevIndex) && addClass(this._getTransitioner().getItemIn(), this.clsActive);
            },

            itemshown: function() {
                var this$1 = this;

                var actives = this._getTransitioner(this.index).getActives();
                this.slides.forEach(function (slide) { return toggleClass(slide, this$1.clsActive, includes(actives, slide)); });
                (!this.sets || includes(this.sets, toFloat(this.index))) && this.slides.forEach(function (slide) { return toggleClass(slide, this$1.clsActivated, includes(actives, slide)); });
            }

        },

        methods: {

            reorder: function() {
                var this$1 = this;


                css(this.slides, 'order', '');

                if (this.finite) {
                    return;
                }

                var index = this.dir > 0 && this.slides[this.prevIndex] ? this.prevIndex : this.index;

                this.slides.forEach(function (slide, i) { return css(slide, 'order', this$1.dir > 0 && i < index
                        ? 1
                        : this$1.dir < 0 && i >= this$1.index
                            ? -1
                            : ''
                    ); }
                );

                if (!this.center) {
                    return;
                }

                var next = this.slides[index];
                var width = offset(this.list).width / 2 - offset(next).width / 2;
                var j = 0;

                while (width > 0) {
                    var slideIndex = this.getIndex(--j + index, index);
                    var slide = this.slides[slideIndex];

                    css(slide, 'order', slideIndex > index ? -2 : -1);
                    width -= offset(slide).width;
                }

            },

            getValidIndex: function(index, prevIndex) {
                if ( index === void 0 ) index = this.index;
                if ( prevIndex === void 0 ) prevIndex = this.prevIndex;


                index = this.getIndex(index, prevIndex);

                if (!this.sets) {
                    return index;
                }

                var prev;

                do {

                    if (includes(this.sets, index)) {
                        return index;
                    }

                    prev = index;
                    index = this.getIndex(index + this.dir, prevIndex);

                } while (index !== prev);

                return index;
            }

        }

    };

    var sliderParallax = {

        mixins: [Parallax],

        data: {
            selItem: '!li'
        },

        computed: {

            item: function(ref, $el) {
                var selItem = ref.selItem;

                return query(selItem, $el);
            }

        },

        events: [

            {

                name: 'itemshown',

                self: true,

                el: function() {
                    return this.item;
                },

                handler: function() {
                    css(this.$el, this.getCss(.5));
                }

            },

            {
                name: 'itemin itemout',

                self: true,

                el: function() {
                    return this.item;
                },

                handler: function(ref) {
                    var type = ref.type;
                    var ref_detail = ref.detail;
                    var percent = ref_detail.percent;
                    var duration = ref_detail.duration;
                    var timing = ref_detail.timing;
                    var dir = ref_detail.dir;


                    Transition.cancel(this.$el);
                    css(this.$el, this.getCss(getCurrent(type, dir, percent)));

                    Transition.start(this.$el, this.getCss(isIn(type)
                        ? .5
                        : dir > 0
                            ? 1
                            : 0
                    ), duration, timing).catch(noop);

                }
            },

            {
                name: 'transitioncanceled transitionend',

                self: true,

                el: function() {
                    return this.item;
                },

                handler: function() {
                    Transition.cancel(this.$el);
                }

            },

            {
                name: 'itemtranslatein itemtranslateout',

                self: true,

                el: function() {
                    return this.item;
                },

                handler: function(ref) {
                    var type = ref.type;
                    var ref_detail = ref.detail;
                    var percent = ref_detail.percent;
                    var dir = ref_detail.dir;

                    Transition.cancel(this.$el);
                    css(this.$el, this.getCss(getCurrent(type, dir, percent)));
                }
            }

        ]

    };

    function isIn(type) {
        return endsWith(type, 'in');
    }

    function getCurrent(type, dir, percent) {

        percent /= 2;

        return !isIn(type)
            ? dir < 0
                ? percent
                : 1 - percent
            : dir < 0
                ? 1 - percent
                : percent;
    }

    var Animations$2 = assign({}, Animations, {

        fade: {

            show: function() {
                return [
                    {opacity: 0, zIndex: 0},
                    {zIndex: -1}
                ];
            },

            percent: function(current) {
                return 1 - css(current, 'opacity');
            },

            translate: function(percent) {
                return [
                    {opacity: 1 - percent, zIndex: 0},
                    {zIndex: -1}
                ];
            }

        },

        scale: {

            show: function() {
                return [
                    {opacity: 0, transform: scale3d(1 + .5), zIndex: 0},
                    {zIndex: -1}
                ];
            },

            percent: function(current) {
                return 1 - css(current, 'opacity');
            },

            translate: function(percent) {
                return [
                    {opacity: 1 - percent, transform: scale3d(1 + .5 * percent), zIndex: 0},
                    {zIndex: -1}
                ];
            }

        },

        pull: {

            show: function(dir) {
                return dir < 0
                    ? [
                        {transform: translate(30), zIndex: -1},
                        {transform: translate(), zIndex: 0}
                    ]
                    : [
                        {transform: translate(-100), zIndex: 0},
                        {transform: translate(), zIndex: -1}
                    ];
            },

            percent: function(current, next, dir) {
                return dir < 0
                    ? 1 - translated(next)
                    : translated(current);
            },

            translate: function(percent, dir) {
                return dir < 0
                    ? [
                        {transform: translate(30 * percent), zIndex: -1},
                        {transform: translate(-100 * (1 - percent)), zIndex: 0}
                    ]
                    : [
                        {transform: translate(-percent * 100), zIndex: 0},
                        {transform: translate(30 * (1 - percent)), zIndex: -1}
                    ];
            }

        },

        push: {

            show: function(dir) {
                return dir < 0
                    ? [
                        {transform: translate(100), zIndex: 0},
                        {transform: translate(), zIndex: -1}
                    ]
                    : [
                        {transform: translate(-30), zIndex: -1},
                        {transform: translate(), zIndex: 0}
                    ];
            },

            percent: function(current, next, dir) {
                return dir > 0
                    ? 1 - translated(next)
                    : translated(current);
            },

            translate: function(percent, dir) {
                return dir < 0
                    ? [
                        {transform: translate(percent * 100), zIndex: 0},
                        {transform: translate(-30 * (1 - percent)), zIndex: -1}
                    ]
                    : [
                        {transform: translate(-30 * percent), zIndex: -1},
                        {transform: translate(100 * (1 - percent)), zIndex: 0}
                    ];
            }

        }

    });

    var slideshow = {

        mixins: [Class, Slideshow, SliderReactive],

        props: {
            ratio: String,
            minHeight: Number,
            maxHeight: Number
        },

        data: {
            ratio: '16:9',
            minHeight: false,
            maxHeight: false,
            selList: '.gsl-slideshow-items',
            attrItem: 'gsl-slideshow-item',
            selNav: '.gsl-slideshow-nav',
            Animations: Animations$2
        },

        update: {

            read: function() {

                var ref = this.ratio.split(':').map(Number);
                var width = ref[0];
                var height = ref[1];

                height = height * this.list.offsetWidth / width || 0;

                if (this.minHeight) {
                    height = Math.max(this.minHeight, height);
                }

                if (this.maxHeight) {
                    height = Math.min(this.maxHeight, height);
                }

                return {height: height - boxModelAdjust(this.list, 'height', 'content-box')};
            },

            write: function(ref) {
                var height = ref.height;

                height > 0 && css(this.list, 'minHeight', height);
            },

            events: ['resize']

        }

    };

    var sortable = {

        mixins: [Class, Animate],

        props: {
            group: String,
            threshold: Number,
            clsItem: String,
            clsPlaceholder: String,
            clsDrag: String,
            clsDragState: String,
            clsBase: String,
            clsNoDrag: String,
            clsEmpty: String,
            clsCustom: String,
            handle: String
        },

        data: {
            group: false,
            threshold: 5,
            clsItem: 'gsl-sortable-item',
            clsPlaceholder: 'gsl-sortable-placeholder',
            clsDrag: 'gsl-sortable-drag',
            clsDragState: 'gsl-drag',
            clsBase: 'gsl-sortable',
            clsNoDrag: 'gsl-sortable-nodrag',
            clsEmpty: 'gsl-sortable-empty',
            clsCustom: '',
            handle: false,
            pos: {}
        },

        created: function() {
            var this$1 = this;

            ['init', 'start', 'move', 'end'].forEach(function (key) {
                var fn = this$1[key];
                this$1[key] = function (e) {
                    this$1.scrollY = window.pageYOffset;
                    assign(this$1.pos, getEventPos(e, 'page'));

                    fn(e);
                };
            });
        },

        events: {

            name: pointerDown,
            passive: false,
            handler: 'init'

        },

        update: {

            write: function() {

                if (this.clsEmpty) {
                    toggleClass(this.$el, this.clsEmpty, isEmpty(this.$el.children));
                }

                css(this.handle ? $$(this.handle, this.$el) : this.$el.children, {touchAction: 'none', userSelect: 'none'});

                if (this.drag) {

                    // clamp to viewport
                    var ref = offset(window);
                    var right = ref.right;
                    var bottom = ref.bottom;
                    offset(this.drag, {
                        top: clamp(this.pos.y + this.origin.top, 0, bottom - this.drag.offsetHeight),
                        left: clamp(this.pos.x + this.origin.left, 0, right - this.drag.offsetWidth)
                    });

                }

            }

        },

        methods: {

            init: function(e) {

                var target = e.target;
                var button = e.button;
                var defaultPrevented = e.defaultPrevented;
                var ref = children(this.$el).filter(function (el) { return within(target, el); });
                var placeholder = ref[0];

                if (!placeholder
                    || defaultPrevented
                    || button > 0
                    || isInput(target)
                    || within(target, ("." + (this.clsNoDrag)))
                    || this.handle && !within(target, this.handle)
                ) {
                    return;
                }

                e.preventDefault();

                this.touched = [this];
                this.placeholder = placeholder;
                this.origin = assign({target: target, index: index(placeholder)}, this.pos);

                on(document, pointerMove, this.move);
                on(document, pointerUp, this.end);
                on(window, 'scroll', this.scroll);

                if (!this.threshold) {
                    this.start(e);
                }

            },

            start: function(e) {

                this.drag = appendDrag(this.$container, this.placeholder);

                var ref = offset(this.placeholder);
                var left = ref.left;
                var top = ref.top;
                assign(this.origin, {left: left - this.pos.x, top: top - this.pos.y});

                addClass(this.drag, this.clsDrag, this.clsCustom);
                addClass(this.placeholder, this.clsPlaceholder);
                addClass(this.$el.children, this.clsItem);
                addClass(document.documentElement, this.clsDragState);

                trigger(this.$el, 'start', [this, this.placeholder]);

                trackScroll(this.pos);

                this.move(e);
            },

            move: function(e) {

                if (!this.drag) {

                    if (Math.abs(this.pos.x - this.origin.x) > this.threshold || Math.abs(this.pos.y - this.origin.y) > this.threshold) {
                        this.start(e);
                    }

                    return;
                }

                this.$emit();

                var target = e.type === 'mousemove' ? e.target : document.elementFromPoint(this.pos.x - window.pageXOffset, this.pos.y - window.pageYOffset);

                var sortable = this.getSortable(target);
                var previous = this.getSortable(this.placeholder);
                var move = sortable !== previous;

                if (!sortable || within(target, this.placeholder) || move && (!sortable.group || sortable.group !== previous.group)) {
                    return;
                }

                target = sortable.$el === target.parentNode && target || children(sortable.$el).filter(function (element) { return within(target, element); })[0];

                if (move) {
                    previous.remove(this.placeholder);
                } else if (!target) {
                    return;
                }

                sortable.insert(this.placeholder, target);

                if (!includes(this.touched, sortable)) {
                    this.touched.push(sortable);
                }

            },

            end: function(e) {

                off(document, pointerMove, this.move);
                off(document, pointerUp, this.end);
                off(window, 'scroll', this.scroll);

                if (!this.drag) {
                    if (e.type === 'touchend') {
                        e.target.click();
                    }

                    return;
                }

                untrackScroll();

                var sortable = this.getSortable(this.placeholder);

                if (this === sortable) {
                    if (this.origin.index !== index(this.placeholder)) {
                        trigger(this.$el, 'moved', [this, this.placeholder]);
                    }
                } else {
                    trigger(sortable.$el, 'added', [sortable, this.placeholder]);
                    trigger(this.$el, 'removed', [this, this.placeholder]);
                }

                trigger(this.$el, 'stop', [this, this.placeholder]);

                remove(this.drag);
                this.drag = null;

                var classes = this.touched.map(function (sortable) { return ((sortable.clsPlaceholder) + " " + (sortable.clsItem)); }).join(' ');
                this.touched.forEach(function (sortable) { return removeClass(sortable.$el.children, classes); });

                removeClass(document.documentElement, this.clsDragState);

            },

            scroll: function() {
                var scroll = window.pageYOffset;
                if (scroll !== this.scrollY) {
                    this.pos.y += scroll - this.scrollY;
                    this.scrollY = scroll;
                    this.$emit();
                }
            },

            insert: function(element, target) {
                var this$1 = this;


                addClass(this.$el.children, this.clsItem);

                var insert = function () {

                    if (target) {

                        if (!within(element, this$1.$el) || isPredecessor(element, target)) {
                            before(target, element);
                        } else {
                            after(target, element);
                        }

                    } else {
                        append(this$1.$el, element);
                    }

                };

                if (this.animation) {
                    this.animate(insert);
                } else {
                    insert();
                }

            },

            remove: function(element) {

                if (!within(element, this.$el)) {
                    return;
                }

                css(this.handle ? $$(this.handle, element) : element, {touchAction: '', userSelect: ''});

                if (this.animation) {
                    this.animate(function () { return remove(element); });
                } else {
                    remove(element);
                }

            },

            getSortable: function(element) {
                return element && (this.$getComponent(element, 'sortable') || this.getSortable(element.parentNode));
            }

        }

    };

    function isPredecessor(element, target) {
        return element.parentNode === target.parentNode && index(element) > index(target);
    }

    var trackTimer;
    function trackScroll(pos) {

        trackTimer = setInterval(function () {

            var x = pos.x;
            var y = pos.y;
            scrollParents(document.elementFromPoint(x - window.pageXOffset, y - window.pageYOffset)).some(function (scrollEl) {

                var scroll = scrollEl.scrollTop;
                var scrollHeight = scrollEl.scrollHeight;

                var ref = offset(getViewport(scrollEl));
                var top = ref.top;
                var bottom = ref.bottom;
                var height = ref.height;

                if (top < y && top + 30 > y) {
                    scroll -= 5;
                } else if (bottom > y && bottom - 30 < y) {
                    scroll += 5;
                } else {
                    return;
                }

                if (scroll > 0 && scroll < scrollHeight - height) {
                    scrollTop(scrollEl, scroll);
                    return true;
                }

            });

        }, 15);

    }

    function untrackScroll() {
        clearInterval(trackTimer);
    }

    function appendDrag(container, element) {
        var clone = append(container, element.outerHTML.replace(/(^<)li|li(\/>$)/g, '$1div$2'));

        css(clone, assign({
            boxSizing: 'border-box',
            width: element.offsetWidth,
            height: element.offsetHeight,
            overflow: 'hidden'
        }, css(element, ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'])));

        height(clone.firstElementChild, height(element.firstElementChild));

        return clone;
    }

    var obj$1;

    var actives = [];

    var tooltip = {

        mixins: [Container, Togglable, Position],

        args: 'title',

        props: {
            delay: Number,
            title: String
        },

        data: {
            pos: 'top',
            title: '',
            delay: 0,
            animation: ['gsl-animation-scale-up'],
            duration: 100,
            cls: 'gsl-active',
            clsPos: 'gsl-tooltip'
        },

        beforeConnect: function() {
            this._hasTitle = hasAttr(this.$el, 'title');
            attr(this.$el, {title: '', 'aria-expanded': false});
        },

        disconnected: function() {
            this.hide();
            attr(this.$el, {title: this._hasTitle ? this.title : null, 'aria-expanded': null});
        },

        methods: {

            show: function() {
                var this$1 = this;


                if (this.isActive() || !this.title) {
                    return;
                }

                actives.forEach(function (active) { return active.hide(); });
                actives.push(this);

                this._unbind = on(document, pointerUp, function (e) { return !within(e.target, this$1.$el) && this$1.hide(); });

                clearTimeout(this.showTimer);
                this.showTimer = setTimeout(function () {
                    this$1._show();
                    this$1.hideTimer = setInterval(function () {

                        if (!isVisible(this$1.$el)) {
                            this$1.hide();
                        }

                    }, 150);
                }, this.delay);
            },

            hide: function() {

                if (!this.isActive() || matches(this.$el, 'input:focus')) {
                    return;
                }

                actives.splice(actives.indexOf(this), 1);

                clearTimeout(this.showTimer);
                clearInterval(this.hideTimer);
                attr(this.$el, 'aria-expanded', false);
                this.toggleElement(this.tooltip, false);
                this.tooltip && remove(this.tooltip);
                this.tooltip = false;
                this._unbind();

            },

            _show: function() {

                this.tooltip = append(this.container,
                    ("<div class=\"" + (this.clsPos) + "\" aria-expanded=\"true\" aria-hidden> <div class=\"" + (this.clsPos) + "-inner\">" + (this.title) + "</div> </div>")
                );

                this.positionAt(this.tooltip, this.$el);

                this.origin = this.getAxis() === 'y'
                    ? ((flipPosition(this.dir)) + "-" + (this.align))
                    : ((this.align) + "-" + (flipPosition(this.dir)));

                this.toggleElement(this.tooltip, true);

            },

            isActive: function() {
                return includes(actives, this);
            }

        },

        events: ( obj$1 = {

            focus: 'show',
            blur: 'hide'

        }, obj$1[(pointerEnter + " " + pointerLeave)] = function (e) {
                if (isTouch(e)) {
                    return;
                }
                e.type === pointerEnter
                    ? this.show()
                    : this.hide();
            }, obj$1[pointerDown] = function (e) {
                if (!isTouch(e)) {
                    return;
                }
                this.isActive()
                    ? this.hide()
                    : this.show();
            }, obj$1 )

    };

    var upload = {

        props: {
            allow: String,
            clsDragover: String,
            concurrent: Number,
            maxSize: Number,
            method: String,
            mime: String,
            msgInvalidMime: String,
            msgInvalidName: String,
            msgInvalidSize: String,
            multiple: Boolean,
            name: String,
            params: Object,
            type: String,
            url: String
        },

        data: {
            allow: false,
            clsDragover: 'gsl-dragover',
            concurrent: 1,
            maxSize: 0,
            method: 'POST',
            mime: false,
            msgInvalidMime: 'Invalid File Type: %s',
            msgInvalidName: 'Invalid File Name: %s',
            msgInvalidSize: 'Invalid File Size: %s Kilobytes Max',
            multiple: false,
            name: 'files[]',
            params: {},
            type: '',
            url: '',
            abort: noop,
            beforeAll: noop,
            beforeSend: noop,
            complete: noop,
            completeAll: noop,
            error: noop,
            fail: noop,
            load: noop,
            loadEnd: noop,
            loadStart: noop,
            progress: noop
        },

        events: {

            change: function(e) {

                if (!matches(e.target, 'input[type="file"]')) {
                    return;
                }

                e.preventDefault();

                if (e.target.files) {
                    this.upload(e.target.files);
                }

                e.target.value = '';
            },

            drop: function(e) {
                stop(e);

                var transfer = e.dataTransfer;

                if (!transfer || !transfer.files) {
                    return;
                }

                removeClass(this.$el, this.clsDragover);

                this.upload(transfer.files);
            },

            dragenter: function(e) {
                stop(e);
            },

            dragover: function(e) {
                stop(e);
                addClass(this.$el, this.clsDragover);
            },

            dragleave: function(e) {
                stop(e);
                removeClass(this.$el, this.clsDragover);
            }

        },

        methods: {

            upload: function(files) {
                var this$1 = this;


                if (!files.length) {
                    return;
                }

                trigger(this.$el, 'upload', [files]);

                for (var i = 0; i < files.length; i++) {

                    if (this.maxSize && this.maxSize * 1000 < files[i].size) {
                        this.fail(this.msgInvalidSize.replace('%s', this.maxSize));
                        return;
                    }

                    if (this.allow && !match$1(this.allow, files[i].name)) {
                        this.fail(this.msgInvalidName.replace('%s', this.allow));
                        return;
                    }

                    if (this.mime && !match$1(this.mime, files[i].type)) {
                        this.fail(this.msgInvalidMime.replace('%s', this.mime));
                        return;
                    }

                }

                if (!this.multiple) {
                    files = [files[0]];
                }

                this.beforeAll(this, files);

                var chunks = chunk(files, this.concurrent);
                var upload = function (files) {

                    var data = new FormData();

                    files.forEach(function (file) { return data.append(this$1.name, file); });

                    for (var key in this$1.params) {
                        data.append(key, this$1.params[key]);
                    }

                    ajax(this$1.url, {
                        data: data,
                        method: this$1.method,
                        responseType: this$1.type,
                        beforeSend: function (env) {

                            var xhr = env.xhr;
                            xhr.upload && on(xhr.upload, 'progress', this$1.progress);
                            ['loadStart', 'load', 'loadEnd', 'abort'].forEach(function (type) { return on(xhr, type.toLowerCase(), this$1[type]); }
                            );

                            this$1.beforeSend(env);

                        }
                    }).then(
                        function (xhr) {

                            this$1.complete(xhr);

                            if (chunks.length) {
                                upload(chunks.shift());
                            } else {
                                this$1.completeAll(xhr);
                            }

                        },
                        function (e) { return this$1.error(e); }
                    );

                };

                upload(chunks.shift());

            }

        }

    };

    function match$1(pattern, path) {
        return path.match(new RegExp(("^" + (pattern.replace(/\//g, '\\/').replace(/\*\*/g, '(\\/[^\\/]+)*').replace(/\*/g, '[^\\/]+').replace(/((?!\\))\?/g, '$1.')) + "$"), 'i'));
    }

    function chunk(files, size) {
        var chunks = [];
        for (var i = 0; i < files.length; i += size) {
            var chunk = [];
            for (var j = 0; j < size; j++) {
                chunk.push(files[i + j]);
            }
            chunks.push(chunk);
        }
        return chunks;
    }

    function stop(e) {
        e.preventDefault();
        e.stopPropagation();
    }



    var components = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Countdown: countdown,
        Filter: filter$1,
        Lightbox: lightbox,
        LightboxPanel: LightboxPanel,
        Notification: notification,
        Parallax: parallax,
        Slider: slider,
        SliderParallax: sliderParallax,
        Slideshow: slideshow,
        SlideshowParallax: sliderParallax,
        Sortable: sortable,
        Tooltip: tooltip,
        Upload: upload
    });

    // register components
    each(coreComponents, register);
    each(components, register);

    // core functionality
    gslUIkit.use(Core);

    boot(gslUIkit);

    function register(component, name) {
        gslUIkit.component(name, component);
    }

    return gslUIkit;

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlraXQuanMiLCJzb3VyY2VzIjpbInNyYy9qcy91dGlsL2xhbmcuanMiLCJzcmMvanMvdXRpbC9hdHRyLmpzIiwic3JjL2pzL3V0aWwvZW52LmpzIiwic3JjL2pzL3V0aWwvc2VsZWN0b3IuanMiLCJzcmMvanMvdXRpbC9maWx0ZXIuanMiLCJzcmMvanMvdXRpbC9ldmVudC5qcyIsInNyYy9qcy91dGlsL3Byb21pc2UuanMiLCJzcmMvanMvdXRpbC9hamF4LmpzIiwic3JjL2pzL3V0aWwvZG9tLmpzIiwic3JjL2pzL3V0aWwvY2xhc3MuanMiLCJzcmMvanMvdXRpbC9zdHlsZS5qcyIsInNyYy9qcy91dGlsL2FuaW1hdGlvbi5qcyIsInNyYy9qcy91dGlsL2RpbWVuc2lvbnMuanMiLCJzcmMvanMvdXRpbC9mYXN0ZG9tLmpzIiwic3JjL2pzL3V0aWwvbW91c2UuanMiLCJzcmMvanMvdXRpbC9vcHRpb25zLmpzIiwic3JjL2pzL3V0aWwvcGxheWVyLmpzIiwic3JjL2pzL3V0aWwvdmlld3BvcnQuanMiLCJzcmMvanMvdXRpbC9pbnRlcnNlY3Rpb24uanMiLCJzcmMvanMvYXBpL2dsb2JhbC5qcyIsInNyYy9qcy9hcGkvaG9va3MuanMiLCJzcmMvanMvYXBpL3N0YXRlLmpzIiwic3JjL2pzL2FwaS9pbnN0YW5jZS5qcyIsInNyYy9qcy9hcGkvY29tcG9uZW50LmpzIiwic3JjL2pzL2FwaS9pbmRleC5qcyIsInNyYy9qcy9jb3JlL2NvcmUuanMiLCJzcmMvanMvYXBpL2Jvb3QuanMiLCJzcmMvanMvbWl4aW4vY2xhc3MuanMiLCJzcmMvanMvbWl4aW4vdG9nZ2xhYmxlLmpzIiwic3JjL2pzL2NvcmUvYWNjb3JkaW9uLmpzIiwic3JjL2pzL2NvcmUvYWxlcnQuanMiLCJzcmMvanMvY29yZS92aWRlby5qcyIsInNyYy9qcy9jb3JlL2NvdmVyLmpzIiwic3JjL2pzL21peGluL3Bvc2l0aW9uLmpzIiwic3JjL2pzL2NvcmUvZHJvcC5qcyIsInNyYy9qcy9jb3JlL2Ryb3Bkb3duLmpzIiwic3JjL2pzL2NvcmUvZm9ybS1jdXN0b20uanMiLCJzcmMvanMvY29yZS9naWYuanMiLCJzcmMvanMvY29yZS9tYXJnaW4uanMiLCJzcmMvanMvY29yZS9ncmlkLmpzIiwic3JjL2pzL21peGluL2ZsZXgtYnVnLmpzIiwic3JjL2pzL2NvcmUvaGVpZ2h0LW1hdGNoLmpzIiwic3JjL2pzL2NvcmUvaGVpZ2h0LXZpZXdwb3J0LmpzIiwic3JjL2pzL2NvcmUvc3ZnLmpzIiwic3JjL2pzL2NvcmUvaWNvbi5qcyIsInNyYy9qcy9jb3JlL2ltZy5qcyIsInNyYy9qcy9taXhpbi9tZWRpYS5qcyIsInNyYy9qcy9jb3JlL2xlYWRlci5qcyIsInNyYy9qcy9taXhpbi9jb250YWluZXIuanMiLCJzcmMvanMvbWl4aW4vbW9kYWwuanMiLCJzcmMvanMvY29yZS9tb2RhbC5qcyIsInNyYy9qcy9jb3JlL25hdi5qcyIsInNyYy9qcy9jb3JlL25hdmJhci5qcyIsInNyYy9qcy9jb3JlL29mZmNhbnZhcy5qcyIsInNyYy9qcy9jb3JlL292ZXJmbG93LWF1dG8uanMiLCJzcmMvanMvY29yZS9yZXNwb25zaXZlLmpzIiwic3JjL2pzL2NvcmUvc2Nyb2xsLmpzIiwic3JjL2pzL2NvcmUvc2Nyb2xsc3B5LmpzIiwic3JjL2pzL2NvcmUvc2Nyb2xsc3B5LW5hdi5qcyIsInNyYy9qcy9jb3JlL3N0aWNreS5qcyIsInNyYy9qcy9jb3JlL3N3aXRjaGVyLmpzIiwic3JjL2pzL2NvcmUvdGFiLmpzIiwic3JjL2pzL2NvcmUvdG9nZ2xlLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvY291bnRkb3duLmpzIiwic3JjL2pzL21peGluL2FuaW1hdGUuanMiLCJzcmMvanMvY29tcG9uZW50cy9maWx0ZXIuanMiLCJzcmMvanMvbWl4aW4vaW50ZXJuYWwvc2xpZGVzaG93LWFuaW1hdGlvbnMuanMiLCJzcmMvanMvY29tcG9uZW50cy9pbnRlcm5hbC9saWdodGJveC1hbmltYXRpb25zLmpzIiwic3JjL2pzL21peGluL2ludGVybmFsL3NsaWRlc2hvdy10cmFuc2l0aW9uZXIuanMiLCJzcmMvanMvbWl4aW4vc2xpZGVyLWF1dG9wbGF5LmpzIiwic3JjL2pzL21peGluL3NsaWRlci1kcmFnLmpzIiwic3JjL2pzL21peGluL3NsaWRlci1uYXYuanMiLCJzcmMvanMvbWl4aW4vc2xpZGVyLmpzIiwic3JjL2pzL21peGluL3NsaWRlc2hvdy5qcyIsInNyYy9qcy9jb21wb25lbnRzL2xpZ2h0Ym94LXBhbmVsLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvbGlnaHRib3guanMiLCJzcmMvanMvY29tcG9uZW50cy9ub3RpZmljYXRpb24uanMiLCJzcmMvanMvbWl4aW4vcGFyYWxsYXguanMiLCJzcmMvanMvY29tcG9uZW50cy9wYXJhbGxheC5qcyIsInNyYy9qcy9taXhpbi9zbGlkZXItcmVhY3RpdmUuanMiLCJzcmMvanMvY29tcG9uZW50cy9pbnRlcm5hbC9zbGlkZXItdHJhbnNpdGlvbmVyLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvc2xpZGVyLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvc2xpZGVyLXBhcmFsbGF4LmpzIiwic3JjL2pzL2NvbXBvbmVudHMvaW50ZXJuYWwvc2xpZGVzaG93LWFuaW1hdGlvbnMuanMiLCJzcmMvanMvY29tcG9uZW50cy9zbGlkZXNob3cuanMiLCJzcmMvanMvY29tcG9uZW50cy9zb3J0YWJsZS5qcyIsInNyYy9qcy9jb21wb25lbnRzL3Rvb2x0aXAuanMiLCJzcmMvanMvY29tcG9uZW50cy91cGxvYWQuanMiLCJzcmMvanMvdWlraXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgb2JqUHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtoYXNPd25Qcm9wZXJ0eX0gPSBvYmpQcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPd24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmNvbnN0IGh5cGhlbmF0ZUNhY2hlID0ge307XG5jb25zdCBoeXBoZW5hdGVSZSA9IC8oW2EtelxcZF0pKFtBLVpdKS9nO1xuXG5leHBvcnQgZnVuY3Rpb24gaHlwaGVuYXRlKHN0cikge1xuXG4gICAgaWYgKCEoc3RyIGluIGh5cGhlbmF0ZUNhY2hlKSkge1xuICAgICAgICBoeXBoZW5hdGVDYWNoZVtzdHJdID0gc3RyXG4gICAgICAgICAgICAucmVwbGFjZShoeXBoZW5hdGVSZSwgJyQxLSQyJylcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBoeXBoZW5hdGVDYWNoZVtzdHJdO1xufVxuXG5jb25zdCBjYW1lbGl6ZVJlID0gLy0oXFx3KS9nO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUmUsIHRvVXBwZXIpO1xufVxuXG5mdW5jdGlvbiB0b1VwcGVyKF8sIGMpIHtcbiAgICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdWNmaXJzdChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmxlbmd0aCA/IHRvVXBwZXIobnVsbCwgc3RyLmNoYXJBdCgwKSkgKyBzdHIuc2xpY2UoMSkgOiAnJztcbn1cblxuY29uc3Qgc3RyUHJvdG90eXBlID0gU3RyaW5nLnByb3RvdHlwZTtcbmNvbnN0IHN0YXJ0c1dpdGhGbiA9IHN0clByb3RvdHlwZS5zdGFydHNXaXRoIHx8IGZ1bmN0aW9uIChzZWFyY2gpIHsgcmV0dXJuIHRoaXMubGFzdEluZGV4T2Yoc2VhcmNoLCAwKSA9PT0gMDsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcbiAgICByZXR1cm4gc3RhcnRzV2l0aEZuLmNhbGwoc3RyLCBzZWFyY2gpO1xufVxuXG5jb25zdCBlbmRzV2l0aEZuID0gc3RyUHJvdG90eXBlLmVuZHNXaXRoIHx8IGZ1bmN0aW9uIChzZWFyY2gpIHsgcmV0dXJuIHRoaXMuc3Vic3RyKC1zZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gpIHtcbiAgICByZXR1cm4gZW5kc1dpdGhGbi5jYWxsKHN0ciwgc2VhcmNoKTtcbn1cblxuY29uc3QgYXJyUHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5jb25zdCBpbmNsdWRlc0ZuID0gZnVuY3Rpb24gKHNlYXJjaCwgaSkgeyByZXR1cm4gfnRoaXMuaW5kZXhPZihzZWFyY2gsIGkpOyB9O1xuY29uc3QgaW5jbHVkZXNTdHIgPSBzdHJQcm90b3R5cGUuaW5jbHVkZXMgfHwgaW5jbHVkZXNGbjtcbmNvbnN0IGluY2x1ZGVzQXJyYXkgPSBhcnJQcm90b3R5cGUuaW5jbHVkZXMgfHwgaW5jbHVkZXNGbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVzKG9iaiwgc2VhcmNoKSB7XG4gICAgcmV0dXJuIG9iaiAmJiAoaXNTdHJpbmcob2JqKSA/IGluY2x1ZGVzU3RyIDogaW5jbHVkZXNBcnJheSkuY2FsbChvYmosIHNlYXJjaCk7XG59XG5cbmNvbnN0IGZpbmRJbmRleEZuID0gYXJyUHJvdG90eXBlLmZpbmRJbmRleCB8fCBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChhcmd1bWVudHNbMV0sIHRoaXNbaV0sIGksIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZmluZEluZGV4Rm4uY2FsbChhcnJheSwgcHJlZGljYXRlKTtcbn1cblxuZXhwb3J0IGNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG59XG5cbmNvbnN0IHt0b1N0cmluZ30gPSBvYmpQcm90b3R5cGU7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAgIHJldHVybiBpc09iamVjdChvYmopICYmIG9iaiA9PT0gb2JqLndpbmRvdztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jdW1lbnQob2JqKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqLm5vZGVUeXBlID09PSA5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNKUXVlcnkob2JqKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgISFvYmouanF1ZXJ5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKG9iaikge1xuICAgIHJldHVybiBpc09iamVjdChvYmopICYmIG9iai5ub2RlVHlwZSA+PSAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICAgIHJldHVybiBpc09iamVjdChvYmopICYmIG9iai5ub2RlVHlwZSA9PT0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNvbGxlY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXlxcW29iamVjdCAoTm9kZUxpc3R8SFRNTENvbGxlY3Rpb24pXFxdJC8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWVyaWModmFsdWUpIHtcbiAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpIHx8IGlzU3RyaW5nKHZhbHVlKSAmJiAhaXNOYU4odmFsdWUgLSBwYXJzZUZsb2F0KHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICAgIHJldHVybiAhKGlzQXJyYXkob2JqKVxuICAgICAgICA/IG9iai5sZW5ndGhcbiAgICAgICAgOiBpc09iamVjdChvYmopXG4gICAgICAgICAgICA/IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoXG4gICAgICAgICAgICA6IGZhbHNlXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gaXNCb29sZWFuKHZhbHVlKVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogdmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gJzEnIHx8IHZhbHVlID09PSAnJ1xuICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICA6IHZhbHVlID09PSAnZmFsc2UnIHx8IHZhbHVlID09PSAnMCdcbiAgICAgICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICAgICAgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgY29uc3QgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcbiAgICByZXR1cm4gIWlzTmFOKG51bWJlcikgPyBudW1iZXIgOiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTm9kZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGlzTm9kZShlbGVtZW50KVxuICAgICAgICA/IGVsZW1lbnRcbiAgICAgICAgOiBpc05vZGVDb2xsZWN0aW9uKGVsZW1lbnQpIHx8IGlzSlF1ZXJ5KGVsZW1lbnQpXG4gICAgICAgICAgICA/IGVsZW1lbnRbMF1cbiAgICAgICAgICAgIDogaXNBcnJheShlbGVtZW50KVxuICAgICAgICAgICAgICAgID8gdG9Ob2RlKGVsZW1lbnRbMF0pXG4gICAgICAgICAgICAgICAgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Ob2RlcyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIGlzTm9kZShlbGVtZW50KVxuICAgICAgICA/IFtlbGVtZW50XVxuICAgICAgICA6IGlzTm9kZUNvbGxlY3Rpb24oZWxlbWVudClcbiAgICAgICAgICAgID8gYXJyUHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudClcbiAgICAgICAgICAgIDogaXNBcnJheShlbGVtZW50KVxuICAgICAgICAgICAgICAgID8gZWxlbWVudC5tYXAodG9Ob2RlKS5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICA6IGlzSlF1ZXJ5KGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC50b0FycmF5KClcbiAgICAgICAgICAgICAgICAgICAgOiBbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvV2luZG93KGVsZW1lbnQpIHtcbiAgICBpZiAoaXNXaW5kb3coZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgID8gKGlzRG9jdW1lbnQoZWxlbWVudClcbiAgICAgICAgICAgID8gZWxlbWVudFxuICAgICAgICAgICAgOiBlbGVtZW50Lm93bmVyRG9jdW1lbnRcbiAgICAgICAgKS5kZWZhdWx0Vmlld1xuICAgICAgICA6IHdpbmRvdztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTGlzdCh2YWx1ZSkge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogaXNTdHJpbmcodmFsdWUpXG4gICAgICAgICAgICA/IHZhbHVlLnNwbGl0KC8sKD8hW14oXSpcXCkpLykubWFwKHZhbHVlID0+IGlzTnVtZXJpYyh2YWx1ZSlcbiAgICAgICAgICAgICAgICA/IHRvTnVtYmVyKHZhbHVlKVxuICAgICAgICAgICAgICAgIDogdG9Cb29sZWFuKHZhbHVlLnRyaW0oKSkpXG4gICAgICAgICAgICA6IFt2YWx1ZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b01zKHRpbWUpIHtcbiAgICByZXR1cm4gIXRpbWVcbiAgICAgICAgPyAwXG4gICAgICAgIDogZW5kc1dpdGgodGltZSwgJ21zJylcbiAgICAgICAgICAgID8gdG9GbG9hdCh0aW1lKVxuICAgICAgICAgICAgOiB0b0Zsb2F0KHRpbWUpICogMTAwMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBvdGhlclxuICAgICAgICB8fCBpc09iamVjdCh2YWx1ZSlcbiAgICAgICAgJiYgaXNPYmplY3Qob3RoZXIpXG4gICAgICAgICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGhcbiAgICAgICAgJiYgZWFjaCh2YWx1ZSwgKHZhbCwga2V5KSA9PiB2YWwgPT09IG90aGVyW2tleV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3dhcCh2YWx1ZSwgYSwgYikge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoYCR7YX18JHtifWAsICdtZycpLCBtYXRjaCA9PiB7XG4gICAgICAgIHJldHVybiBtYXRjaCA9PT0gYSA/IGIgOiBhO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0LCAuLi5hcmdzKSB7XG4gICAgdGFyZ2V0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3NbaV07XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVhY2gob2JqLCBjYikge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoZmFsc2UgPT09IGNiKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnkoYXJyYXksIHByb3ApIHtcbiAgICByZXR1cm4gYXJyYXkuc29ydCgoe1twcm9wXTogcHJvcEEgPSAwfSwge1twcm9wXTogcHJvcEIgPSAwfSkgPT5cbiAgICAgICAgcHJvcEEgPiBwcm9wQlxuICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICA6IHByb3BCID4gcHJvcEFcbiAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgOiAwXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaXF1ZUJ5KGFycmF5LCBwcm9wKSB7XG4gICAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKCh7W3Byb3BdOiBjaGVja30pID0+IHNlZW4uaGFzKGNoZWNrKVxuICAgICAgICA/IGZhbHNlXG4gICAgICAgIDogc2Vlbi5hZGQoY2hlY2spIHx8IHRydWUgLy8gSUUgMTEgZG9lcyBub3QgcmV0dXJuIHRoZSBTZXQgb2JqZWN0XG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbWluID0gMCwgbWF4ID0gMSkge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh0b051bWJlcihudW1iZXIpIHx8IDAsIG1pbiksIG1heCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkge31cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdFJlY3QocjEsIHIyKSB7XG4gICAgcmV0dXJuIHIxLmxlZnQgPCByMi5yaWdodCAmJlxuICAgICAgICByMS5yaWdodCA+IHIyLmxlZnQgJiZcbiAgICAgICAgcjEudG9wIDwgcjIuYm90dG9tICYmXG4gICAgICAgIHIxLmJvdHRvbSA+IHIyLnRvcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50SW5SZWN0KHBvaW50LCByZWN0KSB7XG4gICAgcmV0dXJuIHBvaW50LnggPD0gcmVjdC5yaWdodCAmJlxuICAgICAgICBwb2ludC54ID49IHJlY3QubGVmdCAmJlxuICAgICAgICBwb2ludC55IDw9IHJlY3QuYm90dG9tICYmXG4gICAgICAgIHBvaW50LnkgPj0gcmVjdC50b3A7XG59XG5cbmV4cG9ydCBjb25zdCBEaW1lbnNpb25zID0ge1xuXG4gICAgcmF0aW8oZGltZW5zaW9ucywgcHJvcCwgdmFsdWUpIHtcblxuICAgICAgICBjb25zdCBhUHJvcCA9IHByb3AgPT09ICd3aWR0aCcgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFthUHJvcF06IGRpbWVuc2lvbnNbcHJvcF0gPyBNYXRoLnJvdW5kKHZhbHVlICogZGltZW5zaW9uc1thUHJvcF0gLyBkaW1lbnNpb25zW3Byb3BdKSA6IGRpbWVuc2lvbnNbYVByb3BdLFxuICAgICAgICAgICAgW3Byb3BdOiB2YWx1ZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb250YWluKGRpbWVuc2lvbnMsIG1heERpbWVuc2lvbnMpIHtcbiAgICAgICAgZGltZW5zaW9ucyA9IGFzc2lnbih7fSwgZGltZW5zaW9ucyk7XG5cbiAgICAgICAgZWFjaChkaW1lbnNpb25zLCAoXywgcHJvcCkgPT4gZGltZW5zaW9ucyA9IGRpbWVuc2lvbnNbcHJvcF0gPiBtYXhEaW1lbnNpb25zW3Byb3BdXG4gICAgICAgICAgICA/IHRoaXMucmF0aW8oZGltZW5zaW9ucywgcHJvcCwgbWF4RGltZW5zaW9uc1twcm9wXSlcbiAgICAgICAgICAgIDogZGltZW5zaW9uc1xuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgIH0sXG5cbiAgICBjb3ZlcihkaW1lbnNpb25zLCBtYXhEaW1lbnNpb25zKSB7XG4gICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLmNvbnRhaW4oZGltZW5zaW9ucywgbWF4RGltZW5zaW9ucyk7XG5cbiAgICAgICAgZWFjaChkaW1lbnNpb25zLCAoXywgcHJvcCkgPT4gZGltZW5zaW9ucyA9IGRpbWVuc2lvbnNbcHJvcF0gPCBtYXhEaW1lbnNpb25zW3Byb3BdXG4gICAgICAgICAgICA/IHRoaXMucmF0aW8oZGltZW5zaW9ucywgcHJvcCwgbWF4RGltZW5zaW9uc1twcm9wXSlcbiAgICAgICAgICAgIDogZGltZW5zaW9uc1xuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgIH1cblxufTtcbiIsImltcG9ydCB7aXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzVW5kZWZpbmVkLCB0b05vZGUsIHRvTm9kZXN9IGZyb20gJy4vbGFuZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRyKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG5cbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmFtZSkge1xuICAgICAgICAgICAgYXR0cihlbGVtZW50LCBrZXksIG5hbWVba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9Ob2RlcyhlbGVtZW50KS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwoZWxlbWVudCwgYXR0cihlbGVtZW50LCBuYW1lKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWxlbWVudCwgbmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdHRyKGVsZW1lbnQsIG5hbWUpIHtcbiAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGVsZW1lbnQgPT4gZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQXR0cihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudCA9IHRvTm9kZXMoZWxlbWVudCk7XG4gICAgbmFtZS5zcGxpdCgnICcpLmZvckVhY2gobmFtZSA9PlxuICAgICAgICBlbGVtZW50LmZvckVhY2goZWxlbWVudCA9PlxuICAgICAgICAgICAgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbiAgICAgICAgKVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhKGVsZW1lbnQsIGF0dHJpYnV0ZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBhdHRycyA9IFthdHRyaWJ1dGUsIGBkYXRhLSR7YXR0cmlidXRlfWBdOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGhhc0F0dHIoZWxlbWVudCwgYXR0cnNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXR0cihlbGVtZW50LCBhdHRyc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKiBnbG9iYWwgRG9jdW1lbnRUb3VjaCAqL1xuaW1wb3J0IHthdHRyfSBmcm9tICcuL2F0dHInO1xuXG5leHBvcnQgY29uc3QgaXNJRSA9IC9tc2llfHRyaWRlbnQvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbmV4cG9ydCBjb25zdCBpc1J0bCA9IGF0dHIoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnZGlyJykgPT09ICdydGwnO1xuXG5jb25zdCBoYXNUb3VjaEV2ZW50cyA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcbmNvbnN0IGhhc1BvaW50ZXJFdmVudHMgPSB3aW5kb3cuUG9pbnRlckV2ZW50O1xuZXhwb3J0IGNvbnN0IGhhc1RvdWNoID0gaGFzVG91Y2hFdmVudHNcbiAgICB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2hcbiAgICB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM7IC8vIElFID49MTFcblxuZXhwb3J0IGNvbnN0IHBvaW50ZXJEb3duID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyZG93bicgOiBoYXNUb3VjaEV2ZW50cyA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nO1xuZXhwb3J0IGNvbnN0IHBvaW50ZXJNb3ZlID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVybW92ZScgOiBoYXNUb3VjaEV2ZW50cyA/ICd0b3VjaG1vdmUnIDogJ21vdXNlbW92ZSc7XG5leHBvcnQgY29uc3QgcG9pbnRlclVwID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVydXAnIDogaGFzVG91Y2hFdmVudHMgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnO1xuZXhwb3J0IGNvbnN0IHBvaW50ZXJFbnRlciA9IGhhc1BvaW50ZXJFdmVudHMgPyAncG9pbnRlcmVudGVyJyA6IGhhc1RvdWNoRXZlbnRzID8gJycgOiAnbW91c2VlbnRlcic7XG5leHBvcnQgY29uc3QgcG9pbnRlckxlYXZlID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVybGVhdmUnIDogaGFzVG91Y2hFdmVudHMgPyAnJyA6ICdtb3VzZWxlYXZlJztcbmV4cG9ydCBjb25zdCBwb2ludGVyQ2FuY2VsID0gaGFzUG9pbnRlckV2ZW50cyA/ICdwb2ludGVyY2FuY2VsJyA6ICd0b3VjaGNhbmNlbCc7XG4iLCJpbXBvcnQge3JlbW92ZUF0dHJ9IGZyb20gJy4vYXR0cic7XG5pbXBvcnQge2lzRG9jdW1lbnQsIGlzRWxlbWVudCwgaXNTdHJpbmcsIHN0YXJ0c1dpdGgsIHRvTm9kZSwgdG9Ob2Rlc30gZnJvbSAnLi9sYW5nJztcblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5KHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHRvTm9kZShzZWxlY3RvcikgfHwgZmluZChzZWxlY3RvciwgZ2V0Q29udGV4dChzZWxlY3RvciwgY29udGV4dCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBbGwoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICBjb25zdCBub2RlcyA9IHRvTm9kZXMoc2VsZWN0b3IpO1xuICAgIHJldHVybiBub2Rlcy5sZW5ndGggJiYgbm9kZXMgfHwgZmluZEFsbChzZWxlY3RvciwgZ2V0Q29udGV4dChzZWxlY3RvciwgY29udGV4dCkpO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0KHNlbGVjdG9yLCBjb250ZXh0ID0gZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gaXNDb250ZXh0U2VsZWN0b3Ioc2VsZWN0b3IpIHx8IGlzRG9jdW1lbnQoY29udGV4dClcbiAgICAgICAgPyBjb250ZXh0XG4gICAgICAgIDogY29udGV4dC5vd25lckRvY3VtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZChzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHJldHVybiB0b05vZGUoX3F1ZXJ5KHNlbGVjdG9yLCBjb250ZXh0LCAncXVlcnlTZWxlY3RvcicpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBbGwoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gdG9Ob2RlcyhfcXVlcnkoc2VsZWN0b3IsIGNvbnRleHQsICdxdWVyeVNlbGVjdG9yQWxsJykpO1xufVxuXG5mdW5jdGlvbiBfcXVlcnkoc2VsZWN0b3IsIGNvbnRleHQgPSBkb2N1bWVudCwgcXVlcnlGbikge1xuXG4gICAgaWYgKCFzZWxlY3RvciB8fCAhaXNTdHJpbmcoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShjb250ZXh0U2FuaXRpemVSZSwgJyQxIConKTtcblxuICAgIGxldCByZW1vdmVzO1xuXG4gICAgaWYgKGlzQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yKSkge1xuXG4gICAgICAgIHJlbW92ZXMgPSBbXTtcblxuICAgICAgICBzZWxlY3RvciA9IHNwbGl0U2VsZWN0b3Ioc2VsZWN0b3IpLm1hcCgoc2VsZWN0b3IsIGkpID0+IHtcblxuICAgICAgICAgICAgbGV0IGN0eCA9IGNvbnRleHQ7XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RvclswXSA9PT0gJyEnKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvcnMgPSBzZWxlY3Rvci5zdWJzdHIoMSkudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgY3R4ID0gY2xvc2VzdChwYXJlbnQoY29udGV4dCksIHNlbGVjdG9yc1swXSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvcnMuc2xpY2UoMSkuam9pbignICcpLnRyaW0oKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZWN0b3JbMF0gPT09ICctJykge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JzID0gc2VsZWN0b3Iuc3Vic3RyKDEpLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSAoY3R4IHx8IGNvbnRleHQpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgY3R4ID0gbWF0Y2hlcyhwcmV2LCBzZWxlY3Rvci5zdWJzdHIoMSkpID8gcHJldiA6IG51bGw7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvcnMuc2xpY2UoMSkuam9pbignICcpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY3R4LmlkKSB7XG4gICAgICAgICAgICAgICAgY3R4LmlkID0gYHVrLSR7RGF0ZS5ub3coKX0ke2l9YDtcbiAgICAgICAgICAgICAgICByZW1vdmVzLnB1c2goKCkgPT4gcmVtb3ZlQXR0cihjdHgsICdpZCcpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGAjJHtlc2NhcGUoY3R4LmlkKX0gJHtzZWxlY3Rvcn1gO1xuXG4gICAgICAgIH0pLmZpbHRlcihCb29sZWFuKS5qb2luKCcsJyk7XG5cbiAgICAgICAgY29udGV4dCA9IGRvY3VtZW50O1xuXG4gICAgfVxuXG4gICAgdHJ5IHtcblxuICAgICAgICByZXR1cm4gY29udGV4dFtxdWVyeUZuXShzZWxlY3Rvcik7XG5cbiAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICB9IGZpbmFsbHkge1xuXG4gICAgICAgIHJlbW92ZXMgJiYgcmVtb3Zlcy5mb3JFYWNoKHJlbW92ZSA9PiByZW1vdmUoKSk7XG5cbiAgICB9XG5cbn1cblxuY29uc3QgY29udGV4dFNlbGVjdG9yUmUgPSAvKF58W15cXFxcXSwpXFxzKlshPit+LV0vO1xuY29uc3QgY29udGV4dFNhbml0aXplUmUgPSAvKFshPit+LV0pKD89XFxzK1shPit+LV18XFxzKiQpL2c7XG5cbmZ1bmN0aW9uIGlzQ29udGV4dFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5tYXRjaChjb250ZXh0U2VsZWN0b3JSZSk7XG59XG5cbmNvbnN0IHNlbGVjdG9yUmUgPSAvLio/W15cXFxcXSg/Oix8JCkvZztcblxuZnVuY3Rpb24gc3BsaXRTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3Rvci5tYXRjaChzZWxlY3RvclJlKS5tYXAoc2VsZWN0b3IgPT4gc2VsZWN0b3IucmVwbGFjZSgvLCQvLCAnJykudHJpbSgpKTtcbn1cblxuY29uc3QgZWxQcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuY29uc3QgbWF0Y2hlc0ZuID0gZWxQcm90by5tYXRjaGVzIHx8IGVsUHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsUHJvdG8ubXNNYXRjaGVzU2VsZWN0b3I7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRvTm9kZXMoZWxlbWVudCkuc29tZShlbGVtZW50ID0+IG1hdGNoZXNGbi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKSk7XG59XG5cbmNvbnN0IGNsb3Nlc3RGbiA9IGVsUHJvdG8uY2xvc2VzdCB8fCBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICBsZXQgYW5jZXN0b3IgPSB0aGlzO1xuXG4gICAgZG8ge1xuXG4gICAgICAgIGlmIChtYXRjaGVzKGFuY2VzdG9yLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBhbmNlc3RvcjtcbiAgICAgICAgfVxuXG4gICAgfSB3aGlsZSAoKGFuY2VzdG9yID0gcGFyZW50KGFuY2VzdG9yKSkpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3Nlc3QoZWxlbWVudCwgc2VsZWN0b3IpIHtcblxuICAgIGlmIChzdGFydHNXaXRoKHNlbGVjdG9yLCAnPicpKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRWxlbWVudChlbGVtZW50KVxuICAgICAgICA/IGNsb3Nlc3RGbi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxuICAgICAgICA6IHRvTm9kZXMoZWxlbWVudCkubWFwKGVsZW1lbnQgPT4gY2xvc2VzdChlbGVtZW50LCBzZWxlY3RvcikpLmZpbHRlcihCb29sZWFuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcmVudChlbGVtZW50KSB7XG4gICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICByZXR1cm4gZWxlbWVudCAmJiBpc0VsZW1lbnQoZWxlbWVudC5wYXJlbnROb2RlKSAmJiBlbGVtZW50LnBhcmVudE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJlbnRzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXTtcblxuICAgIHdoaWxlICgoZWxlbWVudCA9IHBhcmVudChlbGVtZW50KSkpIHtcbiAgICAgICAgaWYgKCFzZWxlY3RvciB8fCBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW1lbnQgPyB0b05vZGVzKGVsZW1lbnQuY2hpbGRyZW4pIDogW107XG4gICAgcmV0dXJuIHNlbGVjdG9yID8gY2hpbGRyZW4uZmlsdGVyKGVsZW1lbnQgPT4gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3RvcikpIDogY2hpbGRyZW47XG59XG5cbmNvbnN0IGVzY2FwZUZuID0gd2luZG93LkNTUyAmJiBDU1MuZXNjYXBlIHx8IGZ1bmN0aW9uIChjc3MpIHsgcmV0dXJuIGNzcy5yZXBsYWNlKC8oW15cXHg3Zi1cXHVGRkZGXFx3LV0pL2csIG1hdGNoID0+IGBcXFxcJHttYXRjaH1gKTsgfTtcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUoY3NzKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKGNzcykgPyBlc2NhcGVGbi5jYWxsKG51bGwsIGNzcykgOiAnJztcbn1cbiIsImltcG9ydCB7Y2xvc2VzdCwgbWF0Y2hlc30gZnJvbSAnLi9zZWxlY3Rvcic7XG5pbXBvcnQge2lzRG9jdW1lbnQsIGlzU3RyaW5nLCB0b05vZGUsIHRvTm9kZXN9IGZyb20gJy4vbGFuZyc7XG5cbmNvbnN0IHZvaWRFbGVtZW50cyA9IHtcbiAgICBhcmVhOiB0cnVlLFxuICAgIGJhc2U6IHRydWUsXG4gICAgYnI6IHRydWUsXG4gICAgY29sOiB0cnVlLFxuICAgIGVtYmVkOiB0cnVlLFxuICAgIGhyOiB0cnVlLFxuICAgIGltZzogdHJ1ZSxcbiAgICBpbnB1dDogdHJ1ZSxcbiAgICBrZXlnZW46IHRydWUsXG4gICAgbGluazogdHJ1ZSxcbiAgICBtZW51aXRlbTogdHJ1ZSxcbiAgICBtZXRhOiB0cnVlLFxuICAgIHBhcmFtOiB0cnVlLFxuICAgIHNvdXJjZTogdHJ1ZSxcbiAgICB0cmFjazogdHJ1ZSxcbiAgICB3YnI6IHRydWVcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNWb2lkRWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIHRvTm9kZXMoZWxlbWVudCkuc29tZShlbGVtZW50ID0+IHZvaWRFbGVtZW50c1tlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWaXNpYmxlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5zb21lKGVsZW1lbnQgPT4gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCBlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGNvbnN0IHNlbElucHV0ID0gJ2lucHV0LHNlbGVjdCx0ZXh0YXJlYSxidXR0b24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5wdXQoZWxlbWVudCkge1xuICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLnNvbWUoZWxlbWVudCA9PiBtYXRjaGVzKGVsZW1lbnQsIHNlbElucHV0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdG9Ob2RlcyhlbGVtZW50KS5maWx0ZXIoZWxlbWVudCA9PiBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICA/IGVsZW1lbnQgPT09IHNlbGVjdG9yIHx8IChpc0RvY3VtZW50KHNlbGVjdG9yKVxuICAgICAgICAgICAgPyBzZWxlY3Rvci5kb2N1bWVudEVsZW1lbnRcbiAgICAgICAgICAgIDogdG9Ob2RlKHNlbGVjdG9yKSkuY29udGFpbnModG9Ob2RlKGVsZW1lbnQpKSAvLyBJRSAxMSBkb2N1bWVudCBkb2VzIG5vdCBpbXBsZW1lbnQgY29udGFpbnNcbiAgICAgICAgOiBtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB8fCBjbG9zZXN0KGVsZW1lbnQsIHNlbGVjdG9yKTtcbn1cbiIsImltcG9ydCB7aXNJRX0gZnJvbSAnLi9lbnYnO1xuaW1wb3J0IHt3aXRoaW59IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7Y2xvc2VzdCwgZmluZEFsbH0gZnJvbSAnLi9zZWxlY3Rvcic7XG5pbXBvcnQge2lzQXJyYXksIGlzQm9vbGVhbiwgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIHRvTm9kZSwgdG9Ob2Rlc30gZnJvbSAnLi9sYW5nJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9uKC4uLmFyZ3MpIHtcblxuICAgIGxldCBbdGFyZ2V0cywgdHlwZSwgc2VsZWN0b3IsIGxpc3RlbmVyLCB1c2VDYXB0dXJlXSA9IGdldEFyZ3MoYXJncyk7XG5cbiAgICB0YXJnZXRzID0gdG9FdmVudFRhcmdldHModGFyZ2V0cyk7XG5cbiAgICBpZiAobGlzdGVuZXIubGVuZ3RoID4gMSkge1xuICAgICAgICBsaXN0ZW5lciA9IGRldGFpbChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgaWYgKHVzZUNhcHR1cmUgJiYgdXNlQ2FwdHVyZS5zZWxmKSB7XG4gICAgICAgIGxpc3RlbmVyID0gc2VsZkZpbHRlcihsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGxpc3RlbmVyID0gZGVsZWdhdGUodGFyZ2V0cywgc2VsZWN0b3IsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICB1c2VDYXB0dXJlID0gdXNlQ2FwdHVyZUZpbHRlcih1c2VDYXB0dXJlKTtcblxuICAgIHR5cGUuc3BsaXQoJyAnKS5mb3JFYWNoKHR5cGUgPT5cbiAgICAgICAgdGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PlxuICAgICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpXG4gICAgICAgIClcbiAgICApO1xuICAgIHJldHVybiAoKSA9PiBvZmYodGFyZ2V0cywgdHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2ZmKHRhcmdldHMsIHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlID0gZmFsc2UpIHtcbiAgICB1c2VDYXB0dXJlID0gdXNlQ2FwdHVyZUZpbHRlcih1c2VDYXB0dXJlKTtcbiAgICB0YXJnZXRzID0gdG9FdmVudFRhcmdldHModGFyZ2V0cyk7XG4gICAgdHlwZS5zcGxpdCgnICcpLmZvckVhY2godHlwZSA9PlxuICAgICAgICB0YXJnZXRzLmZvckVhY2godGFyZ2V0ID0+XG4gICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSlcbiAgICAgICAgKVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbmNlKC4uLmFyZ3MpIHtcblxuICAgIGNvbnN0IFtlbGVtZW50LCB0eXBlLCBzZWxlY3RvciwgbGlzdGVuZXIsIHVzZUNhcHR1cmUsIGNvbmRpdGlvbl0gPSBnZXRBcmdzKGFyZ3MpO1xuICAgIGNvbnN0IG9mZiA9IG9uKGVsZW1lbnQsIHR5cGUsIHNlbGVjdG9yLCBlID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gIWNvbmRpdGlvbiB8fCBjb25kaXRpb24oZSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIG9mZigpO1xuICAgICAgICAgICAgbGlzdGVuZXIoZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0sIHVzZUNhcHR1cmUpO1xuXG4gICAgcmV0dXJuIG9mZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIodGFyZ2V0cywgZXZlbnQsIGRldGFpbCkge1xuICAgIHJldHVybiB0b0V2ZW50VGFyZ2V0cyh0YXJnZXRzKS5yZWR1Y2UoKG5vdENhbmNlbGVkLCB0YXJnZXQpID0+XG4gICAgICAgIG5vdENhbmNlbGVkICYmIHRhcmdldC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KGV2ZW50LCB0cnVlLCB0cnVlLCBkZXRhaWwpKVxuICAgICAgICAsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXZlbnQoZSwgYnViYmxlcyA9IHRydWUsIGNhbmNlbGFibGUgPSBmYWxzZSwgZGV0YWlsKSB7XG4gICAgaWYgKGlzU3RyaW5nKGUpKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7IC8vIElFIDExXG4gICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChlLCBidWJibGVzLCBjYW5jZWxhYmxlLCBkZXRhaWwpO1xuICAgICAgICBlID0gZXZlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGdldEFyZ3MoYXJncykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGFyZ3NbMl0pKSB7XG4gICAgICAgIGFyZ3Muc3BsaWNlKDIsIDAsIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIGRlbGVnYXRlKGRlbGVnYXRlcywgc2VsZWN0b3IsIGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIGUgPT4ge1xuXG4gICAgICAgIGRlbGVnYXRlcy5mb3JFYWNoKGRlbGVnYXRlID0+IHtcblxuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHNlbGVjdG9yWzBdID09PSAnPidcbiAgICAgICAgICAgICAgICA/IGZpbmRBbGwoc2VsZWN0b3IsIGRlbGVnYXRlKS5yZXZlcnNlKCkuZmlsdGVyKGVsZW1lbnQgPT4gd2l0aGluKGUudGFyZ2V0LCBlbGVtZW50KSlbMF1cbiAgICAgICAgICAgICAgICA6IGNsb3Nlc3QoZS50YXJnZXQsIHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBlLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgICAgICAgICAgZS5jdXJyZW50ID0gY3VycmVudDtcblxuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBkZXRhaWwobGlzdGVuZXIpIHtcbiAgICByZXR1cm4gZSA9PiBpc0FycmF5KGUuZGV0YWlsKSA/IGxpc3RlbmVyKC4uLltlXS5jb25jYXQoZS5kZXRhaWwpKSA6IGxpc3RlbmVyKGUpO1xufVxuXG5mdW5jdGlvbiBzZWxmRmlsdGVyKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8IGUudGFyZ2V0ID09PSBlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lci5jYWxsKG51bGwsIGUpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdXNlQ2FwdHVyZUZpbHRlcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgJiYgaXNJRSAmJiAhaXNCb29sZWFuKG9wdGlvbnMpXG4gICAgICAgID8gISFvcHRpb25zLmNhcHR1cmVcbiAgICAgICAgOiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQgJiYgJ2FkZEV2ZW50TGlzdGVuZXInIGluIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gdG9FdmVudFRhcmdldCh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNFdmVudFRhcmdldCh0YXJnZXQpID8gdGFyZ2V0IDogdG9Ob2RlKHRhcmdldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0V2ZW50VGFyZ2V0cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNBcnJheSh0YXJnZXQpXG4gICAgICAgICAgICA/IHRhcmdldC5tYXAodG9FdmVudFRhcmdldCkuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICA6IGlzU3RyaW5nKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IGZpbmRBbGwodGFyZ2V0KVxuICAgICAgICAgICAgICAgIDogaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8gW3RhcmdldF1cbiAgICAgICAgICAgICAgICAgICAgOiB0b05vZGVzKHRhcmdldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RvdWNoKGUpIHtcbiAgICByZXR1cm4gZS5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyB8fCAhIWUudG91Y2hlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50UG9zKGUsIHByb3AgPSAnY2xpZW50Jykge1xuICAgIGNvbnN0IHt0b3VjaGVzLCBjaGFuZ2VkVG91Y2hlc30gPSBlO1xuICAgIGNvbnN0IHtbYCR7cHJvcH1YYF06IHgsIFtgJHtwcm9wfVlgXTogeX0gPSB0b3VjaGVzICYmIHRvdWNoZXNbMF0gfHwgY2hhbmdlZFRvdWNoZXMgJiYgY2hhbmdlZFRvdWNoZXNbMF0gfHwgZTtcblxuICAgIHJldHVybiB7eCwgeX07XG59XG4iLCIvKiBnbG9iYWwgc2V0SW1tZWRpYXRlICovXG5pbXBvcnQge2lzRnVuY3Rpb24sIGlzT2JqZWN0fSBmcm9tICcuL2xhbmcnO1xuXG5leHBvcnQgY29uc3QgUHJvbWlzZSA9ICdQcm9taXNlJyBpbiB3aW5kb3cgPyB3aW5kb3cuUHJvbWlzZSA6IFByb21pc2VGbjtcblxuZXhwb3J0IGNsYXNzIERlZmVycmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8qKlxuICogUHJvbWlzZXMvQSsgcG9seWZpbGwgdjEuMS40IChodHRwczovL2dpdGh1Yi5jb20vYnJhbXN0ZWluL3Byb21pcylcbiAqL1xuXG5jb25zdCBSRVNPTFZFRCA9IDA7XG5jb25zdCBSRUpFQ1RFRCA9IDE7XG5jb25zdCBQRU5ESU5HID0gMjtcblxuY29uc3QgYXN5bmMgPSAnc2V0SW1tZWRpYXRlJyBpbiB3aW5kb3cgPyBzZXRJbW1lZGlhdGUgOiBzZXRUaW1lb3V0O1xuXG5mdW5jdGlvbiBQcm9taXNlRm4oZXhlY3V0b3IpIHtcblxuICAgIHRoaXMuc3RhdGUgPSBQRU5ESU5HO1xuICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kZWZlcnJlZCA9IFtdO1xuXG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICB0cnkge1xuICAgICAgICBleGVjdXRvcihcbiAgICAgICAgICAgIHggPT4ge1xuICAgICAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZSh4KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByID0+IHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnJlamVjdChyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgIH1cbn1cblxuUHJvbWlzZUZuLnJlamVjdCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZWplY3Qocik7XG4gICAgfSk7XG59O1xuXG5Qcm9taXNlRm4ucmVzb2x2ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlKHgpO1xuICAgIH0pO1xufTtcblxuUHJvbWlzZUZuLmFsbCA9IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZUZuKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgaWYgKGl0ZXJhYmxlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZXIoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0geDtcbiAgICAgICAgICAgICAgICBjb3VudCArPSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBQcm9taXNlRm4ucmVzb2x2ZShpdGVyYWJsZVtpXSkudGhlbihyZXNvbHZlcihpKSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuUHJvbWlzZUZuLnJhY2UgPSBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlRm4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBQcm9taXNlRm4ucmVzb2x2ZShpdGVyYWJsZVtpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5jb25zdCBwID0gUHJvbWlzZUZuLnByb3RvdHlwZTtcblxucC5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICBpZiAocHJvbWlzZS5zdGF0ZSA9PT0gUEVORElORykge1xuICAgICAgICBpZiAoeCA9PT0gcHJvbWlzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZSBzZXR0bGVkIHdpdGggaXRzZWxmLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0aGVuID0geCAmJiB4LnRoZW47XG5cbiAgICAgICAgICAgIGlmICh4ICE9PSBudWxsICYmIGlzT2JqZWN0KHgpICYmIGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICAgICAgICB0aGVuLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgIHggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcm9taXNlLnN0YXRlID0gUkVTT0xWRUQ7XG4gICAgICAgIHByb21pc2UudmFsdWUgPSB4O1xuICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgIH1cbn07XG5cbnAucmVqZWN0ID0gZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzO1xuXG4gICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgaWYgKHJlYXNvbiA9PT0gcHJvbWlzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZSBzZXR0bGVkIHdpdGggaXRzZWxmLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvbWlzZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICAgICAgICBwcm9taXNlLnZhbHVlID0gcmVhc29uO1xuICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgIH1cbn07XG5cbnAubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgIGFzeW5jKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLmRlZmVycmVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtvblJlc29sdmVkLCBvblJlamVjdGVkLCByZXNvbHZlLCByZWplY3RdID0gdGhpcy5kZWZlcnJlZC5zaGlmdCgpO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFJFU09MVkVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblJlc29sdmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZXNvbHZlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcy52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblJlamVjdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob25SZWplY3RlZC5jYWxsKHVuZGVmaW5lZCwgdGhpcy52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbnAudGhlbiA9IGZ1bmN0aW9uIHRoZW4ob25SZXNvbHZlZCwgb25SZWplY3RlZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZUZuKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5kZWZlcnJlZC5wdXNoKFtvblJlc29sdmVkLCBvblJlamVjdGVkLCByZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoKTtcbiAgICB9KTtcbn07XG5cbnAuY2F0Y2ggPSBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbn07XG4iLCJpbXBvcnQge29ufSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7UHJvbWlzZX0gZnJvbSAnLi9wcm9taXNlJztcbmltcG9ydCB7YXNzaWduLCBub29wfSBmcm9tICcuL2xhbmcnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWpheCh1cmwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IGVudiA9IGFzc2lnbih7XG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICAgICAgeGhyOiBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IG5vb3AsXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICcnXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGVudi5iZWZvcmVTZW5kKGVudik7XG5cbiAgICAgICAgY29uc3Qge3hocn0gPSBlbnY7XG5cbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIGVudikge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4geGhyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgICAgICAgICB4aHJbcHJvcF0gPSBlbnZbcHJvcF07XG5cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgeGhyLm9wZW4oZW52Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwpO1xuXG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyIGluIGVudi5oZWFkZXJzKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIGVudi5oZWFkZXJzW2hlYWRlcl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb24oeGhyLCAnbG9hZCcsICgpID0+IHtcblxuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDAgfHwgeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCB8fCB4aHIuc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHhocik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlamVjdChhc3NpZ24oRXJyb3IoeGhyLnN0YXR1c1RleHQpLCB7XG4gICAgICAgICAgICAgICAgICAgIHhocixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9uKHhociwgJ2Vycm9yJywgKCkgPT4gcmVqZWN0KGFzc2lnbihFcnJvcignTmV0d29yayBFcnJvcicpLCB7eGhyfSkpKTtcbiAgICAgICAgb24oeGhyLCAndGltZW91dCcsICgpID0+IHJlamVjdChhc3NpZ24oRXJyb3IoJ05ldHdvcmsgVGltZW91dCcpLCB7eGhyfSkpKTtcblxuICAgICAgICB4aHIuc2VuZChlbnYuZGF0YSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbWFnZShzcmMsIHNyY3NldCwgc2l6ZXMpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgIGltZy5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWcpO1xuXG4gICAgICAgIHNpemVzICYmIChpbWcuc2l6ZXMgPSBzaXplcyk7XG4gICAgICAgIHNyY3NldCAmJiAoaW1nLnNyY3NldCA9IHNyY3NldCk7XG4gICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgfSk7XG5cbn1cbiIsImltcG9ydCB7b259IGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IHtjaGlsZHJlbiwgZmluZCwgZmluZEFsbCwgcGFyZW50fSBmcm9tICcuL3NlbGVjdG9yJztcbmltcG9ydCB7Y2xhbXAsIGlzRWxlbWVudCwgaXNOdW1lcmljLCBpc1N0cmluZywgaXNVbmRlZmluZWQsIHRvTm9kZSwgdG9Ob2RlcywgdG9OdW1iZXJ9IGZyb20gJy4vbGFuZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkeShmbikge1xuXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgICAgICBmbigpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdW5iaW5kID0gb24oZG9jdW1lbnQsICdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJpbmQoKTtcbiAgICAgICAgZm4oKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4KGVsZW1lbnQsIHJlZikge1xuICAgIHJldHVybiByZWZcbiAgICAgICAgPyB0b05vZGVzKGVsZW1lbnQpLmluZGV4T2YodG9Ob2RlKHJlZikpXG4gICAgICAgIDogY2hpbGRyZW4ocGFyZW50KGVsZW1lbnQpKS5pbmRleE9mKGVsZW1lbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5kZXgoaSwgZWxlbWVudHMsIGN1cnJlbnQgPSAwLCBmaW5pdGUgPSBmYWxzZSkge1xuXG4gICAgZWxlbWVudHMgPSB0b05vZGVzKGVsZW1lbnRzKTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gZWxlbWVudHM7XG5cbiAgICBpID0gaXNOdW1lcmljKGkpXG4gICAgICAgID8gdG9OdW1iZXIoaSlcbiAgICAgICAgOiBpID09PSAnbmV4dCdcbiAgICAgICAgICAgID8gY3VycmVudCArIDFcbiAgICAgICAgICAgIDogaSA9PT0gJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgID8gY3VycmVudCAtIDFcbiAgICAgICAgICAgICAgICA6IGluZGV4KGVsZW1lbnRzLCBpKTtcblxuICAgIGlmIChmaW5pdGUpIHtcbiAgICAgICAgcmV0dXJuIGNsYW1wKGksIDAsIGxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIGkgJT0gbGVuZ3RoO1xuXG4gICAgcmV0dXJuIGkgPCAwID8gaSArIGxlbmd0aCA6IGk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShlbGVtZW50KSB7XG4gICAgZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICByZXR1cm4gZWxlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh0bWwocGFyZW50LCBodG1sKSB7XG4gICAgcGFyZW50ID0gJChwYXJlbnQpO1xuICAgIHJldHVybiBpc1VuZGVmaW5lZChodG1sKVxuICAgICAgICA/IHBhcmVudC5pbm5lckhUTUxcbiAgICAgICAgOiBhcHBlbmQocGFyZW50Lmhhc0NoaWxkTm9kZXMoKSA/IGVtcHR5KHBhcmVudCkgOiBwYXJlbnQsIGh0bWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGVuZChwYXJlbnQsIGVsZW1lbnQpIHtcblxuICAgIHBhcmVudCA9ICQocGFyZW50KTtcblxuICAgIGlmICghcGFyZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICByZXR1cm4gYXBwZW5kKHBhcmVudCwgZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGVsZW1lbnQgPT4gcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBwYXJlbnQuZmlyc3RDaGlsZCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZChwYXJlbnQsIGVsZW1lbnQpIHtcbiAgICBwYXJlbnQgPSAkKHBhcmVudCk7XG4gICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGVsZW1lbnQgPT4gcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJlZm9yZShyZWYsIGVsZW1lbnQpIHtcbiAgICByZWYgPSAkKHJlZik7XG4gICAgcmV0dXJuIGluc2VydE5vZGVzKGVsZW1lbnQsIGVsZW1lbnQgPT4gcmVmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHJlZikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWZ0ZXIocmVmLCBlbGVtZW50KSB7XG4gICAgcmVmID0gJChyZWYpO1xuICAgIHJldHVybiBpbnNlcnROb2RlcyhlbGVtZW50LCBlbGVtZW50ID0+IHJlZi5uZXh0U2libGluZ1xuICAgICAgICA/IGJlZm9yZShyZWYubmV4dFNpYmxpbmcsIGVsZW1lbnQpXG4gICAgICAgIDogYXBwZW5kKHJlZi5wYXJlbnROb2RlLCBlbGVtZW50KVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGluc2VydE5vZGVzKGVsZW1lbnQsIGZuKSB7XG4gICAgZWxlbWVudCA9IGlzU3RyaW5nKGVsZW1lbnQpID8gZnJhZ21lbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgID8gJ2xlbmd0aCcgaW4gZWxlbWVudFxuICAgICAgICAgICAgPyB0b05vZGVzKGVsZW1lbnQpLm1hcChmbilcbiAgICAgICAgICAgIDogZm4oZWxlbWVudClcbiAgICAgICAgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICB0b05vZGVzKGVsZW1lbnQpLm1hcChlbGVtZW50ID0+IGVsZW1lbnQucGFyZW50Tm9kZSAmJiBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcEFsbChlbGVtZW50LCBzdHJ1Y3R1cmUpIHtcblxuICAgIHN0cnVjdHVyZSA9IHRvTm9kZShiZWZvcmUoZWxlbWVudCwgc3RydWN0dXJlKSk7XG5cbiAgICB3aGlsZSAoc3RydWN0dXJlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgc3RydWN0dXJlID0gc3RydWN0dXJlLmZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgYXBwZW5kKHN0cnVjdHVyZSwgZWxlbWVudCk7XG5cbiAgICByZXR1cm4gc3RydWN0dXJlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcElubmVyKGVsZW1lbnQsIHN0cnVjdHVyZSkge1xuICAgIHJldHVybiB0b05vZGVzKHRvTm9kZXMoZWxlbWVudCkubWFwKGVsZW1lbnQgPT5cbiAgICAgICAgZWxlbWVudC5oYXNDaGlsZE5vZGVzID8gd3JhcEFsbCh0b05vZGVzKGVsZW1lbnQuY2hpbGROb2RlcyksIHN0cnVjdHVyZSkgOiBhcHBlbmQoZWxlbWVudCwgc3RydWN0dXJlKVxuICAgICkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwKGVsZW1lbnQpIHtcbiAgICB0b05vZGVzKGVsZW1lbnQpXG4gICAgICAgIC5tYXAocGFyZW50KVxuICAgICAgICAuZmlsdGVyKCh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4KVxuICAgICAgICAuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgICAgICAgYmVmb3JlKHBhcmVudCwgcGFyZW50LmNoaWxkTm9kZXMpO1xuICAgICAgICAgICAgcmVtb3ZlKHBhcmVudCk7XG4gICAgICAgIH0pO1xufVxuXG5jb25zdCBmcmFnbWVudFJlID0gL15cXHMqPChcXHcrfCEpW14+XSo+LztcbmNvbnN0IHNpbmdsZVRhZ1JlID0gL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT4pPyQvO1xuXG5leHBvcnQgZnVuY3Rpb24gZnJhZ21lbnQoaHRtbCkge1xuXG4gICAgY29uc3QgbWF0Y2hlcyA9IHNpbmdsZVRhZ1JlLmV4ZWMoaHRtbCk7XG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobWF0Y2hlc1sxXSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgaWYgKGZyYWdtZW50UmUudGVzdChodG1sKSkge1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sLnRyaW0oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29udGFpbmVyLnRleHRDb250ZW50ID0gaHRtbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID4gMSA/IHRvTm9kZXMoY29udGFpbmVyLmNoaWxkTm9kZXMpIDogY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KG5vZGUsIGZuKSB7XG5cbiAgICBpZiAoIWlzRWxlbWVudChub2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm4obm9kZSk7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBhcHBseShub2RlLCBmbik7XG4gICAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICA/IHRvTm9kZShzZWxlY3RvcilcbiAgICAgICAgOiBpc0h0bWwoc2VsZWN0b3IpXG4gICAgICAgICAgICA/IHRvTm9kZShmcmFnbWVudChzZWxlY3RvcikpXG4gICAgICAgICAgICA6IGZpbmQoc2VsZWN0b3IsIGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gJCQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gIWlzU3RyaW5nKHNlbGVjdG9yKVxuICAgICAgICA/IHRvTm9kZXMoc2VsZWN0b3IpXG4gICAgICAgIDogaXNIdG1sKHNlbGVjdG9yKVxuICAgICAgICAgICAgPyB0b05vZGVzKGZyYWdtZW50KHNlbGVjdG9yKSlcbiAgICAgICAgICAgIDogZmluZEFsbChzZWxlY3RvciwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIGlzSHRtbChzdHIpIHtcbiAgICByZXR1cm4gc3RyWzBdID09PSAnPCcgfHwgc3RyLm1hdGNoKC9eXFxzKjwvKTtcbn1cbiIsImltcG9ydCB7YXR0cn0gZnJvbSAnLi9hdHRyJztcbmltcG9ydCB7aGFzT3duLCBpbmNsdWRlcywgaXNTdHJpbmcsIGlzVW5kZWZpbmVkLCBsYXN0LCB0b05vZGVzfSBmcm9tICcuL2xhbmcnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgLi4uYXJncykge1xuICAgIGFwcGx5KGVsZW1lbnQsIGFyZ3MsICdhZGQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIC4uLmFyZ3MpIHtcbiAgICBhcHBseShlbGVtZW50LCBhcmdzLCAncmVtb3ZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGVsZW1lbnQsIGNscykge1xuICAgIGF0dHIoZWxlbWVudCwgJ2NsYXNzJywgdmFsdWUgPT4gKHZhbHVlIHx8ICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoYFxcXFxiJHtjbHN9XFxcXGJgLCAnZycpLCAnJykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUNsYXNzKGVsZW1lbnQsIC4uLmFyZ3MpIHtcbiAgICBhcmdzWzBdICYmIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGFyZ3NbMF0pO1xuICAgIGFyZ3NbMV0gJiYgYWRkQ2xhc3MoZWxlbWVudCwgYXJnc1sxXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbHMpIHtcbiAgICByZXR1cm4gY2xzICYmIHRvTm9kZXMoZWxlbWVudCkuc29tZShlbGVtZW50ID0+IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNscy5zcGxpdCgnICcpWzBdKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbGVtZW50LCAuLi5hcmdzKSB7XG5cbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhcmdzID0gZ2V0QXJncyhhcmdzKTtcblxuICAgIGNvbnN0IGZvcmNlID0gIWlzU3RyaW5nKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IFtdOyAvLyBpbiBpT1MgOS4zIGZvcmNlID09PSB1bmRlZmluZWQgZXZhbHVhdGVzIHRvIGZhbHNlXG5cbiAgICBhcmdzID0gYXJncy5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICB0b05vZGVzKGVsZW1lbnQpLmZvckVhY2goKHtjbGFzc0xpc3R9KSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3VwcG9ydHMuRm9yY2VcbiAgICAgICAgICAgICAgICA/IGNsYXNzTGlzdC50b2dnbGUoLi4uW2FyZ3NbaV1dLmNvbmNhdChmb3JjZSkpXG4gICAgICAgICAgICAgICAgOiAoY2xhc3NMaXN0WyghaXNVbmRlZmluZWQoZm9yY2UpID8gZm9yY2UgOiAhY2xhc3NMaXN0LmNvbnRhaW5zKGFyZ3NbaV0pKSA/ICdhZGQnIDogJ3JlbW92ZSddKGFyZ3NbaV0pKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIGFwcGx5KGVsZW1lbnQsIGFyZ3MsIGZuKSB7XG4gICAgYXJncyA9IGdldEFyZ3MoYXJncykuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgYXJncy5sZW5ndGggJiYgdG9Ob2RlcyhlbGVtZW50KS5mb3JFYWNoKCh7Y2xhc3NMaXN0fSkgPT4ge1xuICAgICAgICBzdXBwb3J0cy5NdWx0aXBsZVxuICAgICAgICAgICAgPyBjbGFzc0xpc3RbZm5dKC4uLmFyZ3MpXG4gICAgICAgICAgICA6IGFyZ3MuZm9yRWFjaChjbHMgPT4gY2xhc3NMaXN0W2ZuXShjbHMpKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QXJncyhhcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3MucmVkdWNlKChhcmdzLCBhcmcpID0+XG4gICAgICAgIGFyZ3MuY29uY2F0LmNhbGwoYXJncywgaXNTdHJpbmcoYXJnKSAmJiBpbmNsdWRlcyhhcmcsICcgJykgPyBhcmcudHJpbSgpLnNwbGl0KCcgJykgOiBhcmcpXG4gICAgICAgICwgW10pO1xufVxuXG4vLyBJRSAxMVxuY29uc3Qgc3VwcG9ydHMgPSB7XG5cbiAgICBnZXQgTXVsdGlwbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnX211bHRpcGxlJyk7XG4gICAgfSxcblxuICAgIGdldCBGb3JjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdfZm9yY2UnKTtcbiAgICB9LFxuXG4gICAgZ2V0KGtleSkge1xuXG4gICAgICAgIGlmICghaGFzT3duKHRoaXMsIGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHtjbGFzc0xpc3R9ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnXycpO1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgnYScsICdiJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QudG9nZ2xlKCdjJywgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5fbXVsdGlwbGUgPSBjbGFzc0xpc3QuY29udGFpbnMoJ2InKTtcbiAgICAgICAgICAgIHRoaXMuX2ZvcmNlID0gIWNsYXNzTGlzdC5jb250YWlucygnYycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNba2V5XTtcbiAgICB9XG5cbn07XG4iLCJpbXBvcnQge2lzSUV9IGZyb20gJy4vZW52JztcbmltcG9ydCB7YXBwZW5kLCByZW1vdmV9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7YWRkQ2xhc3N9IGZyb20gJy4vY2xhc3MnO1xuaW1wb3J0IHtlYWNoLCBoeXBoZW5hdGUsIGlzQXJyYXksIGlzTnVtYmVyLCBpc051bWVyaWMsIGlzT2JqZWN0LCBpc1N0cmluZywgaXNVbmRlZmluZWQsIHRvTm9kZSwgdG9Ob2Rlc30gZnJvbSAnLi9sYW5nJztcblxuY29uc3QgY3NzTnVtYmVyID0ge1xuICAgICdhbmltYXRpb24taXRlcmF0aW9uLWNvdW50JzogdHJ1ZSxcbiAgICAnY29sdW1uLWNvdW50JzogdHJ1ZSxcbiAgICAnZmlsbC1vcGFjaXR5JzogdHJ1ZSxcbiAgICAnZmxleC1ncm93JzogdHJ1ZSxcbiAgICAnZmxleC1zaHJpbmsnOiB0cnVlLFxuICAgICdmb250LXdlaWdodCc6IHRydWUsXG4gICAgJ2xpbmUtaGVpZ2h0JzogdHJ1ZSxcbiAgICAnb3BhY2l0eSc6IHRydWUsXG4gICAgJ29yZGVyJzogdHJ1ZSxcbiAgICAnb3JwaGFucyc6IHRydWUsXG4gICAgJ3N0cm9rZS1kYXNoYXJyYXknOiB0cnVlLFxuICAgICdzdHJva2UtZGFzaG9mZnNldCc6IHRydWUsXG4gICAgJ3dpZG93cyc6IHRydWUsXG4gICAgJ3otaW5kZXgnOiB0cnVlLFxuICAgICd6b29tJzogdHJ1ZVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNzcyhlbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUpIHtcblxuICAgIHJldHVybiB0b05vZGVzKGVsZW1lbnQpLm1hcChlbGVtZW50ID0+IHtcblxuICAgICAgICBpZiAoaXNTdHJpbmcocHJvcGVydHkpKSB7XG5cbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcE5hbWUocHJvcGVydHkpO1xuXG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmICFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wZXJ0eV0gPSBpc051bWVyaWModmFsdWUpICYmICFjc3NOdW1iZXJbcHJvcGVydHldID8gYCR7dmFsdWV9cHhgIDogdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHByb3BlcnR5KSkge1xuXG4gICAgICAgICAgICBjb25zdCBzdHlsZXMgPSBnZXRTdHlsZXMoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5yZWR1Y2UoKHByb3BzLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3BzW3Byb3BlcnR5XSA9IHN0eWxlc1twcm9wTmFtZShwcm9wZXJ0eSldO1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgIH0sIHt9KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgZWFjaChwcm9wZXJ0eSwgKHZhbHVlLCBwcm9wZXJ0eSkgPT4gY3NzKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG5cbiAgICB9KVswXTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVzKGVsZW1lbnQsIHBzZXVkb0VsdCkge1xuICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG4gICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHBzZXVkb0VsdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSwgcHNldWRvRWx0KSB7XG4gICAgcmV0dXJuIGdldFN0eWxlcyhlbGVtZW50LCBwc2V1ZG9FbHQpW3Byb3BlcnR5XTtcbn1cblxuY29uc3QgdmFycyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3NzVmFyKG5hbWUpIHtcblxuICAgIGNvbnN0IGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgaWYgKCFpc0lFKSB7XG4gICAgICAgIHJldHVybiBnZXRTdHlsZXMoZG9jRWwpLmdldFByb3BlcnR5VmFsdWUoYC0tdWstJHtuYW1lfWApO1xuICAgIH1cblxuICAgIGlmICghKG5hbWUgaW4gdmFycykpIHtcblxuICAgICAgICAvKiB1c2FnZSBpbiBjc3M6IC51ay1uYW1lOmJlZm9yZSB7IGNvbnRlbnQ6XCJ4eXpcIiB9ICovXG5cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGFwcGVuZChkb2NFbCwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGB1ay0ke25hbWV9YCk7XG5cbiAgICAgICAgdmFyc1tuYW1lXSA9IGdldFN0eWxlKGVsZW1lbnQsICdjb250ZW50JywgJzpiZWZvcmUnKS5yZXBsYWNlKC9eW1wiJ10oLiopW1wiJ10kLywgJyQxJyk7XG5cbiAgICAgICAgcmVtb3ZlKGVsZW1lbnQpO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbbmFtZV07XG5cbn1cblxuY29uc3QgY3NzUHJvcHMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3BOYW1lKG5hbWUpIHtcblxuICAgIGxldCByZXQgPSBjc3NQcm9wc1tuYW1lXTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgICByZXQgPSBjc3NQcm9wc1tuYW1lXSA9IHZlbmRvclByb3BOYW1lKG5hbWUpIHx8IG5hbWU7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmNvbnN0IGNzc1ByZWZpeGVzID0gWyd3ZWJraXQnLCAnbW96JywgJ21zJ107XG5cbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKG5hbWUpIHtcblxuICAgIG5hbWUgPSBoeXBoZW5hdGUobmFtZSk7XG5cbiAgICBjb25zdCB7c3R5bGV9ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgaWYgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgbGV0IGkgPSBjc3NQcmVmaXhlcy5sZW5ndGgsIHByZWZpeGVkTmFtZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHJlZml4ZWROYW1lID0gYC0ke2Nzc1ByZWZpeGVzW2ldfS0ke25hbWV9YDtcbiAgICAgICAgaWYgKHByZWZpeGVkTmFtZSBpbiBzdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHByZWZpeGVkTmFtZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7YXR0cn0gZnJvbSAnLi9hdHRyJztcbmltcG9ydCB7UHJvbWlzZX0gZnJvbSAnLi9wcm9taXNlJztcbmltcG9ydCB7b25jZSwgdHJpZ2dlcn0gZnJvbSAnLi9ldmVudCc7XG5pbXBvcnQge2NzcywgcHJvcE5hbWV9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IHthc3NpZ24sIHN0YXJ0c1dpdGgsIHRvTm9kZXN9IGZyb20gJy4vbGFuZyc7XG5pbXBvcnQge2FkZENsYXNzLCBoYXNDbGFzcywgcmVtb3ZlQ2xhc3MsIHJlbW92ZUNsYXNzZXN9IGZyb20gJy4vY2xhc3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNpdGlvbihlbGVtZW50LCBwcm9wcywgZHVyYXRpb24gPSA0MDAsIHRpbWluZyA9ICdsaW5lYXInKSB7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodG9Ob2RlcyhlbGVtZW50KS5tYXAoZWxlbWVudCA9PlxuICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3NzKGVsZW1lbnQsIG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0cmlnZ2VyKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kJyksIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgb25jZShlbGVtZW50LCAndHJhbnNpdGlvbmVuZCB0cmFuc2l0aW9uY2FuY2VsZWQnLCAoe3R5cGV9KSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCAndWstdHJhbnNpdGlvbicpO1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogJycsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0eXBlID09PSAndHJhbnNpdGlvbmNhbmNlbGVkJyA/IHJlamVjdCgpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwge3NlbGY6IHRydWV9KTtcblxuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgJ3VrLXRyYW5zaXRpb24nKTtcbiAgICAgICAgICAgIGNzcyhlbGVtZW50LCBhc3NpZ24oe1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogT2JqZWN0LmtleXMocHJvcHMpLm1hcChwcm9wTmFtZSkuam9pbignLCcpLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogYCR7ZHVyYXRpb259bXNgLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogdGltaW5nXG4gICAgICAgICAgICB9LCBwcm9wcykpO1xuXG4gICAgICAgIH0pXG4gICAgKSk7XG5cbn1cblxuZXhwb3J0IGNvbnN0IFRyYW5zaXRpb24gPSB7XG5cbiAgICBzdGFydDogdHJhbnNpdGlvbixcblxuICAgIHN0b3AoZWxlbWVudCkge1xuICAgICAgICB0cmlnZ2VyKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kJyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9LFxuXG4gICAgY2FuY2VsKGVsZW1lbnQpIHtcbiAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAndHJhbnNpdGlvbmNhbmNlbGVkJyk7XG4gICAgfSxcblxuICAgIGluUHJvZ3Jlc3MoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaGFzQ2xhc3MoZWxlbWVudCwgJ3VrLXRyYW5zaXRpb24nKTtcbiAgICB9XG5cbn07XG5cbmNvbnN0IGFuaW1hdGlvblByZWZpeCA9ICd1ay1hbmltYXRpb24tJztcbmNvbnN0IGNsc0NhbmNlbEFuaW1hdGlvbiA9ICd1ay1jYW5jZWwtYW5pbWF0aW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFuaW1hdGUoZWxlbWVudCwgYW5pbWF0aW9uLCBkdXJhdGlvbiA9IDIwMCwgb3JpZ2luLCBvdXQpIHtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbCh0b05vZGVzKGVsZW1lbnQpLm1hcChlbGVtZW50ID0+XG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgaWYgKGhhc0NsYXNzKGVsZW1lbnQsIGNsc0NhbmNlbEFuaW1hdGlvbikpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZSguLi5hcmd1bWVudHMpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjbHMgPSBgJHthbmltYXRpb259ICR7YW5pbWF0aW9uUHJlZml4fSR7b3V0ID8gJ2xlYXZlJyA6ICdlbnRlcid9YDtcblxuICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGgoYW5pbWF0aW9uLCBhbmltYXRpb25QcmVmaXgpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgIGNscyArPSBgIHVrLXRyYW5zZm9ybS1vcmlnaW4tJHtvcmlnaW59YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNscyArPSBgICR7YW5pbWF0aW9uUHJlZml4fXJldmVyc2VgO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXNldCgpO1xuXG4gICAgICAgICAgICBvbmNlKGVsZW1lbnQsICdhbmltYXRpb25lbmQgYW5pbWF0aW9uY2FuY2VsJywgKHt0eXBlfSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IGhhc1Jlc2V0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2FuaW1hdGlvbmNhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Jlc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzUmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsc0NhbmNlbEFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbHNDYW5jZWxBbmltYXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCB7c2VsZjogdHJ1ZX0pO1xuXG4gICAgICAgICAgICBjc3MoZWxlbWVudCwgJ2FuaW1hdGlvbkR1cmF0aW9uJywgYCR7ZHVyYXRpb259bXNgKTtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNscyk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICAgICAgICAgIGNzcyhlbGVtZW50LCAnYW5pbWF0aW9uRHVyYXRpb24nLCAnJyk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhlbGVtZW50LCBgJHthbmltYXRpb25QcmVmaXh9XFxcXFMqYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSlcbiAgICApKTtcblxufVxuXG5jb25zdCBpblByb2dyZXNzID0gbmV3IFJlZ0V4cChgJHthbmltYXRpb25QcmVmaXh9KGVudGVyfGxlYXZlKWApO1xuZXhwb3J0IGNvbnN0IEFuaW1hdGlvbiA9IHtcblxuICAgIGluKGVsZW1lbnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIG9yaWdpbikge1xuICAgICAgICByZXR1cm4gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgb3V0KGVsZW1lbnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIG9yaWdpbikge1xuICAgICAgICByZXR1cm4gYW5pbWF0ZShlbGVtZW50LCBhbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIHRydWUpO1xuICAgIH0sXG5cbiAgICBpblByb2dyZXNzKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGluUHJvZ3Jlc3MudGVzdChhdHRyKGVsZW1lbnQsICdjbGFzcycpKTtcbiAgICB9LFxuXG4gICAgY2FuY2VsKGVsZW1lbnQpIHtcbiAgICAgICAgdHJpZ2dlcihlbGVtZW50LCAnYW5pbWF0aW9uY2FuY2VsJyk7XG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IHtjc3N9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IHthdHRyfSBmcm9tICcuL2F0dHInO1xuaW1wb3J0IHtpc1Zpc2libGV9IGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7ZWFjaCwgZW5kc1dpdGgsIGluY2x1ZGVzLCBpc0RvY3VtZW50LCBpc051bWVyaWMsIGlzVW5kZWZpbmVkLCBpc1dpbmRvdywgdG9GbG9hdCwgdG9Ob2RlLCB0b1dpbmRvdywgdWNmaXJzdH0gZnJvbSAnLi9sYW5nJztcblxuY29uc3QgZGlycyA9IHtcbiAgICB3aWR0aDogWyd4JywgJ2xlZnQnLCAncmlnaHQnXSxcbiAgICBoZWlnaHQ6IFsneScsICd0b3AnLCAnYm90dG9tJ11cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3NpdGlvbkF0KGVsZW1lbnQsIHRhcmdldCwgZWxBdHRhY2gsIHRhcmdldEF0dGFjaCwgZWxPZmZzZXQsIHRhcmdldE9mZnNldCwgZmxpcCwgYm91bmRhcnkpIHtcblxuICAgIGVsQXR0YWNoID0gZ2V0UG9zKGVsQXR0YWNoKTtcbiAgICB0YXJnZXRBdHRhY2ggPSBnZXRQb3ModGFyZ2V0QXR0YWNoKTtcblxuICAgIGNvbnN0IGZsaXBwZWQgPSB7ZWxlbWVudDogZWxBdHRhY2gsIHRhcmdldDogdGFyZ2V0QXR0YWNofTtcblxuICAgIGlmICghZWxlbWVudCB8fCAhdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBmbGlwcGVkO1xuICAgIH1cblxuICAgIGNvbnN0IGRpbSA9IGdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgY29uc3QgdGFyZ2V0RGltID0gZ2V0RGltZW5zaW9ucyh0YXJnZXQpO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGFyZ2V0RGltO1xuXG4gICAgbW92ZVRvKHBvc2l0aW9uLCBlbEF0dGFjaCwgZGltLCAtMSk7XG4gICAgbW92ZVRvKHBvc2l0aW9uLCB0YXJnZXRBdHRhY2gsIHRhcmdldERpbSwgMSk7XG5cbiAgICBlbE9mZnNldCA9IGdldE9mZnNldHMoZWxPZmZzZXQsIGRpbS53aWR0aCwgZGltLmhlaWdodCk7XG4gICAgdGFyZ2V0T2Zmc2V0ID0gZ2V0T2Zmc2V0cyh0YXJnZXRPZmZzZXQsIHRhcmdldERpbS53aWR0aCwgdGFyZ2V0RGltLmhlaWdodCk7XG5cbiAgICBlbE9mZnNldFsneCddICs9IHRhcmdldE9mZnNldFsneCddO1xuICAgIGVsT2Zmc2V0Wyd5J10gKz0gdGFyZ2V0T2Zmc2V0Wyd5J107XG5cbiAgICBwb3NpdGlvbi5sZWZ0ICs9IGVsT2Zmc2V0Wyd4J107XG4gICAgcG9zaXRpb24udG9wICs9IGVsT2Zmc2V0Wyd5J107XG5cbiAgICBpZiAoZmxpcCkge1xuXG4gICAgICAgIGNvbnN0IGJvdW5kYXJpZXMgPSBbZ2V0RGltZW5zaW9ucyh0b1dpbmRvdyhlbGVtZW50KSldO1xuXG4gICAgICAgIGlmIChib3VuZGFyeSkge1xuICAgICAgICAgICAgYm91bmRhcmllcy51bnNoaWZ0KGdldERpbWVuc2lvbnMoYm91bmRhcnkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVhY2goZGlycywgKFtkaXIsIGFsaWduLCBhbGlnbkZsaXBdLCBwcm9wKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICghKGZsaXAgPT09IHRydWUgfHwgaW5jbHVkZXMoZmxpcCwgZGlyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvdW5kYXJpZXMuc29tZShib3VuZGFyeSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtT2Zmc2V0ID0gZWxBdHRhY2hbZGlyXSA9PT0gYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgPyAtZGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgIDogZWxBdHRhY2hbZGlyXSA9PT0gYWxpZ25GbGlwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRpbVtwcm9wXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0T2Zmc2V0ID0gdGFyZ2V0QXR0YWNoW2Rpcl0gPT09IGFsaWduXG4gICAgICAgICAgICAgICAgICAgID8gdGFyZ2V0RGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgIDogdGFyZ2V0QXR0YWNoW2Rpcl0gPT09IGFsaWduRmxpcFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAtdGFyZ2V0RGltW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb25bYWxpZ25dIDwgYm91bmRhcnlbYWxpZ25dIHx8IHBvc2l0aW9uW2FsaWduXSArIGRpbVtwcm9wXSA+IGJvdW5kYXJ5W2FsaWduRmxpcF0pIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJPZmZzZXQgPSBkaW1bcHJvcF0gLyAyO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJUYXJnZXRPZmZzZXQgPSB0YXJnZXRBdHRhY2hbZGlyXSA9PT0gJ2NlbnRlcicgPyAtdGFyZ2V0RGltW3Byb3BdIC8gMiA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsQXR0YWNoW2Rpcl0gPT09ICdjZW50ZXInICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5KGNlbnRlck9mZnNldCwgY2VudGVyVGFyZ2V0T2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgYXBwbHkoLWNlbnRlck9mZnNldCwgLWNlbnRlclRhcmdldE9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgKSB8fCBhcHBseShlbGVtT2Zmc2V0LCB0YXJnZXRPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXBwbHkoZWxlbU9mZnNldCwgdGFyZ2V0T2Zmc2V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsID0gcG9zaXRpb25bYWxpZ25dICsgZWxlbU9mZnNldCArIHRhcmdldE9mZnNldCAtIGVsT2Zmc2V0W2Rpcl0gKiAyO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWwgPj0gYm91bmRhcnlbYWxpZ25dICYmIG5ld1ZhbCArIGRpbVtwcm9wXSA8PSBib3VuZGFyeVthbGlnbkZsaXBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblthbGlnbl0gPSBuZXdWYWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZWxlbWVudCcsICd0YXJnZXQnXS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGlwcGVkW2VsXVtkaXJdID0gIWVsZW1PZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmbGlwcGVkW2VsXVtkaXJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmxpcHBlZFtlbF1bZGlyXSA9PT0gZGlyc1twcm9wXVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBkaXJzW3Byb3BdWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRpcnNbcHJvcF1bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KGVsZW1lbnQsIHBvc2l0aW9uKTtcblxuICAgIHJldHVybiBmbGlwcGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2Zmc2V0KGVsZW1lbnQsIGNvb3JkaW5hdGVzKSB7XG5cbiAgICBpZiAoIWNvb3JkaW5hdGVzKSB7XG4gICAgICAgIHJldHVybiBnZXREaW1lbnNpb25zKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRPZmZzZXQgPSBvZmZzZXQoZWxlbWVudCk7XG4gICAgY29uc3QgcG9zID0gY3NzKGVsZW1lbnQsICdwb3NpdGlvbicpO1xuXG4gICAgWydsZWZ0JywgJ3RvcCddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIGlmIChwcm9wIGluIGNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNzcyhlbGVtZW50LCBwcm9wKTtcbiAgICAgICAgICAgIGNzcyhlbGVtZW50LCBwcm9wLCBjb29yZGluYXRlc1twcm9wXSAtIGN1cnJlbnRPZmZzZXRbcHJvcF1cbiAgICAgICAgICAgICAgICArIHRvRmxvYXQocG9zID09PSAnYWJzb2x1dGUnICYmIHZhbHVlID09PSAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgPyBwb3NpdGlvbihlbGVtZW50KVtwcm9wXVxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb25zKGVsZW1lbnQpIHtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgY29uc3Qge3BhZ2VZT2Zmc2V0OiB0b3AsIHBhZ2VYT2Zmc2V0OiBsZWZ0fSA9IHRvV2luZG93KGVsZW1lbnQpO1xuXG4gICAgaWYgKGlzV2luZG93KGVsZW1lbnQpKSB7XG5cbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5pbm5lckhlaWdodDtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmlubmVyV2lkdGg7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGJvdHRvbTogdG9wICsgaGVpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IGxlZnQgKyB3aWR0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGxldCBzdHlsZSwgaGlkZGVuO1xuXG4gICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkgJiYgY3NzKGVsZW1lbnQsICdkaXNwbGF5JykgPT09ICdub25lJykge1xuXG4gICAgICAgIHN0eWxlID0gYXR0cihlbGVtZW50LCAnc3R5bGUnKTtcbiAgICAgICAgaGlkZGVuID0gYXR0cihlbGVtZW50LCAnaGlkZGVuJyk7XG5cbiAgICAgICAgYXR0cihlbGVtZW50LCB7XG4gICAgICAgICAgICBzdHlsZTogYCR7c3R5bGUgfHwgJyd9O2Rpc3BsYXk6YmxvY2sgIWltcG9ydGFudDtgLFxuICAgICAgICAgICAgaGlkZGVuOiBudWxsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG5cbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGlmICghaXNVbmRlZmluZWQoc3R5bGUpKSB7XG4gICAgICAgIGF0dHIoZWxlbWVudCwge3N0eWxlLCBoaWRkZW59KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICAgICAgdG9wOiByZWN0LnRvcCArIHRvcCxcbiAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgbGVmdCxcbiAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSArIHRvcCxcbiAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQgKyBsZWZ0XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uKGVsZW1lbnQsIHBhcmVudCkge1xuICAgIGNvbnN0IGVsZW1lbnRPZmZzZXQgPSBvZmZzZXQoZWxlbWVudCk7XG4gICAgY29uc3QgcGFyZW50T2Zmc2V0ID0gb2Zmc2V0KHBhcmVudCB8fCB0b05vZGUoZWxlbWVudCkub2Zmc2V0UGFyZW50IHx8IHRvV2luZG93KGVsZW1lbnQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cbiAgICByZXR1cm4ge3RvcDogZWxlbWVudE9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wLCBsZWZ0OiBlbGVtZW50T2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvZmZzZXRQb3NpdGlvbihlbGVtZW50KSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gWzAsIDBdO1xuXG4gICAgZWxlbWVudCA9IHRvTm9kZShlbGVtZW50KTtcblxuICAgIGRvIHtcblxuICAgICAgICBvZmZzZXRbMF0gKz0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgIG9mZnNldFsxXSArPSBlbGVtZW50Lm9mZnNldExlZnQ7XG5cbiAgICAgICAgaWYgKGNzcyhlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgICAgICAgICAgY29uc3Qgd2luID0gdG9XaW5kb3coZWxlbWVudCk7XG4gICAgICAgICAgICBvZmZzZXRbMF0gKz0gd2luLnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgb2Zmc2V0WzFdICs9IHdpbi5wYWdlWE9mZnNldDtcbiAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgIH1cblxuICAgIH0gd2hpbGUgKChlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQpKTtcblxuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBkaW1lbnNpb24oJ2hlaWdodCcpO1xuZXhwb3J0IGNvbnN0IHdpZHRoID0gZGltZW5zaW9uKCd3aWR0aCcpO1xuXG5mdW5jdGlvbiBkaW1lbnNpb24ocHJvcCkge1xuICAgIGNvbnN0IHByb3BOYW1lID0gdWNmaXJzdChwcm9wKTtcbiAgICByZXR1cm4gKGVsZW1lbnQsIHZhbHVlKSA9PiB7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuXG4gICAgICAgICAgICBpZiAoaXNXaW5kb3coZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudFtgaW5uZXIke3Byb3BOYW1lfWBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNEb2N1bWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvYyA9IGVsZW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChkb2NbYG9mZnNldCR7cHJvcE5hbWV9YF0sIGRvY1tgc2Nyb2xsJHtwcm9wTmFtZX1gXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnQgPSB0b05vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHZhbHVlID0gY3NzKGVsZW1lbnQsIHByb3ApO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gJ2F1dG8nID8gZWxlbWVudFtgb2Zmc2V0JHtwcm9wTmFtZX1gXSA6IHRvRmxvYXQodmFsdWUpIHx8IDA7XG5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAtIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3ApO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGNzcyhlbGVtZW50LCBwcm9wLCAhdmFsdWUgJiYgdmFsdWUgIT09IDBcbiAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgOiArdmFsdWUgKyBib3hNb2RlbEFkanVzdChlbGVtZW50LCBwcm9wKSArICdweCdcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0KGVsZW1lbnQsIHByb3AsIHNpemluZyA9ICdib3JkZXItYm94Jykge1xuICAgIHJldHVybiBjc3MoZWxlbWVudCwgJ2JveFNpemluZycpID09PSBzaXppbmdcbiAgICAgICAgPyBkaXJzW3Byb3BdLnNsaWNlKDEpLm1hcCh1Y2ZpcnN0KS5yZWR1Y2UoKHZhbHVlLCBwcm9wKSA9PlxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICsgdG9GbG9hdChjc3MoZWxlbWVudCwgYHBhZGRpbmcke3Byb3B9YCkpXG4gICAgICAgICAgICArIHRvRmxvYXQoY3NzKGVsZW1lbnQsIGBib3JkZXIke3Byb3B9V2lkdGhgKSlcbiAgICAgICAgICAgICwgMClcbiAgICAgICAgOiAwO1xufVxuXG5mdW5jdGlvbiBtb3ZlVG8ocG9zaXRpb24sIGF0dGFjaCwgZGltLCBmYWN0b3IpIHtcbiAgICBlYWNoKGRpcnMsIChbZGlyLCBhbGlnbiwgYWxpZ25GbGlwXSwgcHJvcCkgPT4ge1xuICAgICAgICBpZiAoYXR0YWNoW2Rpcl0gPT09IGFsaWduRmxpcCkge1xuICAgICAgICAgICAgcG9zaXRpb25bYWxpZ25dICs9IGRpbVtwcm9wXSAqIGZhY3RvcjtcbiAgICAgICAgfSBlbHNlIGlmIChhdHRhY2hbZGlyXSA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uW2FsaWduXSArPSBkaW1bcHJvcF0gKiBmYWN0b3IgLyAyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFBvcyhwb3MpIHtcblxuICAgIGNvbnN0IHggPSAvbGVmdHxjZW50ZXJ8cmlnaHQvO1xuICAgIGNvbnN0IHkgPSAvdG9wfGNlbnRlcnxib3R0b20vO1xuXG4gICAgcG9zID0gKHBvcyB8fCAnJykuc3BsaXQoJyAnKTtcblxuICAgIGlmIChwb3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHBvcyA9IHgudGVzdChwb3NbMF0pXG4gICAgICAgICAgICA/IHBvcy5jb25jYXQoWydjZW50ZXInXSlcbiAgICAgICAgICAgIDogeS50ZXN0KHBvc1swXSlcbiAgICAgICAgICAgICAgICA/IFsnY2VudGVyJ10uY29uY2F0KHBvcylcbiAgICAgICAgICAgICAgICA6IFsnY2VudGVyJywgJ2NlbnRlciddO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHgudGVzdChwb3NbMF0pID8gcG9zWzBdIDogJ2NlbnRlcicsXG4gICAgICAgIHk6IHkudGVzdChwb3NbMV0pID8gcG9zWzFdIDogJ2NlbnRlcidcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRzKG9mZnNldHMsIHdpZHRoLCBoZWlnaHQpIHtcblxuICAgIGNvbnN0IFt4LCB5XSA9IChvZmZzZXRzIHx8ICcnKS5zcGxpdCgnICcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCA/IHRvRmxvYXQoeCkgKiAoZW5kc1dpdGgoeCwgJyUnKSA/IHdpZHRoIC8gMTAwIDogMSkgOiAwLFxuICAgICAgICB5OiB5ID8gdG9GbG9hdCh5KSAqIChlbmRzV2l0aCh5LCAnJScpID8gaGVpZ2h0IC8gMTAwIDogMSkgOiAwXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZsaXBQb3NpdGlvbihwb3MpIHtcbiAgICBzd2l0Y2ggKHBvcykge1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgcmV0dXJuICdib3R0b20nO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgcmV0dXJuICd0b3AnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1B4KHZhbHVlLCBwcm9wZXJ0eSA9ICd3aWR0aCcsIGVsZW1lbnQgPSB3aW5kb3cpIHtcbiAgICByZXR1cm4gaXNOdW1lcmljKHZhbHVlKVxuICAgICAgICA/ICt2YWx1ZVxuICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAndmgnKVxuICAgICAgICAgICAgPyBwZXJjZW50KGhlaWdodCh0b1dpbmRvdyhlbGVtZW50KSksIHZhbHVlKVxuICAgICAgICAgICAgOiBlbmRzV2l0aCh2YWx1ZSwgJ3Z3JylcbiAgICAgICAgICAgICAgICA/IHBlcmNlbnQod2lkdGgodG9XaW5kb3coZWxlbWVudCkpLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICA6IGVuZHNXaXRoKHZhbHVlLCAnJScpXG4gICAgICAgICAgICAgICAgICAgID8gcGVyY2VudChnZXREaW1lbnNpb25zKGVsZW1lbnQpW3Byb3BlcnR5XSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogdG9GbG9hdCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnQoYmFzZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZSAqIHRvRmxvYXQodmFsdWUpIC8gMTAwO1xufVxuIiwiaW1wb3J0IHtQcm9taXNlfSBmcm9tICcuL3Byb21pc2UnO1xuLypcbiAgICBCYXNlZCBvbjpcbiAgICBDb3B5cmlnaHQgKGMpIDIwMTYgV2lsc29uIFBhZ2Ugd2lsc29ucGFnZUBtZS5jb21cbiAgICBodHRwczovL2dpdGh1Yi5jb20vd2lsc29ucGFnZS9mYXN0ZG9tXG4qL1xuXG5leHBvcnQgY29uc3QgZmFzdGRvbSA9IHtcblxuICAgIHJlYWRzOiBbXSxcbiAgICB3cml0ZXM6IFtdLFxuXG4gICAgcmVhZCh0YXNrKSB7XG4gICAgICAgIHRoaXMucmVhZHMucHVzaCh0YXNrKTtcbiAgICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgICAgICByZXR1cm4gdGFzaztcbiAgICB9LFxuXG4gICAgd3JpdGUodGFzaykge1xuICAgICAgICB0aGlzLndyaXRlcy5wdXNoKHRhc2spO1xuICAgICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgICAgIHJldHVybiB0YXNrO1xuICAgIH0sXG5cbiAgICBjbGVhcih0YXNrKSB7XG4gICAgICAgIHJldHVybiByZW1vdmUodGhpcy5yZWFkcywgdGFzaykgfHwgcmVtb3ZlKHRoaXMud3JpdGVzLCB0YXNrKTtcbiAgICB9LFxuXG4gICAgZmx1c2hcblxufTtcblxuZnVuY3Rpb24gZmx1c2gocmVjdXJzaW9uID0gMSkge1xuICAgIHJ1blRhc2tzKGZhc3Rkb20ucmVhZHMpO1xuICAgIHJ1blRhc2tzKGZhc3Rkb20ud3JpdGVzLnNwbGljZSgwLCBmYXN0ZG9tLndyaXRlcy5sZW5ndGgpKTtcblxuICAgIGZhc3Rkb20uc2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgICBpZiAoZmFzdGRvbS5yZWFkcy5sZW5ndGggfHwgZmFzdGRvbS53cml0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHNjaGVkdWxlRmx1c2gocmVjdXJzaW9uICsgMSk7XG4gICAgfVxufVxuXG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSA1O1xuZnVuY3Rpb24gc2NoZWR1bGVGbHVzaChyZWN1cnNpb24pIHtcbiAgICBpZiAoIWZhc3Rkb20uc2NoZWR1bGVkKSB7XG4gICAgICAgIGZhc3Rkb20uc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHJlY3Vyc2lvbiA+IFJFQ1VSU0lPTl9MSU1JVCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXhpbXVtIHJlY3Vyc2lvbiBsaW1pdCByZWFjaGVkLicpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlY3Vyc2lvbikge1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBmbHVzaChyZWN1cnNpb24pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBmbHVzaCgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcnVuVGFza3ModGFza3MpIHtcbiAgICBsZXQgdGFzaztcbiAgICB3aGlsZSAoKHRhc2sgPSB0YXNrcy5zaGlmdCgpKSkge1xuICAgICAgICB0YXNrKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUoYXJyYXksIGl0ZW0pIHtcbiAgICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgcmV0dXJuICEhfmluZGV4ICYmICEhYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbn1cbiIsImltcG9ydCB7Z2V0RXZlbnRQb3MsIG9ufSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7bGFzdCwgcG9pbnRJblJlY3R9IGZyb20gJy4vbGFuZyc7XG5pbXBvcnQge29mZnNldH0gZnJvbSAnLi9kaW1lbnNpb25zJztcblxuZXhwb3J0IGZ1bmN0aW9uIE1vdXNlVHJhY2tlcigpIHt9XG5cbk1vdXNlVHJhY2tlci5wcm90b3R5cGUgPSB7XG5cbiAgICBwb3NpdGlvbnM6IFtdLFxuXG4gICAgaW5pdCgpIHtcblxuICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IFtdO1xuXG4gICAgICAgIGxldCBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy51bmJpbmQgPSBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIGUgPT4gcG9zaXRpb24gPSBnZXRFdmVudFBvcyhlLCAncGFnZScpKTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcblxuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnMucHVzaChwb3NpdGlvbik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBvc2l0aW9ucy5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNTApO1xuXG4gICAgfSxcblxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy51bmJpbmQgJiYgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgIH0sXG5cbiAgICBtb3Zlc1RvKHRhcmdldCkge1xuXG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9ucy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwID0gb2Zmc2V0KHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHtsZWZ0LCByaWdodCwgdG9wLCBib3R0b219ID0gcDtcblxuICAgICAgICBjb25zdCBbcHJldlBvc2l0aW9uXSA9IHRoaXMucG9zaXRpb25zO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGxhc3QodGhpcy5wb3NpdGlvbnMpO1xuICAgICAgICBjb25zdCBwYXRoID0gW3ByZXZQb3NpdGlvbiwgcG9zaXRpb25dO1xuXG4gICAgICAgIGlmIChwb2ludEluUmVjdChwb3NpdGlvbiwgcCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRpYWdvbmFscyA9IFtbe3g6IGxlZnQsIHk6IHRvcH0sIHt4OiByaWdodCwgeTogYm90dG9tfV0sIFt7eDogbGVmdCwgeTogYm90dG9tfSwge3g6IHJpZ2h0LCB5OiB0b3B9XV07XG5cbiAgICAgICAgcmV0dXJuIGRpYWdvbmFscy5zb21lKGRpYWdvbmFsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IGludGVyc2VjdChwYXRoLCBkaWFnb25hbCk7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uICYmIHBvaW50SW5SZWN0KGludGVyc2VjdGlvbiwgcCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufTtcblxuLy8gSW5zcGlyZWQgYnkgaHR0cDovL3BhdWxib3Vya2UubmV0L2dlb21ldHJ5L3BvaW50bGluZXBsYW5lL1xuZnVuY3Rpb24gaW50ZXJzZWN0KFt7eDogeDEsIHk6IHkxfSwge3g6IHgyLCB5OiB5Mn1dLCBbe3g6IHgzLCB5OiB5M30sIHt4OiB4NCwgeTogeTR9XSkge1xuXG4gICAgY29uc3QgZGVub21pbmF0b3IgPSAoeTQgLSB5MykgKiAoeDIgLSB4MSkgLSAoeDQgLSB4MykgKiAoeTIgLSB5MSk7XG5cbiAgICAvLyBMaW5lcyBhcmUgcGFyYWxsZWxcbiAgICBpZiAoZGVub21pbmF0b3IgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHVhID0gKCh4NCAtIHgzKSAqICh5MSAtIHkzKSAtICh5NCAtIHkzKSAqICh4MSAtIHgzKSkgLyBkZW5vbWluYXRvcjtcblxuICAgIGlmICh1YSA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG9iamVjdCB3aXRoIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzIG9mIHRoZSBpbnRlcnNlY3Rpb25cbiAgICByZXR1cm4ge3g6IHgxICsgdWEgKiAoeDIgLSB4MSksIHk6IHkxICsgdWEgKiAoeTIgLSB5MSl9O1xufVxuIiwiaW1wb3J0IHthc3NpZ24sIGhhc093biwgaW5jbHVkZXMsIGlzQXJyYXksIGlzRnVuY3Rpb24sIGlzVW5kZWZpbmVkLCBzb3J0QnksIHN0YXJ0c1dpdGh9IGZyb20gJy4vbGFuZyc7XG5cbmNvbnN0IHN0cmF0cyA9IHt9O1xuXG5zdHJhdHMuZXZlbnRzID1cbnN0cmF0cy5jcmVhdGVkID1cbnN0cmF0cy5iZWZvcmVDb25uZWN0ID1cbnN0cmF0cy5jb25uZWN0ZWQgPVxuc3RyYXRzLmJlZm9yZURpc2Nvbm5lY3QgPVxuc3RyYXRzLmRpc2Nvbm5lY3RlZCA9XG5zdHJhdHMuZGVzdHJveSA9IGNvbmNhdFN0cmF0O1xuXG4vLyBhcmdzIHN0cmF0ZWd5XG5zdHJhdHMuYXJncyA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGNoaWxkVmFsICE9PSBmYWxzZSAmJiBjb25jYXRTdHJhdChjaGlsZFZhbCB8fCBwYXJlbnRWYWwpO1xufTtcblxuLy8gdXBkYXRlIHN0cmF0ZWd5XG5zdHJhdHMudXBkYXRlID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gc29ydEJ5KGNvbmNhdFN0cmF0KHBhcmVudFZhbCwgaXNGdW5jdGlvbihjaGlsZFZhbCkgPyB7cmVhZDogY2hpbGRWYWx9IDogY2hpbGRWYWwpLCAnb3JkZXInKTtcbn07XG5cbi8vIHByb3BlcnR5IHN0cmF0ZWd5XG5zdHJhdHMucHJvcHMgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuXG4gICAgaWYgKGlzQXJyYXkoY2hpbGRWYWwpKSB7XG4gICAgICAgIGNoaWxkVmFsID0gY2hpbGRWYWwucmVkdWNlKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICB2YWx1ZVtrZXldID0gU3RyaW5nO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmF0cy5tZXRob2RzKHBhcmVudFZhbCwgY2hpbGRWYWwpO1xufTtcblxuLy8gZXh0ZW5kIHN0cmF0ZWd5XG5zdHJhdHMuY29tcHV0ZWQgPVxuc3RyYXRzLm1ldGhvZHMgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgIHJldHVybiBjaGlsZFZhbFxuICAgICAgICA/IHBhcmVudFZhbFxuICAgICAgICAgICAgPyBhc3NpZ24oe30sIHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gICAgICAgICAgICA6IGNoaWxkVmFsXG4gICAgICAgIDogcGFyZW50VmFsO1xufTtcblxuLy8gZGF0YSBzdHJhdGVneVxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcblxuICAgIGlmICghdm0pIHtcblxuICAgICAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50VmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZFZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodm0pIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZUZuRGF0YShwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSk7XG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pO1xufTtcblxuZnVuY3Rpb24gbWVyZ2VGbkRhdGEocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcbiAgICByZXR1cm4gc3RyYXRzLmNvbXB1dGVkKFxuICAgICAgICBpc0Z1bmN0aW9uKHBhcmVudFZhbClcbiAgICAgICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgOiBwYXJlbnRWYWwsXG4gICAgICAgIGlzRnVuY3Rpb24oY2hpbGRWYWwpXG4gICAgICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgICAgOiBjaGlsZFZhbFxuICAgICk7XG59XG5cbi8vIGNvbmNhdCBzdHJhdGVneVxuZnVuY3Rpb24gY29uY2F0U3RyYXQocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuXG4gICAgcGFyZW50VmFsID0gcGFyZW50VmFsICYmICFpc0FycmF5KHBhcmVudFZhbCkgPyBbcGFyZW50VmFsXSA6IHBhcmVudFZhbDtcblxuICAgIHJldHVybiBjaGlsZFZhbFxuICAgICAgICA/IHBhcmVudFZhbFxuICAgICAgICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgICAgICAgOiBpc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICAgICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICAgICAgOiBwYXJlbnRWYWw7XG59XG5cbi8vIGRlZmF1bHQgc3RyYXRlZ3lcbmZ1bmN0aW9uIGRlZmF1bHRTdHJhdChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKGNoaWxkVmFsKSA/IHBhcmVudFZhbCA6IGNoaWxkVmFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XG5cbiAgICBjb25zdCBvcHRpb25zID0ge307XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJlbnQpIHtcbiAgICAgICAgbWVyZ2VLZXkoa2V5KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjaGlsZCkge1xuICAgICAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgICAgICAgIG1lcmdlS2V5KGtleSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUtleShrZXkpIHtcbiAgICAgICAgb3B0aW9uc1trZXldID0gKHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdCkocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhvcHRpb25zLCBhcmdzID0gW10pIHtcblxuICAgIHRyeSB7XG5cbiAgICAgICAgcmV0dXJuICFvcHRpb25zXG4gICAgICAgICAgICA/IHt9XG4gICAgICAgICAgICA6IHN0YXJ0c1dpdGgob3B0aW9ucywgJ3snKVxuICAgICAgICAgICAgICAgID8gSlNPTi5wYXJzZShvcHRpb25zKVxuICAgICAgICAgICAgICAgIDogYXJncy5sZW5ndGggJiYgIWluY2x1ZGVzKG9wdGlvbnMsICc6JylcbiAgICAgICAgICAgICAgICAgICAgPyAoe1thcmdzWzBdXTogb3B0aW9uc30pXG4gICAgICAgICAgICAgICAgICAgIDogb3B0aW9ucy5zcGxpdCgnOycpLnJlZHVjZSgob3B0aW9ucywgb3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBvcHRpb24uc3BsaXQoLzooLiopLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICYmICFpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2tleS50cmltKCldID0gdmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIH0sIHt9KTtcblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHthdHRyfSBmcm9tICcuL2F0dHInO1xuaW1wb3J0IHtvbmNlfSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7UHJvbWlzZX0gZnJvbSAnLi9wcm9taXNlJztcbmltcG9ydCB7YXNzaWduLCBpbmNsdWRlcywgaXNTdHJpbmcsIG5vb3AsIHRvTm9kZX0gZnJvbSAnLi9sYW5nJztcblxubGV0IGlkID0gMDtcblxuZXhwb3J0IGNsYXNzIFBsYXllciB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbCkge1xuICAgICAgICB0aGlzLmlkID0gKytpZDtcbiAgICAgICAgdGhpcy5lbCA9IHRvTm9kZShlbCk7XG4gICAgfVxuXG4gICAgaXNWaWRlbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNZb3V0dWJlKCkgfHwgdGhpcy5pc1ZpbWVvKCkgfHwgdGhpcy5pc0hUTUw1KCk7XG4gICAgfVxuXG4gICAgaXNIVE1MNSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwudGFnTmFtZSA9PT0gJ1ZJREVPJztcbiAgICB9XG5cbiAgICBpc0lGcmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwudGFnTmFtZSA9PT0gJ0lGUkFNRSc7XG4gICAgfVxuXG4gICAgaXNZb3V0dWJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lGcmFtZSgpICYmICEhdGhpcy5lbC5zcmMubWF0Y2goL1xcL1xcLy4qP3lvdXR1YmUoLW5vY29va2llKT9cXC5bYS16XStcXC8od2F0Y2hcXD92PVteJlxcc10rfGVtYmVkKXx5b3V0dVxcLmJlXFwvLiovKTtcbiAgICB9XG5cbiAgICBpc1ZpbWVvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lGcmFtZSgpICYmICEhdGhpcy5lbC5zcmMubWF0Y2goL3ZpbWVvXFwuY29tXFwvdmlkZW9cXC8uKi8pO1xuICAgIH1cblxuICAgIGVuYWJsZUFwaSgpIHtcblxuICAgICAgICBpZiAodGhpcy5yZWFkeSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZHk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB5b3V0dWJlID0gdGhpcy5pc1lvdXR1YmUoKTtcbiAgICAgICAgY29uc3QgdmltZW8gPSB0aGlzLmlzVmltZW8oKTtcblxuICAgICAgICBsZXQgcG9sbGVyO1xuXG4gICAgICAgIGlmICh5b3V0dWJlIHx8IHZpbWVvKSB7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWR5ID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cbiAgICAgICAgICAgICAgICBvbmNlKHRoaXMuZWwsICdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeW91dHViZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBwb3N0KHRoaXMuZWwsIHtldmVudDogJ2xpc3RlbmluZycsIGlkOiB0aGlzLmlkfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsZXIgPSBzZXRJbnRlcnZhbChsaXN0ZW5lciwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGxpc3RlbihkYXRhID0+IHlvdXR1YmUgJiYgZGF0YS5pZCA9PT0gdGhpcy5pZCAmJiBkYXRhLmV2ZW50ID09PSAnb25SZWFkeScgfHwgdmltZW8gJiYgTnVtYmVyKGRhdGEucGxheWVyX2lkKSA9PT0gdGhpcy5pZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbGVyICYmIGNsZWFySW50ZXJ2YWwocG9sbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBhdHRyKHRoaXMuZWwsICdzcmMnLCBgJHt0aGlzLmVsLnNyY30ke2luY2x1ZGVzKHRoaXMuZWwuc3JjLCAnPycpID8gJyYnIDogJz8nfSR7eW91dHViZSA/ICdlbmFibGVqc2FwaT0xJyA6IGBhcGk9MSZwbGF5ZXJfaWQ9JHt0aGlzLmlkfWB9YCk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICB9XG5cbiAgICBwbGF5KCkge1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZpZGVvKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzSUZyYW1lKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlQXBpKCkudGhlbigoKSA9PiBwb3N0KHRoaXMuZWwsIHtmdW5jOiAncGxheVZpZGVvJywgbWV0aG9kOiAncGxheSd9KSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0hUTUw1KCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZWwucGxheSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5jYXRjaChub29wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmlkZW8oKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJRnJhbWUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVBcGkoKS50aGVuKCgpID0+IHBvc3QodGhpcy5lbCwge2Z1bmM6ICdwYXVzZVZpZGVvJywgbWV0aG9kOiAncGF1c2UnfSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNIVE1MNSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtdXRlKCkge1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZpZGVvKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzSUZyYW1lKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlQXBpKCkudGhlbigoKSA9PiBwb3N0KHRoaXMuZWwsIHtmdW5jOiAnbXV0ZScsIG1ldGhvZDogJ3NldFZvbHVtZScsIHZhbHVlOiAwfSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNIVE1MNSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVsLm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGF0dHIodGhpcy5lbCwgJ211dGVkJywgJycpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gcG9zdChlbCwgY21kKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgZWwuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShhc3NpZ24oe2V2ZW50OiAnY29tbWFuZCd9LCBjbWQpKSwgJyonKTtcbiAgICB9IGNhdGNoIChlKSB7fVxufVxuXG5mdW5jdGlvbiBsaXN0ZW4oY2IpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblxuICAgICAgICBvbmNlKHdpbmRvdywgJ21lc3NhZ2UnLCAoXywgZGF0YSkgPT4gcmVzb2x2ZShkYXRhKSwgZmFsc2UsICh7ZGF0YX0pID0+IHtcblxuICAgICAgICAgICAgaWYgKCFkYXRhIHx8ICFpc1N0cmluZyhkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhICYmIGNiKGRhdGEpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn1cbiIsImltcG9ydCB7Y3NzfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCB7UHJvbWlzZX0gZnJvbSAnLi9wcm9taXNlJztcbmltcG9ydCB7aXNWaXNpYmxlfSBmcm9tICcuL2ZpbHRlcic7XG5pbXBvcnQge3BhcmVudHN9IGZyb20gJy4vc2VsZWN0b3InO1xuaW1wb3J0IHtvZmZzZXQsIG9mZnNldFBvc2l0aW9uLCBwb3NpdGlvbn0gZnJvbSAnLi9kaW1lbnNpb25zJztcbmltcG9ydCB7Y2xhbXAsIGludGVyc2VjdFJlY3QsIGlzRG9jdW1lbnQsIGlzV2luZG93LCBsYXN0LCBwb2ludEluUmVjdCwgdG9Ob2RlLCB0b1dpbmRvd30gZnJvbSAnLi9sYW5nJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5WaWV3KGVsZW1lbnQsIG9mZnNldFRvcCA9IDAsIG9mZnNldExlZnQgPSAwKSB7XG5cbiAgICBpZiAoIWlzVmlzaWJsZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50cyA9IG92ZXJmbG93UGFyZW50cyhlbGVtZW50KS5jb25jYXQoZWxlbWVudCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHR9ID0gb2Zmc2V0KGdldFZpZXdwb3J0KHBhcmVudHNbaV0pKTtcbiAgICAgICAgY29uc3QgdnAgPSB7XG4gICAgICAgICAgICB0b3A6IHRvcCAtIG9mZnNldFRvcCxcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQgLSBvZmZzZXRMZWZ0LFxuICAgICAgICAgICAgYm90dG9tOiBib3R0b20gKyBvZmZzZXRUb3AsXG4gICAgICAgICAgICByaWdodDogcmlnaHQgKyBvZmZzZXRMZWZ0XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgY2xpZW50ID0gb2Zmc2V0KHBhcmVudHNbaSArIDFdKTtcblxuICAgICAgICBpZiAoIWludGVyc2VjdFJlY3QoY2xpZW50LCB2cCkgJiYgIXBvaW50SW5SZWN0KHt4OiBjbGllbnQubGVmdCwgeTogY2xpZW50LnRvcH0sIHZwKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUb3AoZWxlbWVudCwgdG9wKSB7XG5cbiAgICBpZiAoaXNXaW5kb3coZWxlbWVudCkgfHwgaXNEb2N1bWVudChlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50ID0gZ2V0U2Nyb2xsaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gdG9Ob2RlKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gdG9wO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcoZWxlbWVudCwge2R1cmF0aW9uID0gMTAwMCwgb2Zmc2V0ID0gMH0gPSB7fSkge1xuXG4gICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudHMgPSBvdmVyZmxvd1BhcmVudHMoZWxlbWVudCkuY29uY2F0KGVsZW1lbnQpO1xuICAgIGR1cmF0aW9uIC89IHBhcmVudHMubGVuZ3RoIC0gMTtcblxuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJlbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKCgpID0+XG4gICAgICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNjcm9sbEVsZW1lbnQgPSBwYXJlbnRzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBwYXJlbnRzW2kgKyAxXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHtzY3JvbGxUb3A6IHNjcm9sbH0gPSBzY3JvbGxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvcCA9IHBvc2l0aW9uKGVsZW1lbnQsIGdldFZpZXdwb3J0KHNjcm9sbEVsZW1lbnQpKS50b3AgLSBvZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RlcCA9ICgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJjZW50ID0gZWFzZShjbGFtcCgoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIGR1cmF0aW9uKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHNjcm9sbEVsZW1lbnQsIHNjcm9sbCArIHRvcCAqIHBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNjcm9sbCBtb3JlIGlmIHdlIGhhdmUgbm90IHJlYWNoZWQgb3VyIGRlc3RpbmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChwZXJjZW50ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzdGVwKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxlZE92ZXIoZWxlbWVudCwgaGVpZ2h0T2Zmc2V0ID0gMCkge1xuXG4gICAgaWYgKCFpc1Zpc2libGUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgY29uc3Qgc2Nyb2xsRWxlbWVudCA9IGxhc3Qoc2Nyb2xsUGFyZW50cyhlbGVtZW50KSk7XG4gICAgY29uc3Qge3Njcm9sbEhlaWdodCwgc2Nyb2xsVG9wfSA9IHNjcm9sbEVsZW1lbnQ7XG4gICAgY29uc3Qgdmlld3BvcnQgPSBnZXRWaWV3cG9ydChzY3JvbGxFbGVtZW50KTtcbiAgICBjb25zdCB2aWV3cG9ydEhlaWdodCA9IG9mZnNldCh2aWV3cG9ydCkuaGVpZ2h0O1xuICAgIGNvbnN0IHZpZXdwb3J0VG9wID0gb2Zmc2V0UG9zaXRpb24oZWxlbWVudClbMF0gLSBzY3JvbGxUb3AgLSBvZmZzZXRQb3NpdGlvbihzY3JvbGxFbGVtZW50KVswXTtcbiAgICBjb25zdCB2aWV3cG9ydERpc3QgPSBNYXRoLm1pbih2aWV3cG9ydEhlaWdodCwgdmlld3BvcnRUb3AgKyBzY3JvbGxUb3ApO1xuXG4gICAgY29uc3QgdG9wID0gdmlld3BvcnRUb3AgLSB2aWV3cG9ydERpc3Q7XG4gICAgY29uc3QgZGlzdCA9IE1hdGgubWluKFxuICAgICAgICBvZmZzZXQoZWxlbWVudCkuaGVpZ2h0ICsgaGVpZ2h0T2Zmc2V0ICsgdmlld3BvcnREaXN0LFxuICAgICAgICBzY3JvbGxIZWlnaHQgLSAodmlld3BvcnRUb3AgKyBzY3JvbGxUb3ApLFxuICAgICAgICBzY3JvbGxIZWlnaHQgLSB2aWV3cG9ydEhlaWdodFxuICAgICk7XG5cbiAgICByZXR1cm4gY2xhbXAoLTEgKiB0b3AgLyBkaXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFBhcmVudHMoZWxlbWVudCwgb3ZlcmZsb3dSZSA9IC9hdXRvfHNjcm9sbC8pIHtcbiAgICBjb25zdCBzY3JvbGxFbCA9IGdldFNjcm9sbGluZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgY29uc3Qgc2Nyb2xsUGFyZW50cyA9IHBhcmVudHMoZWxlbWVudCkuZmlsdGVyKHBhcmVudCA9PlxuICAgICAgICBwYXJlbnQgPT09IHNjcm9sbEVsXG4gICAgICAgIHx8IG92ZXJmbG93UmUudGVzdChjc3MocGFyZW50LCAnb3ZlcmZsb3cnKSlcbiAgICAgICAgJiYgcGFyZW50LnNjcm9sbEhlaWdodCA+IG9mZnNldChwYXJlbnQpLmhlaWdodFxuICAgICkucmV2ZXJzZSgpO1xuICAgIHJldHVybiBzY3JvbGxQYXJlbnRzLmxlbmd0aCA/IHNjcm9sbFBhcmVudHMgOiBbc2Nyb2xsRWxdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld3BvcnQoc2Nyb2xsRWxlbWVudCkge1xuICAgIHJldHVybiBzY3JvbGxFbGVtZW50ID09PSBnZXRTY3JvbGxpbmdFbGVtZW50KHNjcm9sbEVsZW1lbnQpID8gd2luZG93IDogc2Nyb2xsRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gb3ZlcmZsb3dQYXJlbnRzKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gc2Nyb2xsUGFyZW50cyhlbGVtZW50LCAvYXV0b3xzY3JvbGx8aGlkZGVuLyk7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbGluZ0VsZW1lbnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHtkb2N1bWVudH0gPSB0b1dpbmRvdyhlbGVtZW50KTtcbiAgICByZXR1cm4gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG4iLCJpbXBvcnQge29ufSBmcm9tICcuL2V2ZW50JztcbmltcG9ydCB7dG9GbG9hdH0gZnJvbSAnLi9sYW5nJztcbmltcG9ydCB7aXNJblZpZXd9IGZyb20gJy4vdmlld3BvcnQnO1xuXG5leHBvcnQgY29uc3QgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvd1xuICAgID8gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyXG4gICAgOiBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlckNsYXNzIHtcblxuICAgICAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaywge3Jvb3RNYXJnaW4gPSAnMCAwJ30gPSB7fSkge1xuXG4gICAgICAgICAgICB0aGlzLnRhcmdldHMgPSBbXTtcblxuICAgICAgICAgICAgY29uc3QgW29mZnNldFRvcCwgb2Zmc2V0TGVmdF0gPSAocm9vdE1hcmdpbiB8fCAnMCAwJykuc3BsaXQoJyAnKS5tYXAodG9GbG9hdCk7XG5cbiAgICAgICAgICAgIHRoaXMub2Zmc2V0VG9wID0gb2Zmc2V0VG9wO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRMZWZ0ID0gb2Zmc2V0TGVmdDtcblxuICAgICAgICAgICAgbGV0IHBlbmRpbmc7XG4gICAgICAgICAgICB0aGlzLmFwcGx5ID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY29yZHMgPSB0aGlzLnRha2VSZWNvcmRzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZWNvcmRzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMub2ZmID0gb24od2luZG93LCAnc2Nyb2xsIHJlc2l6ZSBsb2FkJywgdGhpcy5hcHBseSwge3Bhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWV9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGFrZVJlY29yZHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRzLmZpbHRlcihlbnRyeSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpblZpZXcgPSBpc0luVmlldyhlbnRyeS50YXJnZXQsIHRoaXMub2Zmc2V0VG9wLCB0aGlzLm9mZnNldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSBudWxsIHx8IGluVmlldyBeIGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmlzSW50ZXJzZWN0aW5nID0gaW5WaWV3O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZSh0YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgaXNJbnRlcnNlY3Rpbmc6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hcHBseSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5vZmYoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcbiIsImltcG9ydCB7JCwgYXBwbHksIGlzU3RyaW5nLCBtZXJnZU9wdGlvbnMsIHBhcmVudHMsIHRvTm9kZX0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChVSWtpdCkge1xuXG4gICAgY29uc3QgREFUQSA9IFVJa2l0LmRhdGE7XG5cbiAgICBVSWtpdC51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG5cbiAgICAgICAgaWYgKHBsdWdpbi5pbnN0YWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBsdWdpbi5jYWxsKG51bGwsIHRoaXMpO1xuICAgICAgICBwbHVnaW4uaW5zdGFsbGVkID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVUlraXQubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4sIGNvbXBvbmVudCkge1xuICAgICAgICBjb21wb25lbnQgPSAoaXNTdHJpbmcoY29tcG9uZW50KSA/IFVJa2l0LmNvbXBvbmVudChjb21wb25lbnQpIDogY29tcG9uZW50KSB8fCB0aGlzO1xuICAgICAgICBjb21wb25lbnQub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhjb21wb25lbnQub3B0aW9ucywgbWl4aW4pO1xuICAgIH07XG5cbiAgICBVSWtpdC5leHRlbmQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IFN1cGVyID0gdGhpcztcbiAgICAgICAgY29uc3QgU3ViID0gZnVuY3Rpb24gVUlraXRDb21wb25lbnQob3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgICAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgICAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhTdXBlci5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICBTdWIuc3VwZXIgPSBTdXBlcjtcbiAgICAgICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcblxuICAgICAgICByZXR1cm4gU3ViO1xuICAgIH07XG5cbiAgICBVSWtpdC51cGRhdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgZSkge1xuXG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50ID8gdG9Ob2RlKGVsZW1lbnQpIDogZG9jdW1lbnQuYm9keTtcblxuICAgICAgICBwYXJlbnRzKGVsZW1lbnQpLnJldmVyc2UoKS5mb3JFYWNoKGVsZW1lbnQgPT4gdXBkYXRlKGVsZW1lbnRbREFUQV0sIGUpKTtcbiAgICAgICAgYXBwbHkoZWxlbWVudCwgZWxlbWVudCA9PiB1cGRhdGUoZWxlbWVudFtEQVRBXSwgZSkpO1xuXG4gICAgfTtcblxuICAgIGxldCBjb250YWluZXI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFVJa2l0LCAnY29udGFpbmVyJywge1xuXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXQoZWxlbWVudCkge1xuICAgICAgICAgICAgY29udGFpbmVyID0gJChlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGUoZGF0YSwgZSkge1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhW25hbWVdLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBkYXRhW25hbWVdLl9jYWxsVXBkYXRlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbiIsImltcG9ydCB7YXNzaWduLCBmYXN0ZG9tLCBpbmNsdWRlcywgaXNQbGFpbk9iamVjdH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChVSWtpdCkge1xuXG4gICAgVUlraXQucHJvdG90eXBlLl9jYWxsSG9vayA9IGZ1bmN0aW9uIChob29rKSB7XG5cbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLiRvcHRpb25zW2hvb2tdO1xuXG4gICAgICAgIGlmIChoYW5kbGVycykge1xuICAgICAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IGhhbmRsZXIuY2FsbCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgVUlraXQucHJvdG90eXBlLl9jYWxsQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5fY29tcHV0ZWRzID0ge307XG4gICAgICAgIHRoaXMuX2luaXRQcm9wcygpO1xuXG4gICAgICAgIHRoaXMuX2NhbGxIb29rKCdiZWZvcmVDb25uZWN0Jyk7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5faW5pdEV2ZW50cygpO1xuICAgICAgICB0aGlzLl9pbml0T2JzZXJ2ZXIoKTtcblxuICAgICAgICB0aGlzLl9jYWxsSG9vaygnY29ubmVjdGVkJyk7XG4gICAgICAgIHRoaXMuX2NhbGxVcGRhdGUoKTtcbiAgICB9O1xuXG4gICAgVUlraXQucHJvdG90eXBlLl9jYWxsRGlzY29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jYWxsSG9vaygnYmVmb3JlRGlzY29ubmVjdCcpO1xuXG4gICAgICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdW5iaW5kRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rKCdkaXNjb25uZWN0ZWQnKTtcblxuICAgICAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBVSWtpdC5wcm90b3R5cGUuX2NhbGxVcGRhdGUgPSBmdW5jdGlvbiAoZSA9ICd1cGRhdGUnKSB7XG5cbiAgICAgICAgY29uc3QgdHlwZSA9IGUudHlwZSB8fCBlO1xuXG4gICAgICAgIGlmIChpbmNsdWRlcyhbJ3VwZGF0ZScsICdyZXNpemUnXSwgdHlwZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxXYXRjaGVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1cGRhdGVzID0gdGhpcy4kb3B0aW9ucy51cGRhdGU7XG4gICAgICAgIGNvbnN0IHtyZWFkcywgd3JpdGVzfSA9IHRoaXMuX2ZyYW1lcztcblxuICAgICAgICBpZiAoIXVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaCgoe3JlYWQsIHdyaXRlLCBldmVudHN9LCBpKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlICE9PSAndXBkYXRlJyAmJiAhaW5jbHVkZXMoZXZlbnRzLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlYWQgJiYgIWluY2x1ZGVzKGZhc3Rkb20ucmVhZHMsIHJlYWRzW2ldKSkge1xuICAgICAgICAgICAgICAgIHJlYWRzW2ldID0gZmFzdGRvbS5yZWFkKCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9jb25uZWN0ZWQgJiYgcmVhZC5jYWxsKHRoaXMsIHRoaXMuX2RhdGEsIHR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlICYmIHdyaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYXN0ZG9tLmNsZWFyKHdyaXRlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ24odGhpcy5fZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAod3JpdGUgJiYgIWluY2x1ZGVzKGZhc3Rkb20ud3JpdGVzLCB3cml0ZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgd3JpdGVzW2ldID0gZmFzdGRvbS53cml0ZSgoKSA9PiB0aGlzLl9jb25uZWN0ZWQgJiYgd3JpdGUuY2FsbCh0aGlzLCB0aGlzLl9kYXRhLCB0eXBlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG59XG4iLCJpbXBvcnQge2Fzc2lnbiwgY2FtZWxpemUsIGRhdGEgYXMgZ2V0RGF0YSwgaGFzT3duLCBoeXBoZW5hdGUsIGlzQXJyYXksIGlzRW1wdHksIGlzRXF1YWwsIGlzRnVuY3Rpb24sIGlzUGxhaW5PYmplY3QsIGlzU3RyaW5nLCBpc1VuZGVmaW5lZCwgbWVyZ2VPcHRpb25zLCBvbiwgcGFyc2VPcHRpb25zLCBzdGFydHNXaXRoLCB0b0Jvb2xlYW4sIHRvTGlzdCwgdG9OdW1iZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoVUlraXQpIHtcblxuICAgIGxldCB1aWQgPSAwO1xuXG4gICAgVUlraXQucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gbm9ybWFsaXplRGF0YShvcHRpb25zLCB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5jb25zdHJ1Y3Rvci5vcHRpb25zLCBvcHRpb25zLCB0aGlzKTtcbiAgICAgICAgdGhpcy4kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLiRwcm9wcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lcyA9IHtyZWFkczoge30sIHdyaXRlczoge319O1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcblxuICAgICAgICB0aGlzLl91aWQgPSB1aWQrKztcbiAgICAgICAgdGhpcy5faW5pdERhdGEoKTtcbiAgICAgICAgdGhpcy5faW5pdE1ldGhvZHMoKTtcbiAgICAgICAgdGhpcy5faW5pdENvbXB1dGVkcygpO1xuICAgICAgICB0aGlzLl9jYWxsSG9vaygnY3JlYXRlZCcpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmVsKSB7XG4gICAgICAgICAgICB0aGlzLiRtb3VudChvcHRpb25zLmVsKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBVSWtpdC5wcm90b3R5cGUuX2luaXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGNvbnN0IHtkYXRhID0ge319ID0gdGhpcy4kb3B0aW9ucztcblxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLiRwcm9wc1trZXldID0gdGhpc1trZXldID0gZGF0YVtrZXldO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdE1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY29uc3Qge21ldGhvZHN9ID0gdGhpcy4kb3B0aW9ucztcblxuICAgICAgICBpZiAobWV0aG9kcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWV0aG9kcykge1xuICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IG1ldGhvZHNba2V5XS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIFVJa2l0LnByb3RvdHlwZS5faW5pdENvbXB1dGVkcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBjb25zdCB7Y29tcHV0ZWR9ID0gdGhpcy4kb3B0aW9ucztcblxuICAgICAgICB0aGlzLl9jb21wdXRlZHMgPSB7fTtcblxuICAgICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJDb21wdXRlZCh0aGlzLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIFVJa2l0LnByb3RvdHlwZS5fY2FsbFdhdGNoZXMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY29uc3QgeyRvcHRpb25zOiB7Y29tcHV0ZWR9LCBfY29tcHV0ZWRzfSA9IHRoaXM7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gX2NvbXB1dGVkcykge1xuXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IF9jb21wdXRlZHNba2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBfY29tcHV0ZWRzW2tleV07XG5cbiAgICAgICAgICAgIGlmIChjb21wdXRlZFtrZXldLndhdGNoICYmICFpc0VxdWFsKHZhbHVlLCB0aGlzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWRba2V5XS53YXRjaC5jYWxsKHRoaXMsIHRoaXNba2V5XSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBVSWtpdC5wcm90b3R5cGUuX2luaXRQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuXG4gICAgICAgIGxldCBrZXk7XG5cbiAgICAgICAgcHJvcHMgPSBwcm9wcyB8fCBnZXRQcm9wcyh0aGlzLiRvcHRpb25zLCB0aGlzLiRuYW1lKTtcblxuICAgICAgICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChwcm9wc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXhjbHVkZSA9IFt0aGlzLiRvcHRpb25zLmNvbXB1dGVkLCB0aGlzLiRvcHRpb25zLm1ldGhvZHNdO1xuICAgICAgICBmb3IgKGtleSBpbiB0aGlzLiRwcm9wcykge1xuICAgICAgICAgICAgaWYgKGtleSBpbiBwcm9wcyAmJiBub3RJbihleGNsdWRlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gdGhpcy4kcHJvcHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBVSWtpdC5wcm90b3R5cGUuX2luaXRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgY29uc3Qge2V2ZW50c30gPSB0aGlzLiRvcHRpb25zO1xuXG4gICAgICAgIGlmIChldmVudHMpIHtcblxuICAgICAgICAgICAgZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPd24oZXZlbnQsICdoYW5kbGVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnQodGhpcywgZXZlbnRba2V5XSwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnQodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgVUlraXQucHJvdG90eXBlLl91bmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKHVuYmluZCA9PiB1bmJpbmQoKSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuICAgIH07XG5cbiAgICBVSWtpdC5wcm90b3R5cGUuX2luaXRPYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBsZXQge2F0dHJzLCBwcm9wcywgZWx9ID0gdGhpcy4kb3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuX29ic2VydmVyIHx8ICFwcm9wcyB8fCBhdHRycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF0dHJzID0gaXNBcnJheShhdHRycykgPyBhdHRycyA6IE9iamVjdC5rZXlzKHByb3BzKTtcblxuICAgICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGdldFByb3BzKHRoaXMuJG9wdGlvbnMsIHRoaXMuJG5hbWUpO1xuICAgICAgICAgICAgaWYgKGF0dHJzLnNvbWUoa2V5ID0+ICFpc1VuZGVmaW5lZChkYXRhW2tleV0pICYmIGRhdGFba2V5XSAhPT0gdGhpcy4kcHJvcHNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRyZXNldCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZpbHRlciA9IGF0dHJzLm1hcChrZXkgPT4gaHlwaGVuYXRlKGtleSkpLmNvbmNhdCh0aGlzLiRuYW1lKTtcblxuICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKGVsLCB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBmaWx0ZXIuY29uY2F0KGZpbHRlci5tYXAoa2V5ID0+IGBkYXRhLSR7a2V5fWApKVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJvcHMob3B0cywgbmFtZSkge1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgY29uc3Qge2FyZ3MgPSBbXSwgcHJvcHMgPSB7fSwgZWx9ID0gb3B0cztcblxuICAgICAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBnZXREYXRhKGVsLCBwcm9wKTtcblxuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcblxuICAgICAgICAgICAgICAgIHZhbHVlID0gcHJvcHNba2V5XSA9PT0gQm9vbGVhbiAmJiB2YWx1ZSA9PT0gJydcbiAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIDogY29lcmNlKHByb3BzW2tleV0sIHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAndGFyZ2V0JyAmJiAoIXZhbHVlIHx8IHN0YXJ0c1dpdGgodmFsdWUsICdfJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhnZXREYXRhKGVsLCBuYW1lKSwgYXJncyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBpZiAocHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRhdGFbcHJvcF0gPSBjb2VyY2UocHJvcHNbcHJvcF0sIG9wdGlvbnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdpc3RlckNvbXB1dGVkKGNvbXBvbmVudCwga2V5LCBjYikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29tcG9uZW50LCBrZXksIHtcblxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgZ2V0KCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qge19jb21wdXRlZHMsICRwcm9wcywgJGVsfSA9IGNvbXBvbmVudDtcblxuICAgICAgICAgICAgICAgIGlmICghaGFzT3duKF9jb21wdXRlZHMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvbXB1dGVkc1trZXldID0gKGNiLmdldCB8fCBjYikuY2FsbChjb21wb25lbnQsICRwcm9wcywgJGVsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbXB1dGVkc1trZXldO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7X2NvbXB1dGVkc30gPSBjb21wb25lbnQ7XG5cbiAgICAgICAgICAgICAgICBfY29tcHV0ZWRzW2tleV0gPSBjYi5zZXQgPyBjYi5zZXQuY2FsbChjb21wb25lbnQsIHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKF9jb21wdXRlZHNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9jb21wdXRlZHNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJFdmVudChjb21wb25lbnQsIGV2ZW50LCBrZXkpIHtcblxuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QoZXZlbnQpKSB7XG4gICAgICAgICAgICBldmVudCA9ICh7bmFtZToga2V5LCBoYW5kbGVyOiBldmVudH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHtuYW1lLCBlbCwgaGFuZGxlciwgY2FwdHVyZSwgcGFzc2l2ZSwgZGVsZWdhdGUsIGZpbHRlciwgc2VsZn0gPSBldmVudDtcbiAgICAgICAgZWwgPSBpc0Z1bmN0aW9uKGVsKVxuICAgICAgICAgICAgPyBlbC5jYWxsKGNvbXBvbmVudClcbiAgICAgICAgICAgIDogZWwgfHwgY29tcG9uZW50LiRlbDtcblxuICAgICAgICBpZiAoaXNBcnJheShlbCkpIHtcbiAgICAgICAgICAgIGVsLmZvckVhY2goZWwgPT4gcmVnaXN0ZXJFdmVudChjb21wb25lbnQsIGFzc2lnbih7fSwgZXZlbnQsIHtlbH0pLCBrZXkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZWwgfHwgZmlsdGVyICYmICFmaWx0ZXIuY2FsbChjb21wb25lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb21wb25lbnQuX2V2ZW50cy5wdXNoKFxuICAgICAgICAgICAgb24oXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAhZGVsZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgIDogaXNTdHJpbmcoZGVsZWdhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRlbGVnYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGRlbGVnYXRlLmNhbGwoY29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICBpc1N0cmluZyhoYW5kbGVyKSA/IGNvbXBvbmVudFtoYW5kbGVyXSA6IGhhbmRsZXIuYmluZChjb21wb25lbnQpLFxuICAgICAgICAgICAgICAgIHtwYXNzaXZlLCBjYXB0dXJlLCBzZWxmfVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm90SW4ob3B0aW9ucywga2V5KSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmV2ZXJ5KGFyciA9PiAhYXJyIHx8ICFoYXNPd24oYXJyLCBrZXkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2VyY2UodHlwZSwgdmFsdWUpIHtcblxuICAgICAgICBpZiAodHlwZSA9PT0gQm9vbGVhbikge1xuICAgICAgICAgICAgcmV0dXJuIHRvQm9vbGVhbih2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdsaXN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRvTGlzdCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHlwZSA/IHR5cGUodmFsdWUpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplRGF0YSh7ZGF0YSwgZWx9LCB7YXJncywgcHJvcHMgPSB7fX0pIHtcbiAgICAgICAgZGF0YSA9IGlzQXJyYXkoZGF0YSlcbiAgICAgICAgICAgID8gIWlzRW1wdHkoYXJncylcbiAgICAgICAgICAgICAgICA/IGRhdGEuc2xpY2UoMCwgYXJncy5sZW5ndGgpLnJlZHVjZSgoZGF0YSwgdmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduKGRhdGEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbYXJnc1tpbmRleF1dID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfSwge30pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIDogZGF0YTtcblxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChkYXRhW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gcHJvcHNba2V5XSA/IGNvZXJjZShwcm9wc1trZXldLCBkYXRhW2tleV0sIGVsKSA6IGRhdGFba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG59XG4iLCJpbXBvcnQge2h5cGhlbmF0ZSwgaXNFbXB0eSwgcmVtb3ZlLCB3aXRoaW59IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoVUlraXQpIHtcblxuICAgIGNvbnN0IERBVEEgPSBVSWtpdC5kYXRhO1xuXG4gICAgVUlraXQucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChlbCkge1xuXG4gICAgICAgIGNvbnN0IHtuYW1lfSA9IHRoaXMuJG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFlbFtEQVRBXSkge1xuICAgICAgICAgICAgZWxbREFUQV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbFtEQVRBXVtuYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxbREFUQV1bbmFtZV0gPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuJGVsID0gdGhpcy4kb3B0aW9ucy5lbCA9IHRoaXMuJG9wdGlvbnMuZWwgfHwgZWw7XG5cbiAgICAgICAgaWYgKHdpdGhpbihlbCwgZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsQ29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgVUlraXQucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy5fY2FsbFVwZGF0ZShlKTtcbiAgICB9O1xuXG4gICAgVUlraXQucHJvdG90eXBlLiRyZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY2FsbERpc2Nvbm5lY3RlZCgpO1xuICAgICAgICB0aGlzLl9jYWxsQ29ubmVjdGVkKCk7XG4gICAgfTtcblxuICAgIFVJa2l0LnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uIChyZW1vdmVFbCA9IGZhbHNlKSB7XG5cbiAgICAgICAgY29uc3Qge2VsLCBuYW1lfSA9IHRoaXMuJG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsRGlzY29ubmVjdGVkKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jYWxsSG9vaygnZGVzdHJveScpO1xuXG4gICAgICAgIGlmICghZWwgfHwgIWVsW0RBVEFdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgZWxbREFUQV1bbmFtZV07XG5cbiAgICAgICAgaWYgKCFpc0VtcHR5KGVsW0RBVEFdKSkge1xuICAgICAgICAgICAgZGVsZXRlIGVsW0RBVEFdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbW92ZUVsKSB7XG4gICAgICAgICAgICByZW1vdmUodGhpcy4kZWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFVJa2l0LnByb3RvdHlwZS4kY3JlYXRlID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgZWxlbWVudCwgZGF0YSkge1xuICAgICAgICByZXR1cm4gVUlraXRbY29tcG9uZW50XShlbGVtZW50LCBkYXRhKTtcbiAgICB9O1xuXG4gICAgVUlraXQucHJvdG90eXBlLiR1cGRhdGUgPSBVSWtpdC51cGRhdGU7XG4gICAgVUlraXQucHJvdG90eXBlLiRnZXRDb21wb25lbnQgPSBVSWtpdC5nZXRDb21wb25lbnQ7XG5cbiAgICBjb25zdCBuYW1lcyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFVJa2l0LnByb3RvdHlwZSwge1xuXG4gICAgICAgICRjb250YWluZXI6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoVUlraXQsICdjb250YWluZXInKSxcblxuICAgICAgICAkbmFtZToge1xuXG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge25hbWV9ID0gdGhpcy4kb3B0aW9ucztcblxuICAgICAgICAgICAgICAgIGlmICghbmFtZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNbbmFtZV0gPSBVSWtpdC5wcmVmaXggKyBoeXBoZW5hdGUobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVzW25hbWVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0pO1xuXG59XG4iLCJpbXBvcnQgeyQkLCBhc3NpZ24sIGNhbWVsaXplLCBmYXN0ZG9tLCBoeXBoZW5hdGUsIGlzUGxhaW5PYmplY3QsIHN0YXJ0c1dpdGh9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoVUlraXQpIHtcblxuICAgIGNvbnN0IERBVEEgPSBVSWtpdC5kYXRhO1xuXG4gICAgY29uc3QgY29tcG9uZW50cyA9IHt9O1xuXG4gICAgVUlraXQuY29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcblxuICAgICAgICBjb25zdCBpZCA9IGh5cGhlbmF0ZShuYW1lKTtcblxuICAgICAgICBuYW1lID0gY2FtZWxpemUoaWQpO1xuXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuXG4gICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChjb21wb25lbnRzW25hbWVdKSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHNbbmFtZV0gPSBVSWtpdC5leHRlbmQoY29tcG9uZW50c1tuYW1lXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRzW25hbWVdO1xuXG4gICAgICAgIH1cblxuICAgICAgICBVSWtpdFtuYW1lXSA9IGZ1bmN0aW9uIChlbGVtZW50LCBkYXRhKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IFVJa2l0LmNvbXBvbmVudChuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWxcbiAgICAgICAgICAgICAgICA/IG5ldyBjb21wb25lbnQoe2RhdGE6IGlzUGxhaW5PYmplY3QoZWxlbWVudCkgPyBlbGVtZW50IDogWy4uLmFyZ3VtZW50c119KVxuICAgICAgICAgICAgICAgIDogIWVsZW1lbnQgPyBpbml0KGVsZW1lbnQpIDogJCQoZWxlbWVudCkubWFwKGluaXQpWzBdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBpbml0KGVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gVUlraXQuZ2V0Q29tcG9uZW50KGVsZW1lbnQsIG5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHtlbDogZWxlbWVudCwgZGF0YX0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBvcHQgPSBpc1BsYWluT2JqZWN0KG9wdGlvbnMpID8gYXNzaWduKHt9LCBvcHRpb25zKSA6IG9wdGlvbnMub3B0aW9ucztcblxuICAgICAgICBvcHQubmFtZSA9IG5hbWU7XG5cbiAgICAgICAgaWYgKG9wdC5pbnN0YWxsKSB7XG4gICAgICAgICAgICBvcHQuaW5zdGFsbChVSWtpdCwgb3B0LCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChVSWtpdC5faW5pdGlhbGl6ZWQgJiYgIW9wdC5mdW5jdGlvbmFsKSB7XG4gICAgICAgICAgICBmYXN0ZG9tLnJlYWQoKCkgPT4gVUlraXRbbmFtZV0oYFt1ay0ke2lkfV0sW2RhdGEtdWstJHtpZH1dYCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KG9wdGlvbnMpID8gb3B0IDogb3B0aW9ucztcbiAgICB9O1xuXG4gICAgVUlraXQuZ2V0Q29tcG9uZW50cyA9IGVsZW1lbnQgPT4gZWxlbWVudCAmJiBlbGVtZW50W0RBVEFdIHx8IHt9O1xuICAgIFVJa2l0LmdldENvbXBvbmVudCA9IChlbGVtZW50LCBuYW1lKSA9PiBVSWtpdC5nZXRDb21wb25lbnRzKGVsZW1lbnQpW25hbWVdO1xuXG4gICAgVUlraXQuY29ubmVjdCA9IG5vZGUgPT4ge1xuXG4gICAgICAgIGlmIChub2RlW0RBVEFdKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gbm9kZVtEQVRBXSkge1xuICAgICAgICAgICAgICAgIG5vZGVbREFUQV1bbmFtZV0uX2NhbGxDb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKG5vZGUuYXR0cmlidXRlc1tpXS5uYW1lKTtcblxuICAgICAgICAgICAgaWYgKG5hbWUgJiYgbmFtZSBpbiBjb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgVUlraXRbbmFtZV0obm9kZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFVJa2l0LmRpc2Nvbm5lY3QgPSBub2RlID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIG5vZGVbREFUQV0pIHtcbiAgICAgICAgICAgIG5vZGVbREFUQV1bbmFtZV0uX2NhbGxEaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIHN0YXJ0c1dpdGgoYXR0cmlidXRlLCAndWstJykgfHwgc3RhcnRzV2l0aChhdHRyaWJ1dGUsICdkYXRhLXVrLScpXG4gICAgICAgID8gY2FtZWxpemUoYXR0cmlidXRlLnJlcGxhY2UoJ2RhdGEtdWstJywgJycpLnJlcGxhY2UoJ3VrLScsICcnKSlcbiAgICAgICAgOiBmYWxzZTtcbn1cbiIsImltcG9ydCBnbG9iYWxBUEkgZnJvbSAnLi9nbG9iYWwnO1xuaW1wb3J0IGhvb2tzQVBJIGZyb20gJy4vaG9va3MnO1xuaW1wb3J0IHN0YXRlQVBJIGZyb20gJy4vc3RhdGUnO1xuaW1wb3J0IGluc3RhbmNlQVBJIGZyb20gJy4vaW5zdGFuY2UnO1xuaW1wb3J0IGNvbXBvbmVudEFQSSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5jb25zdCBVSWtpdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdGhpcy5faW5pdChvcHRpb25zKTtcbn07XG5cblVJa2l0LnV0aWwgPSB1dGlsO1xuVUlraXQuZGF0YSA9ICdfX3Vpa2l0X18nO1xuVUlraXQucHJlZml4ID0gJ3VrLSc7XG5VSWtpdC5vcHRpb25zID0ge307XG5VSWtpdC52ZXJzaW9uID0gVkVSU0lPTjtcblxuZ2xvYmFsQVBJKFVJa2l0KTtcbmhvb2tzQVBJKFVJa2l0KTtcbnN0YXRlQVBJKFVJa2l0KTtcbmNvbXBvbmVudEFQSShVSWtpdCk7XG5pbnN0YW5jZUFQSShVSWtpdCk7XG5cbmV4cG9ydCBkZWZhdWx0IFVJa2l0O1xuIiwiaW1wb3J0IHtjc3MsIGZhc3Rkb20sIGdldEV2ZW50UG9zLCBpc1RvdWNoLCBvbiwgb25jZSwgcG9pbnRlckNhbmNlbCwgcG9pbnRlckRvd24sIHBvaW50ZXJVcCwgcmVhZHksIHRvTXMsIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoVUlraXQpIHtcblxuICAgIHJlYWR5KCgpID0+IHtcblxuICAgICAgICBVSWtpdC51cGRhdGUoKTtcbiAgICAgICAgb24od2luZG93LCAnbG9hZCByZXNpemUnLCAoKSA9PiBVSWtpdC51cGRhdGUobnVsbCwgJ3Jlc2l6ZScpKTtcbiAgICAgICAgb24oZG9jdW1lbnQsICdsb2FkZWRtZXRhZGF0YSBsb2FkJywgKHt0YXJnZXR9KSA9PiBVSWtpdC51cGRhdGUodGFyZ2V0LCAncmVzaXplJyksIHRydWUpO1xuXG4gICAgICAgIC8vIHRocm90dGxlIGBzY3JvbGxgIGV2ZW50IChTYWZhcmkgdHJpZ2dlcnMgbXVsdGlwbGUgYHNjcm9sbGAgZXZlbnRzIHBlciBmcmFtZSlcbiAgICAgICAgbGV0IHBlbmRpbmc7XG4gICAgICAgIG9uKHdpbmRvdywgJ3Njcm9sbCcsIGUgPT4ge1xuXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZmFzdGRvbS53cml0ZSgoKSA9PiBwZW5kaW5nID0gZmFsc2UpO1xuXG4gICAgICAgICAgICBVSWtpdC51cGRhdGUobnVsbCwgZS50eXBlKTtcblxuICAgICAgICB9LCB7cGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZX0pO1xuXG4gICAgICAgIGxldCBzdGFydGVkID0gMDtcbiAgICAgICAgb24oZG9jdW1lbnQsICdhbmltYXRpb25zdGFydCcsICh7dGFyZ2V0fSkgPT4ge1xuICAgICAgICAgICAgaWYgKChjc3ModGFyZ2V0LCAnYW5pbWF0aW9uTmFtZScpIHx8ICcnKS5tYXRjaCgvXnVrLS4qKGxlZnR8cmlnaHQpLykpIHtcblxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQrKztcbiAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ292ZXJmbG93WCcsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dYJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgdG9Ncyhjc3ModGFyZ2V0LCAnYW5pbWF0aW9uRHVyYXRpb24nKSkgKyAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICBsZXQgb2ZmO1xuICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlckRvd24sIGUgPT4ge1xuXG4gICAgICAgICAgICBvZmYgJiYgb2ZmKCk7XG5cbiAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGFuZGxlIFN3aXBlIEdlc3R1cmVcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGdldEV2ZW50UG9zKGUpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gJ3RhZ05hbWUnIGluIGUudGFyZ2V0ID8gZS50YXJnZXQgOiBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgb2ZmID0gb25jZShkb2N1bWVudCwgYCR7cG9pbnRlclVwfSAke3BvaW50ZXJDYW5jZWx9YCwgZSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7eCwgeX0gPSBnZXRFdmVudFBvcyhlKTtcblxuICAgICAgICAgICAgICAgIC8vIHN3aXBlXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB4ICYmIE1hdGguYWJzKHBvcy54IC0geCkgPiAxMDAgfHwgeSAmJiBNYXRoLmFicyhwb3MueSAtIHkpID4gMTAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgJ3N3aXBlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgYHN3aXBlJHtzd2lwZURpcmVjdGlvbihwb3MueCwgcG9zLnksIHgsIHkpfWApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEZvcmNlIGNsaWNrIGV2ZW50IGFueXdoZXJlIG9uIGlPUyA8IDEzXG4gICAgICAgICAgICBpZiAocG9pbnRlckRvd24gPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnY3Vyc29yJywgJ3BvaW50ZXInKTtcbiAgICAgICAgICAgICAgICBvbmNlKGRvY3VtZW50LCBgJHtwb2ludGVyVXB9ICR7cG9pbnRlckNhbmNlbH1gLCAoKSA9PlxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ2N1cnNvcicsICcnKVxuICAgICAgICAgICAgICAgICAgICAsIDUwKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSwge3Bhc3NpdmU6IHRydWV9KTtcblxuICAgIH0pO1xuXG59XG5cbmZ1bmN0aW9uIHN3aXBlRGlyZWN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHgxIC0geDIpID49IE1hdGguYWJzKHkxIC0geTIpXG4gICAgICAgID8geDEgLSB4MiA+IDBcbiAgICAgICAgICAgID8gJ0xlZnQnXG4gICAgICAgICAgICA6ICdSaWdodCdcbiAgICAgICAgOiB5MSAtIHkyID4gMFxuICAgICAgICAgICAgPyAnVXAnXG4gICAgICAgICAgICA6ICdEb3duJztcbn1cbiIsImltcG9ydCB7Z2V0Q29tcG9uZW50TmFtZX0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHthcHBseSwgZmFzdGRvbSwgaGFzQXR0cn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChVSWtpdCkge1xuXG4gICAgY29uc3Qge2Nvbm5lY3QsIGRpc2Nvbm5lY3R9ID0gVUlraXQ7XG5cbiAgICBpZiAoISgnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmFzdGRvbS5yZWFkKGluaXQpO1xuXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcblxuICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgYXBwbHkoZG9jdW1lbnQuYm9keSwgY29ubmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICAobmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25zID0+IG11dGF0aW9ucy5mb3JFYWNoKGFwcGx5TXV0YXRpb24pKSkub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIFVJa2l0Ll9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvbihtdXRhdGlvbikge1xuXG4gICAgICAgIGNvbnN0IHt0YXJnZXQsIHR5cGV9ID0gbXV0YXRpb247XG5cbiAgICAgICAgY29uc3QgdXBkYXRlID0gdHlwZSAhPT0gJ2F0dHJpYnV0ZXMnXG4gICAgICAgICAgICA/IGFwcGx5Q2hpbGRMaXN0KG11dGF0aW9uKVxuICAgICAgICAgICAgOiBhcHBseUF0dHJpYnV0ZShtdXRhdGlvbik7XG5cbiAgICAgICAgdXBkYXRlICYmIFVJa2l0LnVwZGF0ZSh0YXJnZXQpO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlBdHRyaWJ1dGUoe3RhcmdldCwgYXR0cmlidXRlTmFtZX0pIHtcblxuICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGF0dHJpYnV0ZU5hbWUpO1xuXG4gICAgICAgIGlmICghbmFtZSB8fCAhKG5hbWUgaW4gVUlraXQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzQXR0cih0YXJnZXQsIGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgICAgICBVSWtpdFtuYW1lXSh0YXJnZXQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBVSWtpdC5nZXRDb21wb25lbnQodGFyZ2V0LCBuYW1lKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICBjb21wb25lbnQuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseUNoaWxkTGlzdCh7YWRkZWROb2RlcywgcmVtb3ZlZE5vZGVzfSkge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXBwbHkoYWRkZWROb2Rlc1tpXSwgY29ubmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbW92ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXBwbHkocmVtb3ZlZE5vZGVzW2ldLCBkaXNjb25uZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHthZGRDbGFzcywgaGFzQ2xhc3N9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb25uZWN0ZWQoKSB7XG4gICAgICAgICFoYXNDbGFzcyh0aGlzLiRlbCwgdGhpcy4kbmFtZSkgJiYgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuJG5hbWUpO1xuICAgIH1cblxufTtcbiIsImltcG9ydCB7JCQsIEFuaW1hdGlvbiwgYXNzaWduLCBhdHRyLCBjc3MsIGZhc3Rkb20sIGhhc0F0dHIsIGhhc0NsYXNzLCBoZWlnaHQsIGluY2x1ZGVzLCBpc0Jvb2xlYW4sIGlzRnVuY3Rpb24sIGlzVW5kZWZpbmVkLCBpc1Zpc2libGUsIG5vb3AsIFByb21pc2UsIHRvRmxvYXQsIHRvZ2dsZUNsYXNzLCB0b05vZGVzLCBUcmFuc2l0aW9uLCB0cmlnZ2VyfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgY2xzOiBCb29sZWFuLFxuICAgICAgICBhbmltYXRpb246ICdsaXN0JyxcbiAgICAgICAgZHVyYXRpb246IE51bWJlcixcbiAgICAgICAgb3JpZ2luOiBTdHJpbmcsXG4gICAgICAgIHRyYW5zaXRpb246IFN0cmluZyxcbiAgICAgICAgcXVldWVkOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgY2xzOiBmYWxzZSxcbiAgICAgICAgYW5pbWF0aW9uOiBbZmFsc2VdLFxuICAgICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgICBvcmlnaW46IGZhbHNlLFxuICAgICAgICB0cmFuc2l0aW9uOiAnbGluZWFyJyxcbiAgICAgICAgcXVldWVkOiBmYWxzZSxcblxuICAgICAgICBpbml0UHJvcHM6IHtcbiAgICAgICAgICAgIG92ZXJmbG93OiAnJyxcbiAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiAnJyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICcnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnJyxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJydcbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlUHJvcHM6IHtcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiAwLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGhhc0FuaW1hdGlvbih7YW5pbWF0aW9ufSkge1xuICAgICAgICAgICAgcmV0dXJuICEhYW5pbWF0aW9uWzBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc1RyYW5zaXRpb24oe2FuaW1hdGlvbn0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc0FuaW1hdGlvbiAmJiBhbmltYXRpb25bMF0gPT09IHRydWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgdG9nZ2xlRWxlbWVudCh0YXJnZXRzLCBzaG93LCBhbmltYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRzID0gdG9Ob2Rlcyh0YXJnZXRzKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbCA9IHRhcmdldHMgPT4gUHJvbWlzZS5hbGwodGFyZ2V0cy5tYXAoZWwgPT4gdGhpcy5fdG9nZ2xlRWxlbWVudChlbCwgc2hvdywgYW5pbWF0ZSkpKTtcblxuICAgICAgICAgICAgICAgIGxldCBwO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnF1ZXVlZCB8fCAhaXNVbmRlZmluZWQoYW5pbWF0ZSkgfHwgIWlzVW5kZWZpbmVkKHNob3cpIHx8ICF0aGlzLmhhc0FuaW1hdGlvbiB8fCB0YXJnZXRzLmxlbmd0aCA8IDIpIHtcblxuICAgICAgICAgICAgICAgICAgICBwID0gYWxsKHRhcmdldHMpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVkID0gdGFyZ2V0cy5maWx0ZXIoZWwgPT4gdGhpcy5pc1RvZ2dsZWQoZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW50b2dnbGVkID0gdGFyZ2V0cy5maWx0ZXIoZWwgPT4gIWluY2x1ZGVzKHRvZ2dsZWQsIGVsKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtib2R5fSA9IGRvY3VtZW50O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JvbGwgPSBib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW2VsXSA9IHRvZ2dsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluUHJvZ3Jlc3MgPSBBbmltYXRpb24uaW5Qcm9ncmVzcyhlbCkgJiYgaGFzQ2xhc3MoZWwsICd1ay1hbmltYXRpb24tbGVhdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IFRyYW5zaXRpb24uaW5Qcm9ncmVzcyhlbCkgJiYgZWwuc3R5bGUuaGVpZ2h0ID09PSAnMHB4JztcblxuICAgICAgICAgICAgICAgICAgICBwID0gYWxsKHRvZ2dsZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IGFsbCh1bnRvZ2dsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2Nyb2xsVG9wID0gc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAudGhlbihyZXNvbHZlLCBub29wKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlTm93KHRhcmdldHMsIHNob3cpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZUVsZW1lbnQodGFyZ2V0cywgc2hvdywgZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzVG9nZ2xlZChlbCkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0b05vZGVzKGVsIHx8IHRoaXMuJGVsKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsc1xuICAgICAgICAgICAgICAgID8gaGFzQ2xhc3Mobm9kZXMsIHRoaXMuY2xzLnNwbGl0KCcgJylbMF0pXG4gICAgICAgICAgICAgICAgOiAhaGFzQXR0cihub2RlcywgJ2hpZGRlbicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZUFyaWEoZWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNscyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBhdHRyKGVsLCAnYXJpYS1oaWRkZW4nLCAhdGhpcy5pc1RvZ2dsZWQoZWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfdG9nZ2xlRWxlbWVudChlbCwgc2hvdywgYW5pbWF0ZSkge1xuXG4gICAgICAgICAgICBzaG93ID0gaXNCb29sZWFuKHNob3cpXG4gICAgICAgICAgICAgICAgPyBzaG93XG4gICAgICAgICAgICAgICAgOiBBbmltYXRpb24uaW5Qcm9ncmVzcyhlbClcbiAgICAgICAgICAgICAgICAgICAgPyBoYXNDbGFzcyhlbCwgJ3VrLWFuaW1hdGlvbi1sZWF2ZScpXG4gICAgICAgICAgICAgICAgICAgIDogVHJhbnNpdGlvbi5pblByb2dyZXNzKGVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlbC5zdHlsZS5oZWlnaHQgPT09ICcwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICF0aGlzLmlzVG9nZ2xlZChlbCk7XG5cbiAgICAgICAgICAgIGlmICghdHJpZ2dlcihlbCwgYGJlZm9yZSR7c2hvdyA/ICdzaG93JyA6ICdoaWRlJ31gLCBbdGhpc10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSAoXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihhbmltYXRlKVxuICAgICAgICAgICAgICAgICAgICA/IGFuaW1hdGVcbiAgICAgICAgICAgICAgICAgICAgOiBhbmltYXRlID09PSBmYWxzZSB8fCAhdGhpcy5oYXNBbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5fdG9nZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaGFzVHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdG9nZ2xlSGVpZ2h0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0b2dnbGVBbmltYXRpb24odGhpcylcbiAgICAgICAgICAgICkoZWwsIHNob3cpO1xuXG4gICAgICAgICAgICB0cmlnZ2VyKGVsLCBzaG93ID8gJ3Nob3cnIDogJ2hpZGUnLCBbdGhpc10pO1xuXG4gICAgICAgICAgICBjb25zdCBmaW5hbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKGVsLCBzaG93ID8gJ3Nob3duJyA6ICdoaWRkZW4nLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIHRoaXMuJHVwZGF0ZShlbCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZSA/IHByb21pc2UudGhlbihmaW5hbCkgOiBQcm9taXNlLnJlc29sdmUoZmluYWwoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RvZ2dsZShlbCwgdG9nZ2xlZCkge1xuXG4gICAgICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b2dnbGVkID0gQm9vbGVhbih0b2dnbGVkKTtcblxuICAgICAgICAgICAgbGV0IGNoYW5nZWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5jbHMpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gaW5jbHVkZXModGhpcy5jbHMsICcgJykgfHwgdG9nZ2xlZCAhPT0gaGFzQ2xhc3MoZWwsIHRoaXMuY2xzKTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkICYmIHRvZ2dsZUNsYXNzKGVsLCB0aGlzLmNscywgaW5jbHVkZXModGhpcy5jbHMsICcgJykgPyB1bmRlZmluZWQgOiB0b2dnbGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRvZ2dsZWQgPT09IGhhc0F0dHIoZWwsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkICYmIGF0dHIoZWwsICdoaWRkZW4nLCAhdG9nZ2xlZCA/ICcnIDogbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQkKCdbYXV0b2ZvY3VzXScsIGVsKS5zb21lKGVsID0+IGlzVmlzaWJsZShlbCkgPyBlbC5mb2N1cygpIHx8IHRydWUgOiBlbC5ibHVyKCkpO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFyaWEoZWwpO1xuICAgICAgICAgICAgY2hhbmdlZCAmJiB0aGlzLiR1cGRhdGUoZWwpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIHRvZ2dsZUhlaWdodCh7aXNUb2dnbGVkLCBkdXJhdGlvbiwgaW5pdFByb3BzLCBoaWRlUHJvcHMsIHRyYW5zaXRpb24sIF90b2dnbGV9KSB7XG4gICAgcmV0dXJuIChlbCwgc2hvdykgPT4ge1xuXG4gICAgICAgIGNvbnN0IGluUHJvZ3Jlc3MgPSBUcmFuc2l0aW9uLmluUHJvZ3Jlc3MoZWwpO1xuICAgICAgICBjb25zdCBpbm5lciA9IGVsLmhhc0NoaWxkTm9kZXMgPyB0b0Zsb2F0KGNzcyhlbC5maXJzdEVsZW1lbnRDaGlsZCwgJ21hcmdpblRvcCcpKSArIHRvRmxvYXQoY3NzKGVsLmxhc3RFbGVtZW50Q2hpbGQsICdtYXJnaW5Cb3R0b20nKSkgOiAwO1xuICAgICAgICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gaXNWaXNpYmxlKGVsKSA/IGhlaWdodChlbCkgKyAoaW5Qcm9ncmVzcyA/IDAgOiBpbm5lcikgOiAwO1xuXG4gICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKGVsKTtcblxuICAgICAgICBpZiAoIWlzVG9nZ2xlZChlbCkpIHtcbiAgICAgICAgICAgIF90b2dnbGUoZWwsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaGVpZ2h0KGVsLCAnJyk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGNoaWxkIGNvbXBvbmVudHMgZmlyc3RcbiAgICAgICAgZmFzdGRvbS5mbHVzaCgpO1xuXG4gICAgICAgIGNvbnN0IGVuZEhlaWdodCA9IGhlaWdodChlbCkgKyAoaW5Qcm9ncmVzcyA/IDAgOiBpbm5lcik7XG4gICAgICAgIGhlaWdodChlbCwgY3VycmVudEhlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIChzaG93XG4gICAgICAgICAgICAgICAgPyBUcmFuc2l0aW9uLnN0YXJ0KGVsLCBhc3NpZ24oe30sIGluaXRQcm9wcywge292ZXJmbG93OiAnaGlkZGVuJywgaGVpZ2h0OiBlbmRIZWlnaHR9KSwgTWF0aC5yb3VuZChkdXJhdGlvbiAqICgxIC0gY3VycmVudEhlaWdodCAvIGVuZEhlaWdodCkpLCB0cmFuc2l0aW9uKVxuICAgICAgICAgICAgICAgIDogVHJhbnNpdGlvbi5zdGFydChlbCwgaGlkZVByb3BzLCBNYXRoLnJvdW5kKGR1cmF0aW9uICogKGN1cnJlbnRIZWlnaHQgLyBlbmRIZWlnaHQpKSwgdHJhbnNpdGlvbikudGhlbigoKSA9PiBfdG9nZ2xlKGVsLCBmYWxzZSkpXG4gICAgICAgICkudGhlbigoKSA9PiBjc3MoZWwsIGluaXRQcm9wcykpO1xuXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQW5pbWF0aW9uKHthbmltYXRpb24sIGR1cmF0aW9uLCBvcmlnaW4sIF90b2dnbGV9KSB7XG4gICAgcmV0dXJuIChlbCwgc2hvdykgPT4ge1xuXG4gICAgICAgIEFuaW1hdGlvbi5jYW5jZWwoZWwpO1xuXG4gICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgICBfdG9nZ2xlKGVsLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBBbmltYXRpb24uaW4oZWwsIGFuaW1hdGlvblswXSwgZHVyYXRpb24sIG9yaWdpbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQW5pbWF0aW9uLm91dChlbCwgYW5pbWF0aW9uWzFdIHx8IGFuaW1hdGlvblswXSwgZHVyYXRpb24sIG9yaWdpbikudGhlbigoKSA9PiBfdG9nZ2xlKGVsLCBmYWxzZSkpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgQ2xhc3MgZnJvbSAnLi4vbWl4aW4vY2xhc3MnO1xuaW1wb3J0IFRvZ2dsYWJsZSBmcm9tICcuLi9taXhpbi90b2dnbGFibGUnO1xuaW1wb3J0IHskLCAkJCwgYXR0ciwgZmlsdGVyLCBnZXRJbmRleCwgaGFzQ2xhc3MsIGluY2x1ZGVzLCBpbmRleCwgaXNJblZpZXcsIHNjcm9sbEludG9WaWV3LCB0b2dnbGVDbGFzcywgdW53cmFwLCB3cmFwQWxsfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQ2xhc3MsIFRvZ2dsYWJsZV0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICB0YXJnZXRzOiBTdHJpbmcsXG4gICAgICAgIGFjdGl2ZTogbnVsbCxcbiAgICAgICAgY29sbGFwc2libGU6IEJvb2xlYW4sXG4gICAgICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgICAgICB0b2dnbGU6IFN0cmluZyxcbiAgICAgICAgY29udGVudDogU3RyaW5nLFxuICAgICAgICB0cmFuc2l0aW9uOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICB0YXJnZXRzOiAnPiAqJyxcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgYW5pbWF0aW9uOiBbdHJ1ZV0sXG4gICAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuICAgICAgICBtdWx0aXBsZTogZmFsc2UsXG4gICAgICAgIGNsc09wZW46ICd1ay1vcGVuJyxcbiAgICAgICAgdG9nZ2xlOiAnPiAudWstYWNjb3JkaW9uLXRpdGxlJyxcbiAgICAgICAgY29udGVudDogJz4gLnVrLWFjY29yZGlvbi1jb250ZW50JyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ2Vhc2UnXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaXRlbXMoe3RhcmdldHN9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAkJCh0YXJnZXRzLCAkZWwpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZXZlbnRzOiBbXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICBkZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy50YXJnZXRzfSAke3RoaXMuJHByb3BzLnRvZ2dsZX1gO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKGluZGV4KCQkKGAke3RoaXMudGFyZ2V0c30gJHt0aGlzLiRwcm9wcy50b2dnbGV9YCwgdGhpcy4kZWwpLCBlLmN1cnJlbnQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICBdLFxuXG4gICAgY29ubmVjdGVkKCkge1xuXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuaXRlbXNbTnVtYmVyKHRoaXMuYWN0aXZlKV07XG4gICAgICAgIGlmIChhY3RpdmUgJiYgIWhhc0NsYXNzKGFjdGl2ZSwgdGhpcy5jbHNPcGVuKSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGUoYWN0aXZlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlKCkge1xuXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChlbCA9PiB0aGlzLl90b2dnbGUoJCh0aGlzLmNvbnRlbnQsIGVsKSwgaGFzQ2xhc3MoZWwsIHRoaXMuY2xzT3BlbikpKTtcblxuICAgICAgICBjb25zdCBhY3RpdmUgPSAhdGhpcy5jb2xsYXBzaWJsZSAmJiAhaGFzQ2xhc3ModGhpcy5pdGVtcywgdGhpcy5jbHNPcGVuKSAmJiB0aGlzLml0ZW1zWzBdO1xuICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZShhY3RpdmUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgdG9nZ2xlKGl0ZW0sIGFuaW1hdGUpIHtcblxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBnZXRJbmRleChpdGVtLCB0aGlzLml0ZW1zKTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IGZpbHRlcih0aGlzLml0ZW1zLCBgLiR7dGhpcy5jbHNPcGVufWApO1xuXG4gICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtc1tpbmRleF07XG5cbiAgICAgICAgICAgIGl0ZW0gJiYgW2l0ZW1dXG4gICAgICAgICAgICAgICAgLmNvbmNhdCghdGhpcy5tdWx0aXBsZSAmJiAhaW5jbHVkZXMoYWN0aXZlLCBpdGVtKSAmJiBhY3RpdmUgfHwgW10pXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZWwgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzSXRlbSA9IGVsID09PSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGlzSXRlbSAmJiAhaGFzQ2xhc3MoZWwsIHRoaXMuY2xzT3Blbik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZSAmJiBpc0l0ZW0gJiYgIXRoaXMuY29sbGFwc2libGUgJiYgYWN0aXZlLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCB0aGlzLmNsc09wZW4sIHN0YXRlKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZWwuX3dyYXBwZXIgPyBlbC5fd3JhcHBlci5maXJzdEVsZW1lbnRDaGlsZCA6ICQodGhpcy5jb250ZW50LCBlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5fd3JhcHBlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX3dyYXBwZXIgPSB3cmFwQWxsKGNvbnRlbnQsICc8ZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cihlbC5fd3JhcHBlciwgJ2hpZGRlbicsIHN0YXRlID8gJycgOiBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZShjb250ZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KGVsLl93cmFwcGVyLCBzdGF0ZSwgYW5pbWF0ZSkudGhlbigoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyhlbCwgdGhpcy5jbHNPcGVuKSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGUoY29udGVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGUgPSAkKHRoaXMuJHByb3BzLnRvZ2dsZSwgZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRlICE9PSBmYWxzZSAmJiAhaXNJblZpZXcodG9nZ2xlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxJbnRvVmlldyh0b2dnbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX3dyYXBwZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdW53cmFwKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbiIsImltcG9ydCBDbGFzcyBmcm9tICcuLi9taXhpbi9jbGFzcyc7XG5pbXBvcnQgVG9nZ2xhYmxlIGZyb20gJy4uL21peGluL3RvZ2dsYWJsZSc7XG5pbXBvcnQge2Fzc2lnbn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0NsYXNzLCBUb2dnbGFibGVdLFxuXG4gICAgYXJnczogJ2FuaW1hdGlvbicsXG5cbiAgICBwcm9wczoge1xuICAgICAgICBjbG9zZTogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgYW5pbWF0aW9uOiBbdHJ1ZV0sXG4gICAgICAgIHNlbENsb3NlOiAnLnVrLWFsZXJ0LWNsb3NlJyxcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgaGlkZVByb3BzOiBhc3NpZ24oe29wYWNpdHk6IDB9LCBUb2dnbGFibGUuZGF0YS5oaWRlUHJvcHMpXG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgZGVsZWdhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsQ2xvc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgY2xvc2UoKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy4kZWwpLnRoZW4oKCkgPT4gdGhpcy4kZGVzdHJveSh0cnVlKSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbiIsImltcG9ydCB7Y3NzLCBoYXNBdHRyLCBpc0luVmlldywgaXNWaXNpYmxlLCBQbGF5ZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBhcmdzOiAnYXV0b3BsYXknLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgYXV0b211dGU6IEJvb2xlYW4sXG4gICAgICAgIGF1dG9wbGF5OiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgYXV0b211dGU6IGZhbHNlLFxuICAgICAgICBhdXRvcGxheTogdHJ1ZVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGluVmlldyh7YXV0b3BsYXl9KSB7XG4gICAgICAgICAgICByZXR1cm4gYXV0b3BsYXkgPT09ICdpbnZpZXcnO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuXG4gICAgICAgIGlmICh0aGlzLmluVmlldyAmJiAhaGFzQXR0cih0aGlzLiRlbCwgJ3ByZWxvYWQnKSkge1xuICAgICAgICAgICAgdGhpcy4kZWwucHJlbG9hZCA9ICdub25lJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllcih0aGlzLiRlbCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYXV0b211dGUpIHtcbiAgICAgICAgICAgIHRoaXMucGxheWVyLm11dGUoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoKSB7XG5cbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5wbGF5ZXJcbiAgICAgICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGlzVmlzaWJsZSh0aGlzLiRlbCkgJiYgY3NzKHRoaXMuJGVsLCAndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgaW5WaWV3OiB0aGlzLmluVmlldyAmJiBpc0luVmlldyh0aGlzLiRlbClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlKHt2aXNpYmxlLCBpblZpZXd9KSB7XG5cbiAgICAgICAgICAgIGlmICghdmlzaWJsZSB8fCB0aGlzLmluVmlldyAmJiAhaW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hdXRvcGxheSA9PT0gdHJ1ZSB8fCB0aGlzLmluVmlldyAmJiBpblZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJywgJ3Njcm9sbCddXG5cbiAgICB9XG5cbn07XG4iLCJpbXBvcnQgVmlkZW8gZnJvbSAnLi92aWRlbyc7XG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vbWl4aW4vY2xhc3MnO1xuaW1wb3J0IHtjc3MsIERpbWVuc2lvbnN9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtDbGFzcywgVmlkZW9dLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgaGVpZ2h0OiBOdW1iZXJcbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICBhdXRvbXV0ZTogdHJ1ZVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICByZWFkKCkge1xuXG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuJGVsO1xuICAgICAgICAgICAgY29uc3Qge29mZnNldEhlaWdodDogaGVpZ2h0LCBvZmZzZXRXaWR0aDogd2lkdGh9ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGNvbnN0IGRpbSA9IERpbWVuc2lvbnMuY292ZXIoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCB8fCBlbC5uYXR1cmFsV2lkdGggfHwgZWwudmlkZW9XaWR0aCB8fCBlbC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCB8fCBlbC5uYXR1cmFsSGVpZ2h0IHx8IGVsLnZpZGVvSGVpZ2h0IHx8IGVsLmNsaWVudEhlaWdodFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyAod2lkdGggJSAyID8gMSA6IDApLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIChoZWlnaHQgJSAyID8gMSA6IDApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCFkaW0ud2lkdGggfHwgIWRpbS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkaW07XG4gICAgICAgIH0sXG5cbiAgICAgICAgd3JpdGUoe2hlaWdodCwgd2lkdGh9KSB7XG4gICAgICAgICAgICBjc3ModGhpcy4kZWwsIHtoZWlnaHQsIHdpZHRofSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICB9XG5cbn07XG4iLCJpbXBvcnQgeyQsIGNzcywgZmxpcFBvc2l0aW9uLCBpbmNsdWRlcywgaXNOdW1lcmljLCBpc1J0bCwgb2Zmc2V0IGFzIGdldE9mZnNldCwgcG9zaXRpb25BdCwgcmVtb3ZlQ2xhc3NlcywgdG9nZ2xlQ2xhc3N9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBwb3M6IFN0cmluZyxcbiAgICAgICAgb2Zmc2V0OiBudWxsLFxuICAgICAgICBmbGlwOiBCb29sZWFuLFxuICAgICAgICBjbHNQb3M6IFN0cmluZ1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHBvczogYGJvdHRvbS0keyFpc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCd9YCxcbiAgICAgICAgZmxpcDogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgY2xzUG9zOiAnJ1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIHBvcyh7cG9zfSkge1xuICAgICAgICAgICAgcmV0dXJuIChwb3MgKyAoIWluY2x1ZGVzKHBvcywgJy0nKSA/ICctY2VudGVyJyA6ICcnKSkuc3BsaXQoJy0nKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NbMF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWxpZ24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3NbMV07XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgcG9zaXRpb25BdChlbGVtZW50LCB0YXJnZXQsIGJvdW5kYXJ5KSB7XG5cbiAgICAgICAgICAgIHJlbW92ZUNsYXNzZXMoZWxlbWVudCwgYCR7dGhpcy5jbHNQb3N9LSh0b3B8Ym90dG9tfGxlZnR8cmlnaHQpKC1bYS16XSspP2ApO1xuICAgICAgICAgICAgY3NzKGVsZW1lbnQsIHt0b3A6ICcnLCBsZWZ0OiAnJ30pO1xuXG4gICAgICAgICAgICBsZXQgbm9kZTtcbiAgICAgICAgICAgIGxldCB7b2Zmc2V0fSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gdGhpcy5nZXRBeGlzKCk7XG5cbiAgICAgICAgICAgIGlmICghaXNOdW1lcmljKG9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gJChvZmZzZXQpO1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgPyBnZXRPZmZzZXQobm9kZSlbYXhpcyA9PT0gJ3gnID8gJ2xlZnQnIDogJ3RvcCddIC0gZ2V0T2Zmc2V0KHRhcmdldClbYXhpcyA9PT0gJ3gnID8gJ3JpZ2h0JyA6ICdib3R0b20nXVxuICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHt4LCB5fSA9IHBvc2l0aW9uQXQoXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgYXhpcyA9PT0gJ3gnID8gYCR7ZmxpcFBvc2l0aW9uKHRoaXMuZGlyKX0gJHt0aGlzLmFsaWdufWAgOiBgJHt0aGlzLmFsaWdufSAke2ZsaXBQb3NpdGlvbih0aGlzLmRpcil9YCxcbiAgICAgICAgICAgICAgICBheGlzID09PSAneCcgPyBgJHt0aGlzLmRpcn0gJHt0aGlzLmFsaWdufWAgOiBgJHt0aGlzLmFsaWdufSAke3RoaXMuZGlyfWAsXG4gICAgICAgICAgICAgICAgYXhpcyA9PT0gJ3gnID8gYCR7dGhpcy5kaXIgPT09ICdsZWZ0JyA/IC1vZmZzZXQgOiBvZmZzZXR9YCA6IGAgJHt0aGlzLmRpciA9PT0gJ3RvcCcgPyAtb2Zmc2V0IDogb2Zmc2V0fWAsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB0aGlzLmZsaXAsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlcbiAgICAgICAgICAgICkudGFyZ2V0O1xuXG4gICAgICAgICAgICB0aGlzLmRpciA9IGF4aXMgPT09ICd4JyA/IHggOiB5O1xuICAgICAgICAgICAgdGhpcy5hbGlnbiA9IGF4aXMgPT09ICd4JyA/IHkgOiB4O1xuXG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCBgJHt0aGlzLmNsc1Bvc30tJHt0aGlzLmRpcn0tJHt0aGlzLmFsaWdufWAsIHRoaXMub2Zmc2V0ID09PSBmYWxzZSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRBeGlzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyID09PSAndG9wJyB8fCB0aGlzLmRpciA9PT0gJ2JvdHRvbScgPyAneScgOiAneCc7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbiIsImltcG9ydCBQb3NpdGlvbiBmcm9tICcuLi9taXhpbi9wb3NpdGlvbic7XG5pbXBvcnQgVG9nZ2xhYmxlIGZyb20gJy4uL21peGluL3RvZ2dsYWJsZSc7XG5pbXBvcnQge2FkZENsYXNzLCBBbmltYXRpb24sIGF0dHIsIGNoaWxkcmVuLCBjc3MsIGluY2x1ZGVzLCBpc1RvdWNoLCBtYXRjaGVzLCBNb3VzZVRyYWNrZXIsIG9mZnNldCwgb24sIG9uY2UsIHBvaW50ZXJFbnRlciwgcG9pbnRlckxlYXZlLCBxdWVyeSwgcmVtb3ZlQ2xhc3NlcywgdG9nZ2xlQ2xhc3MsIHRyaWdnZXIsIHdpdGhpbn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmxldCBhY3RpdmU7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW1Bvc2l0aW9uLCBUb2dnbGFibGVdLFxuXG4gICAgYXJnczogJ3BvcycsXG5cbiAgICBwcm9wczoge1xuICAgICAgICBtb2RlOiAnbGlzdCcsXG4gICAgICAgIHRvZ2dsZTogQm9vbGVhbixcbiAgICAgICAgYm91bmRhcnk6IEJvb2xlYW4sXG4gICAgICAgIGJvdW5kYXJ5QWxpZ246IEJvb2xlYW4sXG4gICAgICAgIGRlbGF5U2hvdzogTnVtYmVyLFxuICAgICAgICBkZWxheUhpZGU6IE51bWJlcixcbiAgICAgICAgY2xzRHJvcDogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgbW9kZTogWydjbGljaycsICdob3ZlciddLFxuICAgICAgICB0b2dnbGU6ICctIConLFxuICAgICAgICBib3VuZGFyeTogd2luZG93LFxuICAgICAgICBib3VuZGFyeUFsaWduOiBmYWxzZSxcbiAgICAgICAgZGVsYXlTaG93OiAwLFxuICAgICAgICBkZWxheUhpZGU6IDgwMCxcbiAgICAgICAgY2xzRHJvcDogZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbjogWyd1ay1hbmltYXRpb24tZmFkZSddLFxuICAgICAgICBjbHM6ICd1ay1vcGVuJ1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGJvdW5kYXJ5KHtib3VuZGFyeX0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KGJvdW5kYXJ5LCAkZWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsc0Ryb3Aoe2Nsc0Ryb3B9KSB7XG4gICAgICAgICAgICByZXR1cm4gY2xzRHJvcCB8fCBgdWstJHt0aGlzLiRvcHRpb25zLm5hbWV9YDtcbiAgICAgICAgfSxcblxuICAgICAgICBjbHNQb3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbHNEcm9wO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgICAgdGhpcy50cmFja2VyID0gbmV3IE1vdXNlVHJhY2tlcigpO1xuICAgIH0sXG5cbiAgICBjb25uZWN0ZWQoKSB7XG5cbiAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRHJvcCk7XG5cbiAgICAgICAgY29uc3Qge3RvZ2dsZX0gPSB0aGlzLiRwcm9wcztcbiAgICAgICAgdGhpcy50b2dnbGUgPSB0b2dnbGUgJiYgdGhpcy4kY3JlYXRlKCd0b2dnbGUnLCBxdWVyeSh0b2dnbGUsIHRoaXMuJGVsKSwge1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLiRlbCxcbiAgICAgICAgICAgIG1vZGU6IHRoaXMubW9kZVxuICAgICAgICB9KTtcblxuICAgICAgICAhdGhpcy50b2dnbGUgJiYgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgZGVsZWdhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAuJHt0aGlzLmNsc0Ryb3B9LWNsb3NlYDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICBkZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2FbaHJlZl49XCIjXCJdJztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoe2RlZmF1bHRQcmV2ZW50ZWQsIGN1cnJlbnQ6IHtoYXNofX0pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRlZmF1bHRQcmV2ZW50ZWQgJiYgaGFzaCAmJiAhd2l0aGluKGhhc2gsIHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2JlZm9yZXNjcm9sbCcsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ3RvZ2dsZScsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSwgdG9nZ2xlKSB7XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1RvZ2dsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh0b2dnbGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVzaG93JyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcihlLCB0b2dnbGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KHRvZ2dsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICd0b2dnbGVoaWRlJyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiBwb2ludGVyRW50ZXIsXG5cbiAgICAgICAgICAgIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnaG92ZXInKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiBwb2ludGVyTGVhdmUsXG5cbiAgICAgICAgICAgIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnaG92ZXInKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSAmJiAhbWF0Y2hlcyh0aGlzLiRlbCwgJzpob3ZlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2JlZm9yZXNob3cnLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lcnMoKTtcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdzaG93JyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcblxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNrZXIuaW5pdCgpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICd1cGRhdGVhcmlhJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0cmlnZ2VyZWQgZnJvbSBhbiBjbGljayBldmVudCBoYW5kbGVyLCBkZWxheSBhZGRpbmcgdGhlIGNsaWNrIGhhbmRsZXJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmYgPSBkZWxheU9uKGRvY3VtZW50LCAnY2xpY2snLCAoe2RlZmF1bHRQcmV2ZW50ZWQsIHRhcmdldH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWZhdWx0UHJldmVudGVkICYmICF3aXRoaW4odGFyZ2V0LCB0aGlzLiRlbCkgJiYgISh0aGlzLnRvZ2dsZSAmJiB3aXRoaW4odGFyZ2V0LCB0aGlzLnRvZ2dsZS4kZWwpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgb25jZSh0aGlzLiRlbCwgJ2hpZGUnLCBvZmYsIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdiZWZvcmVoaWRlJyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgaGFuZGxlcih7dGFyZ2V0fSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJGVsICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gYWN0aXZlID09PSBudWxsICYmIHdpdGhpbih0YXJnZXQsIHRoaXMuJGVsKSAmJiB0aGlzLmlzVG9nZ2xlZCgpID8gdGhpcyA6IGFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRoaXMuaXNBY3RpdmUoKSA/IG51bGwgOiBhY3RpdmU7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwZGF0ZWFyaWEnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNrZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICd1cGRhdGVhcmlhJyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcihlLCB0b2dnbGUpIHtcblxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQXJpYSh0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9nZ2xlIHx8IHRoaXMudG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIoKHRvZ2dsZSB8fCB0aGlzLnRvZ2dsZSkuJGVsLCAnYXJpYS1leHBhbmRlZCcsIHRoaXMuaXNUb2dnbGVkKCkpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLnRvZ2dsZS4kZWwsIHRoaXMuY2xzLCB0aGlzLmlzVG9nZ2xlZCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICB3cml0ZSgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkgJiYgIUFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzaG93KHRvZ2dsZSA9IHRoaXMudG9nZ2xlLCBkZWxheSA9IHRydWUpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2dnbGVkKCkgJiYgdG9nZ2xlICYmIHRoaXMudG9nZ2xlICYmIHRvZ2dsZS4kZWwgIT09IHRoaXMudG9nZ2xlLiRlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZShmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudG9nZ2xlID0gdG9nZ2xlO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChkZWxheSAmJiBhY3RpdmUuaXNEZWxheWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dUaW1lciA9IHNldFRpbWVvdXQodGhpcy5zaG93LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoYWN0aXZlICYmICF3aXRoaW4odGhpcy4kZWwsIGFjdGl2ZS4kZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2hvd1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiAhdGhpcy5pc1RvZ2dsZWQoKSAmJiB0aGlzLnRvZ2dsZUVsZW1lbnQodGhpcy4kZWwsIHRydWUpLCBkZWxheSAmJiB0aGlzLmRlbGF5U2hvdyB8fCAwKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGhpZGUoZGVsYXkgPSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGhpZGUgPSAoKSA9PiB0aGlzLnRvZ2dsZU5vdyh0aGlzLiRlbCwgZmFsc2UpO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG5cbiAgICAgICAgICAgIHRoaXMuaXNEZWxheWluZyA9IGdldFBvc2l0aW9uZWRFbGVtZW50cyh0aGlzLiRlbCkuc29tZShlbCA9PiB0aGlzLnRyYWNrZXIubW92ZXNUbyhlbCkpO1xuXG4gICAgICAgICAgICBpZiAoZGVsYXkgJiYgdGhpcy5pc0RlbGF5aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZSwgNTApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkZWxheSAmJiB0aGlzLmRlbGF5SGlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRpbWVyID0gc2V0VGltZW91dChoaWRlLCB0aGlzLmRlbGF5SGlkZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhclRpbWVycygpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lcik7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5oaWRlVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5zaG93VGltZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5oaWRlVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5pc0RlbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNBY3RpdmUoKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlID09PSB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBvc2l0aW9uKCkge1xuXG4gICAgICAgICAgICByZW1vdmVDbGFzc2VzKHRoaXMuJGVsLCBgJHt0aGlzLmNsc0Ryb3B9LShzdGFja3xib3VuZGFyeSlgKTtcbiAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge3RvcDogJycsIGxlZnQ6ICcnLCBkaXNwbGF5OiAnYmxvY2snfSk7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgYCR7dGhpcy5jbHNEcm9wfS1ib3VuZGFyeWAsIHRoaXMuYm91bmRhcnlBbGlnbik7XG5cbiAgICAgICAgICAgIGNvbnN0IGJvdW5kYXJ5ID0gb2Zmc2V0KHRoaXMuYm91bmRhcnkpO1xuICAgICAgICAgICAgY29uc3QgYWxpZ25UbyA9IHRoaXMuYm91bmRhcnlBbGlnbiA/IGJvdW5kYXJ5IDogb2Zmc2V0KHRoaXMudG9nZ2xlLiRlbCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFsaWduID09PSAnanVzdGlmeScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5nZXRBeGlzKCkgPT09ICd5JyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHByb3AsIGFsaWduVG9bcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbC5vZmZzZXRXaWR0aCA+IE1hdGgubWF4KGJvdW5kYXJ5LnJpZ2h0IC0gYWxpZ25Uby5sZWZ0LCBhbGlnblRvLnJpZ2h0IC0gYm91bmRhcnkubGVmdCkpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgYCR7dGhpcy5jbHNEcm9wfS1zdGFja2ApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uQXQodGhpcy4kZWwsIHRoaXMuYm91bmRhcnlBbGlnbiA/IHRoaXMuYm91bmRhcnkgOiB0aGlzLnRvZ2dsZS4kZWwsIHRoaXMuYm91bmRhcnkpO1xuXG4gICAgICAgICAgICBjc3ModGhpcy4kZWwsICdkaXNwbGF5JywgJycpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gZ2V0UG9zaXRpb25lZEVsZW1lbnRzKGVsKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY3NzKGVsLCAncG9zaXRpb24nKSAhPT0gJ3N0YXRpYycgPyBbZWxdIDogW107XG4gICAgcmV0dXJuIHJlc3VsdC5jb25jYXQuYXBwbHkocmVzdWx0LCBjaGlsZHJlbihlbCkubWFwKGdldFBvc2l0aW9uZWRFbGVtZW50cykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXlPbihlbCwgdHlwZSwgZm4pIHtcbiAgICBsZXQgb2ZmID0gb25jZShlbCwgdHlwZSwgKCkgPT5cbiAgICAgICAgb2ZmID0gb24oZWwsIHR5cGUsIGZuKVxuICAgICwgdHJ1ZSk7XG4gICAgcmV0dXJuICgpID0+IG9mZigpO1xufVxuIiwiaW1wb3J0IERyb3AgZnJvbSAnLi9kcm9wJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgZXh0ZW5kczogRHJvcFxuXG59O1xuIiwiaW1wb3J0IENsYXNzIGZyb20gJy4uL21peGluL2NsYXNzJztcbmltcG9ydCB7JCwgJCQsIGNsb3Nlc3QsIGlzSW5wdXQsIG1hdGNoZXMsIHF1ZXJ5LCBzZWxJbnB1dH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0NsYXNzXSxcblxuICAgIGFyZ3M6ICd0YXJnZXQnLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgdGFyZ2V0OiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgdGFyZ2V0OiBmYWxzZVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGlucHV0KF8sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQoc2VsSW5wdXQsICRlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGFyZ2V0KHt0YXJnZXR9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQgJiYgKHRhcmdldCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICYmIHRoaXMuaW5wdXQucGFyZW50Tm9kZSA9PT0gJGVsXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5pbnB1dC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICAgICAgICAgICAgICB8fCBxdWVyeSh0YXJnZXQsICRlbCkpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgdXBkYXRlKCkge1xuXG4gICAgICAgIGNvbnN0IHt0YXJnZXQsIGlucHV0fSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvcHRpb247XG4gICAgICAgIGNvbnN0IHByb3AgPSBpc0lucHV0KHRhcmdldCkgPyAndmFsdWUnIDogJ3RleHRDb250ZW50JztcbiAgICAgICAgY29uc3QgcHJldiA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dC5maWxlcyAmJiBpbnB1dC5maWxlc1swXVxuICAgICAgICAgICAgPyBpbnB1dC5maWxlc1swXS5uYW1lXG4gICAgICAgICAgICA6IG1hdGNoZXMoaW5wdXQsICdzZWxlY3QnKSAmJiAob3B0aW9uID0gJCQoJ29wdGlvbicsIGlucHV0KS5maWx0ZXIoZWwgPT4gZWwuc2VsZWN0ZWQpWzBdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgICAgICAgICAgPyBvcHRpb24udGV4dENvbnRlbnRcbiAgICAgICAgICAgICAgICA6IGlucHV0LnZhbHVlO1xuXG4gICAgICAgIGlmIChwcmV2ICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnY2hhbmdlJyxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3Jlc2V0JyxcblxuICAgICAgICAgICAgZWwoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3Nlc3QodGhpcy4kZWwsICdmb3JtJyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgXVxuXG59O1xuIiwiaW1wb3J0IHtpc0luVmlld30gZnJvbSAndWlraXQtdXRpbCc7XG5cbi8vIERlcHJlY2F0ZWRcbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoZGF0YSkge1xuXG4gICAgICAgICAgICBjb25zdCBpbnZpZXcgPSBpc0luVmlldyh0aGlzLiRlbCk7XG5cbiAgICAgICAgICAgIGlmICghaW52aWV3IHx8IGRhdGEuaXNJblZpZXcgPT09IGludmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5pc0luVmlldyA9IGludmlldztcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLnNyYyA9IHRoaXMuJGVsLnNyYztcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsnc2Nyb2xsJywgJ3Jlc2l6ZSddXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IHtpc1J0bCwgaXNWaXNpYmxlLCBvZmZzZXRQb3NpdGlvbiwgdG9nZ2xlQ2xhc3N9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBtYXJnaW46IFN0cmluZyxcbiAgICAgICAgZmlyc3RDb2x1bW46IEJvb2xlYW5cbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICBtYXJnaW46ICd1ay1tYXJnaW4tc21hbGwtdG9wJyxcbiAgICAgICAgZmlyc3RDb2x1bW46ICd1ay1maXJzdC1jb2x1bW4nXG4gICAgfSxcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoZGF0YSkge1xuXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuJGVsLmNoaWxkcmVuO1xuICAgICAgICAgICAgY29uc3Qgcm93cyA9IFtbXV07XG5cbiAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoIHx8ICFpc1Zpc2libGUodGhpcy4kZWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEucm93cyA9IHJvd3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEucm93cyA9IGdldFJvd3MoaXRlbXMpO1xuICAgICAgICAgICAgZGF0YS5zdGFja3MgPSAhZGF0YS5yb3dzLnNvbWUocm93ID0+IHJvdy5sZW5ndGggPiAxKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlKHtyb3dzfSkge1xuXG4gICAgICAgICAgICByb3dzLmZvckVhY2goKHJvdywgaSkgPT5cbiAgICAgICAgICAgICAgICByb3cuZm9yRWFjaCgoZWwsIGopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMubWFyZ2luLCBpICE9PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMuZmlyc3RDb2x1bW4sIGogPT09IDApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICB9XG5cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3dzKGl0ZW1zKSB7XG4gICAgY29uc3Qgcm93cyA9IFtbXV07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXTtcbiAgICAgICAgbGV0IGRpbSA9IGdldE9mZnNldChlbCk7XG5cbiAgICAgICAgaWYgKCFkaW0uaGVpZ2h0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGogPSByb3dzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHJvd3Nbal07XG5cbiAgICAgICAgICAgIGlmICghcm93WzBdKSB7XG4gICAgICAgICAgICAgICAgcm93LnB1c2goZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbGVmdERpbTtcbiAgICAgICAgICAgIGlmIChyb3dbMF0ub2Zmc2V0UGFyZW50ID09PSBlbC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBsZWZ0RGltID0gZ2V0T2Zmc2V0KHJvd1swXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpbSA9IGdldE9mZnNldChlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbGVmdERpbSA9IGdldE9mZnNldChyb3dbMF0sIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGltLnRvcCA+PSBsZWZ0RGltLmJvdHRvbSAtIDEgJiYgZGltLnRvcCAhPT0gbGVmdERpbS50b3ApIHtcbiAgICAgICAgICAgICAgICByb3dzLnB1c2goW2VsXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaW0uYm90dG9tID4gbGVmdERpbS50b3ApIHtcblxuICAgICAgICAgICAgICAgIGlmIChkaW0ubGVmdCA8IGxlZnREaW0ubGVmdCAmJiAhaXNSdGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93LnVuc2hpZnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByb3cucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcm93cy51bnNoaWZ0KFtlbF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuXG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldChlbGVtZW50LCBvZmZzZXQgPSBmYWxzZSkge1xuXG4gICAgbGV0IHtvZmZzZXRUb3AsIG9mZnNldExlZnQsIG9mZnNldEhlaWdodH0gPSBlbGVtZW50O1xuXG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgICBbb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0XSA9IG9mZnNldFBvc2l0aW9uKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogb2Zmc2V0VG9wLFxuICAgICAgICBsZWZ0OiBvZmZzZXRMZWZ0LFxuICAgICAgICBoZWlnaHQ6IG9mZnNldEhlaWdodCxcbiAgICAgICAgYm90dG9tOiBvZmZzZXRUb3AgKyBvZmZzZXRIZWlnaHRcbiAgICB9O1xufVxuIiwiaW1wb3J0IE1hcmdpbiBmcm9tICcuL21hcmdpbic7XG5pbXBvcnQgQ2xhc3MgZnJvbSAnLi4vbWl4aW4vY2xhc3MnO1xuaW1wb3J0IHthZGRDbGFzcywgY2hpbGRyZW4sIGNzcywgaGFzQ2xhc3MsIGhlaWdodCBhcyBnZXRIZWlnaHQsIGlzUnRsLCBzY3JvbGxlZE92ZXIsIHRvRmxvYXQsIHRvZ2dsZUNsYXNzLCBUcmFuc2l0aW9uLCBzb3J0Qnl9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBleHRlbmRzOiBNYXJnaW4sXG5cbiAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICBuYW1lOiAnZ3JpZCcsXG5cbiAgICBwcm9wczoge1xuICAgICAgICBtYXNvbnJ5OiBCb29sZWFuLFxuICAgICAgICBwYXJhbGxheDogTnVtYmVyXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgbWFyZ2luOiAndWstZ3JpZC1tYXJnaW4nLFxuICAgICAgICBjbHNTdGFjazogJ3VrLWdyaWQtc3RhY2snLFxuICAgICAgICBtYXNvbnJ5OiBmYWxzZSxcbiAgICAgICAgcGFyYWxsYXg6IDBcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBsZW5ndGgoXywgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gJGVsLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXJhbGxheCh7cGFyYWxsYXh9KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYWxsYXggJiYgdGhpcy5sZW5ndGggPyBNYXRoLmFicyhwYXJhbGxheCkgOiAnJztcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGNvbm5lY3RlZCgpIHtcbiAgICAgICAgdGhpcy5tYXNvbnJ5ICYmIGFkZENsYXNzKHRoaXMuJGVsLCAndWstZmxleC10b3AgdWstZmxleC13cmFwLXRvcCcpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIHdyaXRlKHtzdGFja3N9KSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzU3RhY2ssIHN0YWNrcyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgcmVhZCh7cm93c30pIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hc29ucnkgfHwgdGhpcy5wYXJhbGxheCkge1xuICAgICAgICAgICAgICAgICAgICByb3dzID0gcm93cy5tYXAoZWxlbWVudHMgPT4gc29ydEJ5KGVsZW1lbnRzLCAnb2Zmc2V0TGVmdCcpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSdGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MubWFwKHJvdyA9PiByb3cucmV2ZXJzZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb25JblByb2dyZXNzID0gcm93cy5zb21lKGVsZW1lbnRzID0+IGVsZW1lbnRzLnNvbWUoVHJhbnNpdGlvbi5pblByb2dyZXNzKSk7XG4gICAgICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBsZXQgZWxIZWlnaHQgPSAnJztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hc29ucnkgJiYgdGhpcy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gMDtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVzID0gcm93cy5yZWR1Y2UoKHRyYW5zbGF0ZXMsIHJvdywgaSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVzW2ldID0gcm93Lm1hcCgoXywgaikgPT4gaSA9PT0gMCA/IDAgOiB0b0Zsb2F0KHRyYW5zbGF0ZXNbaSAtIDFdW2pdKSArIChoZWlnaHQgLSB0b0Zsb2F0KHJvd3NbaSAtIDFdW2pdICYmIHJvd3NbaSAtIDFdW2pdLm9mZnNldEhlaWdodCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHJvdy5yZWR1Y2UoKGhlaWdodCwgZWwpID0+IE1hdGgubWF4KGhlaWdodCwgZWwub2Zmc2V0SGVpZ2h0KSwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVzO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgICAgICAgICBlbEhlaWdodCA9IG1heENvbHVtbkhlaWdodChyb3dzKSArIGdldE1hcmdpblRvcCh0aGlzLiRlbCwgdGhpcy5tYXJnaW4pICogKHJvd3MubGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5wYXJhbGxheCAmJiBnZXRQYWRkaW5nQm90dG9tKHRoaXMucGFyYWxsYXgsIHJvd3MsIHRyYW5zbGF0ZXMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtwYWRkaW5nLCByb3dzLCB0cmFuc2xhdGVzLCBoZWlnaHQ6ICF0cmFuc2l0aW9uSW5Qcm9ncmVzcyA/IGVsSGVpZ2h0IDogZmFsc2V9O1xuXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3cml0ZSh7c3RhY2tzLCBoZWlnaHQsIHBhZGRpbmd9KSB7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNTdGFjaywgc3RhY2tzKTtcblxuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ3BhZGRpbmdCb3R0b20nLCBwYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgIT09IGZhbHNlICYmIGNzcyh0aGlzLiRlbCwgJ2hlaWdodCcsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICByZWFkKHtoZWlnaHR9KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZWQ6IHRoaXMucGFyYWxsYXhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2Nyb2xsZWRPdmVyKHRoaXMuJGVsLCBoZWlnaHQgPyBoZWlnaHQgLSBnZXRIZWlnaHQodGhpcy4kZWwpIDogMCkgKiB0aGlzLnBhcmFsbGF4XG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlKHtyb3dzLCBzY3JvbGxlZCwgdHJhbnNsYXRlc30pIHtcblxuICAgICAgICAgICAgICAgIGlmIChzY3JvbGxlZCA9PT0gZmFsc2UgJiYgIXRyYW5zbGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJvd3MuZm9yRWFjaCgocm93LCBpKSA9PlxuICAgICAgICAgICAgICAgICAgICByb3cuZm9yRWFjaCgoZWwsIGopID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsICd0cmFuc2Zvcm0nLCAhc2Nyb2xsZWQgJiYgIXRyYW5zbGF0ZXMgPyAnJyA6IGB0cmFuc2xhdGVZKCR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRyYW5zbGF0ZXMgJiYgLXRyYW5zbGF0ZXNbaV1bal0pICsgKHNjcm9sbGVkID8gaiAlIDIgPyBzY3JvbGxlZCA6IHNjcm9sbGVkIC8gOCA6IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB9cHgpYClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICBdXG5cbn07XG5cbmZ1bmN0aW9uIGdldFBhZGRpbmdCb3R0b20oZGlzdGFuY2UsIHJvd3MsIHRyYW5zbGF0ZXMpIHtcbiAgICBsZXQgY29sdW1uID0gMDtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBsZXQgbWF4U2Nyb2xsZWQgPSAwO1xuICAgIGZvciAobGV0IGkgPSByb3dzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb2x1bW47IGogPCByb3dzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IHJvd3NbaV1bal07XG4gICAgICAgICAgICBjb25zdCBib3R0b20gPSBlbC5vZmZzZXRUb3AgKyBnZXRIZWlnaHQoZWwpICsgKHRyYW5zbGF0ZXMgJiYgLXRyYW5zbGF0ZXNbaV1bal0pO1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBib3R0b20pO1xuICAgICAgICAgICAgbWF4U2Nyb2xsZWQgPSBNYXRoLm1heChtYXhTY3JvbGxlZCwgYm90dG9tICsgKGogJSAyID8gZGlzdGFuY2UgOiBkaXN0YW5jZSAvIDgpKTtcbiAgICAgICAgICAgIGNvbHVtbisrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXhTY3JvbGxlZCAtIG1heDtcbn1cblxuZnVuY3Rpb24gZ2V0TWFyZ2luVG9wKHJvb3QsIGNscykge1xuXG4gICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbihyb290KTtcbiAgICBjb25zdCBbbm9kZV0gPSBub2Rlcy5maWx0ZXIoZWwgPT4gaGFzQ2xhc3MoZWwsIGNscykpO1xuXG4gICAgcmV0dXJuIHRvRmxvYXQobm9kZVxuICAgICAgICA/IGNzcyhub2RlLCAnbWFyZ2luVG9wJylcbiAgICAgICAgOiBjc3Mobm9kZXNbMF0sICdwYWRkaW5nTGVmdCcpKTtcbn1cblxuZnVuY3Rpb24gbWF4Q29sdW1uSGVpZ2h0KHJvd3MpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoLi4ucm93cy5yZWR1Y2UoKHN1bSwgcm93KSA9PiB7XG4gICAgICAgIHJvdy5mb3JFYWNoKChlbCwgaSkgPT4gc3VtW2ldID0gKHN1bVtpXSB8fCAwKSArIGVsLm9mZnNldEhlaWdodCk7XG4gICAgICAgIHJldHVybiBzdW07XG4gICAgfSwgW10pKTtcbn1cbiIsImltcG9ydCB7JCQsIGJveE1vZGVsQWRqdXN0LCBjc3MsIGlzSUUsIHRvRmxvYXR9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG4vLyBJRSAxMSBmaXggKG1pbi1oZWlnaHQgb24gYSBmbGV4IGNvbnRhaW5lciB3b24ndCBhcHBseSB0byBpdHMgZmxleCBpdGVtcylcbmV4cG9ydCBkZWZhdWx0IGlzSUUgPyB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBzZWxNaW5IZWlnaHQ6IFN0cmluZ1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHNlbE1pbkhlaWdodDogZmFsc2UsXG4gICAgICAgIGZvcmNlSGVpZ2h0OiBmYWxzZVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGVsZW1lbnRzKHtzZWxNaW5IZWlnaHR9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxNaW5IZWlnaHQgPyAkJChzZWxNaW5IZWlnaHQsICRlbCkgOiBbJGVsXTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHVwZGF0ZTogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgcmVhZCgpIHtcbiAgICAgICAgICAgICAgICBjc3ModGhpcy5lbGVtZW50cywgJ2hlaWdodCcsICcnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9yZGVyOiAtNSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIHdyaXRlKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRvRmxvYXQoY3NzKGVsLCAnbWluSGVpZ2h0JykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ICYmICh0aGlzLmZvcmNlSGVpZ2h0IHx8IE1hdGgucm91bmQoaGVpZ2h0ICsgYm94TW9kZWxBZGp1c3QoZWwsICdoZWlnaHQnLCAnY29udGVudC1ib3gnKSkgPj0gZWwub2Zmc2V0SGVpZ2h0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCAnaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb3JkZXI6IDUsXG5cbiAgICAgICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIF1cblxufSA6IHt9O1xuIiwiaW1wb3J0IEZsZXhCdWcgZnJvbSAnLi4vbWl4aW4vZmxleC1idWcnO1xuaW1wb3J0IHtnZXRSb3dzfSBmcm9tICcuL21hcmdpbic7XG5pbXBvcnQgeyQkLCBib3hNb2RlbEFkanVzdCwgY3NzLCBvZmZzZXQsIHRvRmxvYXR9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtGbGV4QnVnXSxcblxuICAgIGFyZ3M6ICd0YXJnZXQnLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgdGFyZ2V0OiBTdHJpbmcsXG4gICAgICAgIHJvdzogQm9vbGVhblxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHRhcmdldDogJz4gKicsXG4gICAgICAgIHJvdzogdHJ1ZSxcbiAgICAgICAgZm9yY2VIZWlnaHQ6IHRydWVcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBlbGVtZW50cyh7dGFyZ2V0fSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gJCQodGFyZ2V0LCAkZWwpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgdXBkYXRlOiB7XG5cbiAgICAgICAgcmVhZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcm93czogKHRoaXMucm93ID8gZ2V0Um93cyh0aGlzLmVsZW1lbnRzKSA6IFt0aGlzLmVsZW1lbnRzXSkubWFwKG1hdGNoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZSh7cm93c30pIHtcbiAgICAgICAgICAgIHJvd3MuZm9yRWFjaCgoe2hlaWdodHMsIGVsZW1lbnRzfSkgPT5cbiAgICAgICAgICAgICAgICBlbGVtZW50cy5mb3JFYWNoKChlbCwgaSkgPT5cbiAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCAnbWluSGVpZ2h0JywgaGVpZ2h0c1tpXSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogWydyZXNpemUnXVxuXG4gICAgfVxuXG59O1xuXG5mdW5jdGlvbiBtYXRjaChlbGVtZW50cykge1xuXG4gICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHtoZWlnaHRzOiBbJyddLCBlbGVtZW50c307XG4gICAgfVxuXG4gICAgbGV0IHtoZWlnaHRzLCBtYXh9ID0gZ2V0SGVpZ2h0cyhlbGVtZW50cyk7XG4gICAgY29uc3QgaGFzTWluSGVpZ2h0ID0gZWxlbWVudHMuc29tZShlbCA9PiBlbC5zdHlsZS5taW5IZWlnaHQpO1xuICAgIGNvbnN0IGhhc1NocnVuayA9IGVsZW1lbnRzLnNvbWUoKGVsLCBpKSA9PiAhZWwuc3R5bGUubWluSGVpZ2h0ICYmIGhlaWdodHNbaV0gPCBtYXgpO1xuXG4gICAgaWYgKGhhc01pbkhlaWdodCAmJiBoYXNTaHJ1bmspIHtcbiAgICAgICAgY3NzKGVsZW1lbnRzLCAnbWluSGVpZ2h0JywgJycpO1xuICAgICAgICAoe2hlaWdodHMsIG1heH0gPSBnZXRIZWlnaHRzKGVsZW1lbnRzKSk7XG4gICAgfVxuXG4gICAgaGVpZ2h0cyA9IGVsZW1lbnRzLm1hcCgoZWwsIGkpID0+XG4gICAgICAgIGhlaWdodHNbaV0gPT09IG1heCAmJiB0b0Zsb2F0KGVsLnN0eWxlLm1pbkhlaWdodCkudG9GaXhlZCgyKSAhPT0gbWF4LnRvRml4ZWQoMikgPyAnJyA6IG1heFxuICAgICk7XG5cbiAgICByZXR1cm4ge2hlaWdodHMsIGVsZW1lbnRzfTtcbn1cblxuZnVuY3Rpb24gZ2V0SGVpZ2h0cyhlbGVtZW50cykge1xuICAgIGNvbnN0IGhlaWdodHMgPSBlbGVtZW50cy5tYXAoZWwgPT4gb2Zmc2V0KGVsKS5oZWlnaHQgLSBib3hNb2RlbEFkanVzdChlbCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpKTtcbiAgICBjb25zdCBtYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcblxuICAgIHJldHVybiB7aGVpZ2h0cywgbWF4fTtcbn1cbiIsImltcG9ydCBGbGV4QnVnIGZyb20gJy4uL21peGluL2ZsZXgtYnVnJztcbmltcG9ydCB7JCwgYm94TW9kZWxBZGp1c3QsIGNzcywgZW5kc1dpdGgsIGhlaWdodCwgaXNOdW1lcmljLCBpc1N0cmluZywgaXNWaXNpYmxlLCBvZmZzZXQsIHF1ZXJ5LCB0b0Zsb2F0fSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmxleEJ1Z10sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBleHBhbmQ6IEJvb2xlYW4sXG4gICAgICAgIG9mZnNldFRvcDogQm9vbGVhbixcbiAgICAgICAgb2Zmc2V0Qm90dG9tOiBCb29sZWFuLFxuICAgICAgICBtaW5IZWlnaHQ6IE51bWJlclxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGV4cGFuZDogZmFsc2UsXG4gICAgICAgIG9mZnNldFRvcDogZmFsc2UsXG4gICAgICAgIG9mZnNldEJvdHRvbTogZmFsc2UsXG4gICAgICAgIG1pbkhlaWdodDogMFxuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICByZWFkKHttaW5IZWlnaHQ6IHByZXZ9KSB7XG5cbiAgICAgICAgICAgIGlmICghaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG1pbkhlaWdodCA9ICcnO1xuICAgICAgICAgICAgY29uc3QgYm94ID0gYm94TW9kZWxBZGp1c3QodGhpcy4kZWwsICdoZWlnaHQnLCAnY29udGVudC1ib3gnKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZXhwYW5kKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5kYXRhc2V0LmhlaWdodEV4cGFuZCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgaWYgKCQoJ1tkYXRhLWhlaWdodC1leHBhbmRdJykgIT09IHRoaXMuJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQgPSBoZWlnaHQod2luZG93KSAtIChvZmZzZXRIZWlnaHQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAtIG9mZnNldEhlaWdodCh0aGlzLiRlbCkpIC0gYm94IHx8ICcnO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy8gb24gbW9iaWxlIGRldmljZXMgKGlPUyBhbmQgQW5kcm9pZCkgd2luZG93LmlubmVySGVpZ2h0ICE9PSAxMDB2aFxuICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9ICdjYWxjKDEwMHZoJztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9mZnNldFRvcCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHt0b3B9ID0gb2Zmc2V0KHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IHRvcCA+IDAgJiYgdG9wIDwgaGVpZ2h0KHdpbmRvdykgLyAyID8gYCAtICR7dG9wfXB4YCA6ICcnO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub2Zmc2V0Qm90dG9tID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IGAgLSAke29mZnNldEhlaWdodCh0aGlzLiRlbC5uZXh0RWxlbWVudFNpYmxpbmcpfXB4YDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljKHRoaXMub2Zmc2V0Qm90dG9tKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBgIC0gJHt0aGlzLm9mZnNldEJvdHRvbX12aGA7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub2Zmc2V0Qm90dG9tICYmIGVuZHNXaXRoKHRoaXMub2Zmc2V0Qm90dG9tLCAncHgnKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBgIC0gJHt0b0Zsb2F0KHRoaXMub2Zmc2V0Qm90dG9tKX1weGA7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHRoaXMub2Zmc2V0Qm90dG9tKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCArPSBgIC0gJHtvZmZzZXRIZWlnaHQocXVlcnkodGhpcy5vZmZzZXRCb3R0b20sIHRoaXMuJGVsKSl9cHhgO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0ICs9IGAke2JveCA/IGAgLSAke2JveH1weGAgOiAnJ30pYDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge21pbkhlaWdodCwgcHJldn07XG4gICAgICAgIH0sXG5cbiAgICAgICAgd3JpdGUoe21pbkhlaWdodCwgcHJldn0pIHtcblxuICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB7bWluSGVpZ2h0fSk7XG5cbiAgICAgICAgICAgIGlmIChtaW5IZWlnaHQgIT09IHByZXYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy4kZWwsICdyZXNpemUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMubWluSGVpZ2h0ICYmIHRvRmxvYXQoY3NzKHRoaXMuJGVsLCAnbWluSGVpZ2h0JykpIDwgdGhpcy5taW5IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCB0aGlzLm1pbkhlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gb2Zmc2V0SGVpZ2h0KGVsKSB7XG4gICAgcmV0dXJuIGVsICYmIG9mZnNldChlbCkuaGVpZ2h0IHx8IDA7XG59XG4iLCJpbXBvcnQgeyQsICQkLCBhZnRlciwgYWpheCwgYXBwZW5kLCBhdHRyLCBpbmNsdWRlcywgaXNWaXNpYmxlLCBpc1ZvaWRFbGVtZW50LCBub29wLCBQcm9taXNlLCByZW1vdmUsIHJlbW92ZUF0dHIsIHN0YXJ0c1dpdGh9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBhcmdzOiAnc3JjJyxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGlkOiBCb29sZWFuLFxuICAgICAgICBpY29uOiBTdHJpbmcsXG4gICAgICAgIHNyYzogU3RyaW5nLFxuICAgICAgICBzdHlsZTogU3RyaW5nLFxuICAgICAgICB3aWR0aDogTnVtYmVyLFxuICAgICAgICBoZWlnaHQ6IE51bWJlcixcbiAgICAgICAgcmF0aW86IE51bWJlcixcbiAgICAgICAgY2xhc3M6IFN0cmluZyxcbiAgICAgICAgc3Ryb2tlQW5pbWF0aW9uOiBCb29sZWFuLFxuICAgICAgICBmb2N1c2FibGU6IEJvb2xlYW4sIC8vIElFIDExXG4gICAgICAgIGF0dHJpYnV0ZXM6ICdsaXN0J1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHJhdGlvOiAxLFxuICAgICAgICBpbmNsdWRlOiBbJ3N0eWxlJywgJ2NsYXNzJywgJ2ZvY3VzYWJsZSddLFxuICAgICAgICBjbGFzczogJycsXG4gICAgICAgIHN0cm9rZUFuaW1hdGlvbjogZmFsc2VcbiAgICB9LFxuXG4gICAgYmVmb3JlQ29ubmVjdCgpIHtcblxuICAgICAgICB0aGlzLmNsYXNzICs9ICcgdWstc3ZnJztcblxuICAgICAgICBpZiAoIXRoaXMuaWNvbiAmJiBpbmNsdWRlcyh0aGlzLnNyYywgJyMnKSkge1xuXG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHRoaXMuc3JjLnNwbGl0KCcjJyk7XG5cbiAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgW3RoaXMuc3JjLCB0aGlzLmljb25dID0gcGFydHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN2ZyA9IHRoaXMuZ2V0U3ZnKCkudGhlbihlbCA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5QXR0cmlidXRlcyhlbCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdmdFbCA9IGluc2VydFNWRyhlbCwgdGhpcy4kZWwpO1xuICAgICAgICB9LCBub29wKTtcblxuICAgIH0sXG5cbiAgICBkaXNjb25uZWN0ZWQoKSB7XG5cbiAgICAgICAgaWYgKGlzVm9pZEVsZW1lbnQodGhpcy4kZWwpKSB7XG4gICAgICAgICAgICBhdHRyKHRoaXMuJGVsLCAnaGlkZGVuJywgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdmcpIHtcbiAgICAgICAgICAgIHRoaXMuc3ZnLnRoZW4oc3ZnID0+ICghdGhpcy5fY29ubmVjdGVkIHx8IHN2ZyAhPT0gdGhpcy5zdmdFbCkgJiYgcmVtb3ZlKHN2ZyksIG5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdmcgPSB0aGlzLnN2Z0VsID0gbnVsbDtcblxuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICByZWFkKCkge1xuICAgICAgICAgICAgcmV0dXJuICEhKHRoaXMuc3Ryb2tlQW5pbWF0aW9uICYmIHRoaXMuc3ZnRWwgJiYgaXNWaXNpYmxlKHRoaXMuc3ZnRWwpKTtcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZSgpIHtcbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uKHRoaXMuc3ZnRWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHR5cGU6IFsncmVzaXplJ11cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZ2V0U3ZnKCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvYWRTVkcodGhpcy5zcmMpLnRoZW4oc3ZnID0+XG4gICAgICAgICAgICAgICAgcGFyc2VTVkcoc3ZnLCB0aGlzLmljb24pIHx8IFByb21pc2UucmVqZWN0KCdTVkcgbm90IGZvdW5kLicpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5QXR0cmlidXRlcyhlbCkge1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gdGhpcy4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW3Byb3BdICYmIGluY2x1ZGVzKHRoaXMuaW5jbHVkZSwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cihlbCwgcHJvcCwgdGhpc1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbcHJvcCwgdmFsdWVdID0gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0uc3BsaXQoJzonLCAyKTtcbiAgICAgICAgICAgICAgICBhdHRyKGVsLCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWwsICdpZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IFsnd2lkdGgnLCAnaGVpZ2h0J107XG4gICAgICAgICAgICBsZXQgZGltZW5zaW9ucyA9IFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG5cbiAgICAgICAgICAgIGlmICghZGltZW5zaW9ucy5zb21lKHZhbCA9PiB2YWwpKSB7XG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucyA9IHByb3BzLm1hcChwcm9wID0+IGF0dHIoZWwsIHByb3ApKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgdmlld0JveCA9IGF0dHIoZWwsICd2aWV3Qm94Jyk7XG4gICAgICAgICAgICBpZiAodmlld0JveCAmJiAhZGltZW5zaW9ucy5zb21lKHZhbCA9PiB2YWwpKSB7XG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucyA9IHZpZXdCb3guc3BsaXQoJyAnKS5zbGljZSgyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGltZW5zaW9ucy5mb3JFYWNoKCh2YWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgICB2YWwgPSAodmFsIHwgMCkgKiB0aGlzLnJhdGlvO1xuICAgICAgICAgICAgICAgIHZhbCAmJiBhdHRyKGVsLCBwcm9wc1tpXSwgdmFsKTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWwgJiYgIWRpbWVuc2lvbnNbaSBeIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUF0dHIoZWwsIHByb3BzW2kgXiAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGF0dHIoZWwsICdkYXRhLXN2ZycsIHRoaXMuaWNvbiB8fCB0aGlzLnNyYyk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5jb25zdCBzdmdzID0ge307XG5cbmZ1bmN0aW9uIGxvYWRTVkcoc3JjKSB7XG5cbiAgICBpZiAoc3Znc1tzcmNdKSB7XG4gICAgICAgIHJldHVybiBzdmdzW3NyY107XG4gICAgfVxuXG4gICAgcmV0dXJuIHN2Z3Nbc3JjXSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICBpZiAoIXNyYykge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRzV2l0aChzcmMsICdkYXRhOicpKSB7XG4gICAgICAgICAgICByZXNvbHZlKGRlY29kZVVSSUNvbXBvbmVudChzcmMuc3BsaXQoJywnKVsxXSkpO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBhamF4KHNyYykudGhlbihcbiAgICAgICAgICAgICAgICB4aHIgPT4gcmVzb2x2ZSh4aHIucmVzcG9uc2UpLFxuICAgICAgICAgICAgICAgICgpID0+IHJlamVjdCgnU1ZHIG5vdCBmb3VuZC4nKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9XG5cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTVkcoc3ZnLCBpY29uKSB7XG5cbiAgICBpZiAoaWNvbiAmJiBpbmNsdWRlcyhzdmcsICc8c3ltYm9sJykpIHtcbiAgICAgICAgc3ZnID0gcGFyc2VTeW1ib2xzKHN2ZywgaWNvbikgfHwgc3ZnO1xuICAgIH1cblxuICAgIHN2ZyA9ICQoc3ZnLnN1YnN0cihzdmcuaW5kZXhPZignPHN2ZycpKSk7XG4gICAgcmV0dXJuIHN2ZyAmJiBzdmcuaGFzQ2hpbGROb2RlcygpICYmIHN2Zztcbn1cblxuY29uc3Qgc3ltYm9sUmUgPSAvPHN5bWJvbCguKj9pZD0oWydcIl0pKC4qPylcXDJbXl0qPzxcXC8pc3ltYm9sPi9nO1xuY29uc3Qgc3ltYm9scyA9IHt9O1xuXG5mdW5jdGlvbiBwYXJzZVN5bWJvbHMoc3ZnLCBpY29uKSB7XG5cbiAgICBpZiAoIXN5bWJvbHNbc3ZnXSkge1xuXG4gICAgICAgIHN5bWJvbHNbc3ZnXSA9IHt9O1xuXG4gICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHN5bWJvbFJlLmV4ZWMoc3ZnKSkpIHtcbiAgICAgICAgICAgIHN5bWJvbHNbc3ZnXVttYXRjaFszXV0gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIke21hdGNoWzFdfXN2Zz5gO1xuICAgICAgICB9XG5cbiAgICAgICAgc3ltYm9sUmUubGFzdEluZGV4ID0gMDtcblxuICAgIH1cblxuICAgIHJldHVybiBzeW1ib2xzW3N2Z11baWNvbl07XG59XG5cbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uKGVsKSB7XG5cbiAgICBjb25zdCBsZW5ndGggPSBnZXRNYXhQYXRoTGVuZ3RoKGVsKTtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tdWstYW5pbWF0aW9uLXN0cm9rZScsIGxlbmd0aCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXhQYXRoTGVuZ3RoKGVsKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLm1heCguLi4kJCgnW3N0cm9rZV0nLCBlbCkubWFwKHN0cm9rZSA9PlxuICAgICAgICBzdHJva2UuZ2V0VG90YWxMZW5ndGggJiYgc3Ryb2tlLmdldFRvdGFsTGVuZ3RoKCkgfHwgMFxuICAgICkuY29uY2F0KFswXSkpKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U1ZHKGVsLCByb290KSB7XG4gICAgaWYgKGlzVm9pZEVsZW1lbnQocm9vdCkgfHwgcm9vdC50YWdOYW1lID09PSAnQ0FOVkFTJykge1xuXG4gICAgICAgIGF0dHIocm9vdCwgJ2hpZGRlbicsIHRydWUpO1xuXG4gICAgICAgIGNvbnN0IG5leHQgPSByb290Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgcmV0dXJuIGVxdWFscyhlbCwgbmV4dClcbiAgICAgICAgICAgID8gbmV4dFxuICAgICAgICAgICAgOiBhZnRlcihyb290LCBlbCk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIGNvbnN0IGxhc3QgPSByb290Lmxhc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIHJldHVybiBlcXVhbHMoZWwsIGxhc3QpXG4gICAgICAgICAgICA/IGxhc3RcbiAgICAgICAgICAgIDogYXBwZW5kKHJvb3QsIGVsKTtcblxuICAgIH1cbn1cblxuZnVuY3Rpb24gZXF1YWxzKGVsLCBvdGhlcikge1xuICAgIHJldHVybiBhdHRyKGVsLCAnZGF0YS1zdmcnKSA9PT0gYXR0cihvdGhlciwgJ2RhdGEtc3ZnJyk7XG59XG4iLCJpbXBvcnQgU1ZHIGZyb20gJy4vc3ZnJztcbmltcG9ydCBjbG9zZUljb24gZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvY2xvc2UtaWNvbi5zdmcnO1xuaW1wb3J0IGNsb3NlTGFyZ2UgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvY2xvc2UtbGFyZ2Uuc3ZnJztcbmltcG9ydCBtYXJrZXIgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvbWFya2VyLnN2Zyc7XG5pbXBvcnQgbmF2YmFyVG9nZ2xlSWNvbiBmcm9tICcuLi8uLi9pbWFnZXMvY29tcG9uZW50cy9uYXZiYXItdG9nZ2xlLWljb24uc3ZnJztcbmltcG9ydCBvdmVybGF5SWNvbiBmcm9tICcuLi8uLi9pbWFnZXMvY29tcG9uZW50cy9vdmVybGF5LWljb24uc3ZnJztcbmltcG9ydCBwYWdpbmF0aW9uTmV4dCBmcm9tICcuLi8uLi9pbWFnZXMvY29tcG9uZW50cy9wYWdpbmF0aW9uLW5leHQuc3ZnJztcbmltcG9ydCBwYWdpbmF0aW9uUHJldmlvdXMgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi1wcmV2aW91cy5zdmcnO1xuaW1wb3J0IHNlYXJjaEljb24gZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvc2VhcmNoLWljb24uc3ZnJztcbmltcG9ydCBzZWFyY2hMYXJnZSBmcm9tICcuLi8uLi9pbWFnZXMvY29tcG9uZW50cy9zZWFyY2gtbGFyZ2Uuc3ZnJztcbmltcG9ydCBzZWFyY2hOYXZiYXIgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvc2VhcmNoLW5hdmJhci5zdmcnO1xuaW1wb3J0IHNsaWRlbmF2TmV4dCBmcm9tICcuLi8uLi9pbWFnZXMvY29tcG9uZW50cy9zbGlkZW5hdi1uZXh0LnN2Zyc7XG5pbXBvcnQgc2xpZGVuYXZOZXh0TGFyZ2UgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvc2xpZGVuYXYtbmV4dC1sYXJnZS5zdmcnO1xuaW1wb3J0IHNsaWRlbmF2UHJldmlvdXMgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvc2xpZGVuYXYtcHJldmlvdXMuc3ZnJztcbmltcG9ydCBzbGlkZW5hdlByZXZpb3VzTGFyZ2UgZnJvbSAnLi4vLi4vaW1hZ2VzL2NvbXBvbmVudHMvc2xpZGVuYXYtcHJldmlvdXMtbGFyZ2Uuc3ZnJztcbmltcG9ydCBzcGlubmVyIGZyb20gJy4uLy4uL2ltYWdlcy9jb21wb25lbnRzL3NwaW5uZXIuc3ZnJztcbmltcG9ydCB0b3RvcCBmcm9tICcuLi8uLi9pbWFnZXMvY29tcG9uZW50cy90b3RvcC5zdmcnO1xuaW1wb3J0IHskLCBhZGRDbGFzcywgYXBwbHksIGNzcywgZWFjaCwgaGFzQ2xhc3MsIGh5cGhlbmF0ZSwgaXNSdGwsIGlzU3RyaW5nLCBub29wLCBwYXJlbnRzLCBQcm9taXNlLCBzd2FwfSBmcm9tICd1aWtpdC11dGlsJztcblxuY29uc3QgcGFyc2VkID0ge307XG5jb25zdCBpY29ucyA9IHtcbiAgICBzcGlubmVyLFxuICAgIHRvdG9wLFxuICAgIG1hcmtlcixcbiAgICAnY2xvc2UtaWNvbic6IGNsb3NlSWNvbixcbiAgICAnY2xvc2UtbGFyZ2UnOiBjbG9zZUxhcmdlLFxuICAgICduYXZiYXItdG9nZ2xlLWljb24nOiBuYXZiYXJUb2dnbGVJY29uLFxuICAgICdvdmVybGF5LWljb24nOiBvdmVybGF5SWNvbixcbiAgICAncGFnaW5hdGlvbi1uZXh0JzogcGFnaW5hdGlvbk5leHQsXG4gICAgJ3BhZ2luYXRpb24tcHJldmlvdXMnOiBwYWdpbmF0aW9uUHJldmlvdXMsXG4gICAgJ3NlYXJjaC1pY29uJzogc2VhcmNoSWNvbixcbiAgICAnc2VhcmNoLWxhcmdlJzogc2VhcmNoTGFyZ2UsXG4gICAgJ3NlYXJjaC1uYXZiYXInOiBzZWFyY2hOYXZiYXIsXG4gICAgJ3NsaWRlbmF2LW5leHQnOiBzbGlkZW5hdk5leHQsXG4gICAgJ3NsaWRlbmF2LW5leHQtbGFyZ2UnOiBzbGlkZW5hdk5leHRMYXJnZSxcbiAgICAnc2xpZGVuYXYtcHJldmlvdXMnOiBzbGlkZW5hdlByZXZpb3VzLFxuICAgICdzbGlkZW5hdi1wcmV2aW91cy1sYXJnZSc6IHNsaWRlbmF2UHJldmlvdXNMYXJnZVxufTtcblxuY29uc3QgSWNvbiA9IHtcblxuICAgIGluc3RhbGwsXG5cbiAgICBleHRlbmRzOiBTVkcsXG5cbiAgICBhcmdzOiAnaWNvbicsXG5cbiAgICBwcm9wczogWydpY29uJ10sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGluY2x1ZGU6IFsnZm9jdXNhYmxlJ11cbiAgICB9LFxuXG4gICAgaXNJY29uOiB0cnVlLFxuXG4gICAgYmVmb3JlQ29ubmVjdCgpIHtcbiAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsICd1ay1pY29uJyk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBnZXRTdmcoKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGljb24gPSBnZXRJY29uKGFwcGx5UnRsKHRoaXMuaWNvbikpO1xuXG4gICAgICAgICAgICBpZiAoIWljb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0ljb24gbm90IGZvdW5kLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGljb24pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEljb247XG5cbmV4cG9ydCBjb25zdCBJY29uQ29tcG9uZW50ID0ge1xuXG4gICAgYXJnczogZmFsc2UsXG5cbiAgICBleHRlbmRzOiBJY29uLFxuXG4gICAgZGF0YTogdm0gPT4gKHtcbiAgICAgICAgaWNvbjogaHlwaGVuYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMubmFtZSlcbiAgICB9KSxcblxuICAgIGJlZm9yZUNvbm5lY3QoKSB7XG4gICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLiRuYW1lKTtcbiAgICB9XG5cbn07XG5cbmV4cG9ydCBjb25zdCBTbGlkZW5hdiA9IHtcblxuICAgIGV4dGVuZHM6IEljb25Db21wb25lbnQsXG5cbiAgICBiZWZvcmVDb25uZWN0KCkge1xuICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLXNsaWRlbmF2Jyk7XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaWNvbih7aWNvbn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKCRlbCwgJ3VrLXNsaWRlbmF2LWxhcmdlJylcbiAgICAgICAgICAgICAgICA/IGAke2ljb259LWxhcmdlYFxuICAgICAgICAgICAgICAgIDogaWNvbjtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5leHBvcnQgY29uc3QgU2VhcmNoID0ge1xuXG4gICAgZXh0ZW5kczogSWNvbkNvbXBvbmVudCxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaWNvbih7aWNvbn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0NsYXNzKCRlbCwgJ3VrLXNlYXJjaC1pY29uJykgJiYgcGFyZW50cygkZWwsICcudWstc2VhcmNoLWxhcmdlJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyAnc2VhcmNoLWxhcmdlJ1xuICAgICAgICAgICAgICAgIDogcGFyZW50cygkZWwsICcudWstc2VhcmNoLW5hdmJhcicpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/ICdzZWFyY2gtbmF2YmFyJ1xuICAgICAgICAgICAgICAgICAgICA6IGljb247XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZXhwb3J0IGNvbnN0IENsb3NlID0ge1xuXG4gICAgZXh0ZW5kczogSWNvbkNvbXBvbmVudCxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaWNvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBgY2xvc2UtJHtoYXNDbGFzcyh0aGlzLiRlbCwgJ3VrLWNsb3NlLWxhcmdlJykgPyAnbGFyZ2UnIDogJ2ljb24nfWA7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZXhwb3J0IGNvbnN0IFNwaW5uZXIgPSB7XG5cbiAgICBleHRlbmRzOiBJY29uQ29tcG9uZW50LFxuXG4gICAgY29ubmVjdGVkKCkge1xuICAgICAgICB0aGlzLnN2Zy50aGVuKHN2ZyA9PiB0aGlzLnJhdGlvICE9PSAxICYmIGNzcygkKCdjaXJjbGUnLCBzdmcpLCAnc3Ryb2tlV2lkdGgnLCAxIC8gdGhpcy5yYXRpbyksIG5vb3ApO1xuICAgIH1cblxufTtcblxuZnVuY3Rpb24gaW5zdGFsbChVSWtpdCkge1xuICAgIFVJa2l0Lmljb24uYWRkID0gKG5hbWUsIHN2ZykgPT4ge1xuXG4gICAgICAgIGNvbnN0IGFkZGVkID0gaXNTdHJpbmcobmFtZSkgPyAoe1tuYW1lXTogc3ZnfSkgOiBuYW1lO1xuICAgICAgICBlYWNoKGFkZGVkLCAoc3ZnLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBpY29uc1tuYW1lXSA9IHN2ZztcbiAgICAgICAgICAgIGRlbGV0ZSBwYXJzZWRbbmFtZV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChVSWtpdC5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGFwcGx5KGRvY3VtZW50LmJvZHksIGVsID0+XG4gICAgICAgICAgICAgICAgZWFjaChVSWtpdC5nZXRDb21wb25lbnRzKGVsKSwgY21wID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY21wLiRvcHRpb25zLmlzSWNvbiAmJiBjbXAuaWNvbiBpbiBhZGRlZCAmJiBjbXAuJHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRJY29uKGljb24pIHtcblxuICAgIGlmICghaWNvbnNbaWNvbl0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJzZWRbaWNvbl0pIHtcbiAgICAgICAgcGFyc2VkW2ljb25dID0gJChpY29uc1tpY29uXS50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWRbaWNvbl0uY2xvbmVOb2RlKHRydWUpO1xufVxuXG5mdW5jdGlvbiBhcHBseVJ0bChpY29uKSB7XG4gICAgcmV0dXJuIGlzUnRsID8gc3dhcChzd2FwKGljb24sICdsZWZ0JywgJ3JpZ2h0JyksICdwcmV2aW91cycsICduZXh0JykgOiBpY29uO1xufVxuIiwiaW1wb3J0IHtjcmVhdGVFdmVudCwgY3NzLCBEaW1lbnNpb25zLCBlc2NhcGUsIGdldEltYWdlLCBpbmNsdWRlcywgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsIGlzVW5kZWZpbmVkLCBub29wLCBxdWVyeUFsbCwgc3RhcnRzV2l0aCwgdG9GbG9hdCwgdG9QeCwgdHJpZ2dlcn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGFyZ3M6ICdkYXRhU3JjJyxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGRhdGFTcmM6IFN0cmluZyxcbiAgICAgICAgZGF0YVNyY3NldDogQm9vbGVhbixcbiAgICAgICAgc2l6ZXM6IFN0cmluZyxcbiAgICAgICAgd2lkdGg6IE51bWJlcixcbiAgICAgICAgaGVpZ2h0OiBOdW1iZXIsXG4gICAgICAgIG9mZnNldFRvcDogU3RyaW5nLFxuICAgICAgICBvZmZzZXRMZWZ0OiBTdHJpbmcsXG4gICAgICAgIHRhcmdldDogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgZGF0YVNyYzogJycsXG4gICAgICAgIGRhdGFTcmNzZXQ6IGZhbHNlLFxuICAgICAgICBzaXplczogZmFsc2UsXG4gICAgICAgIHdpZHRoOiBmYWxzZSxcbiAgICAgICAgaGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgb2Zmc2V0VG9wOiAnNTB2aCcsXG4gICAgICAgIG9mZnNldExlZnQ6IDAsXG4gICAgICAgIHRhcmdldDogZmFsc2VcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBjYWNoZUtleSh7ZGF0YVNyY30pIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLiRuYW1lfS4ke2RhdGFTcmN9YDtcbiAgICAgICAgfSxcblxuICAgICAgICB3aWR0aCh7d2lkdGgsIGRhdGFXaWR0aH0pIHtcbiAgICAgICAgICAgIHJldHVybiB3aWR0aCB8fCBkYXRhV2lkdGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGVpZ2h0KHtoZWlnaHQsIGRhdGFIZWlnaHR9KSB7XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0IHx8IGRhdGFIZWlnaHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2l6ZXMoe3NpemVzLCBkYXRhU2l6ZXN9KSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZXMgfHwgZGF0YVNpemVzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzSW1nKF8sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzSW1nKCRlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGFyZ2V0OiB7XG5cbiAgICAgICAgICAgIGdldCh7dGFyZ2V0fSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy4kZWxdLmNvbmNhdChxdWVyeUFsbCh0YXJnZXQsIHRoaXMuJGVsKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3YXRjaCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIG9mZnNldFRvcCh7b2Zmc2V0VG9wfSkge1xuICAgICAgICAgICAgcmV0dXJuIHRvUHgob2Zmc2V0VG9wLCAnaGVpZ2h0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb2Zmc2V0TGVmdCh7b2Zmc2V0TGVmdH0pIHtcbiAgICAgICAgICAgIHJldHVybiB0b1B4KG9mZnNldExlZnQsICd3aWR0aCcpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuXG4gICAgICAgIGlmIChzdG9yYWdlW3RoaXMuY2FjaGVLZXldKSB7XG4gICAgICAgICAgICBzZXRTcmNBdHRycyh0aGlzLiRlbCwgc3RvcmFnZVt0aGlzLmNhY2hlS2V5XSB8fCB0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0ltZyAmJiB0aGlzLndpZHRoICYmIHRoaXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICBzZXRTcmNBdHRycyh0aGlzLiRlbCwgZ2V0UGxhY2Vob2xkZXJJbWFnZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5zaXplcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcih0aGlzLmxvYWQsIHtcbiAgICAgICAgICAgIHJvb3RNYXJnaW46IGAke3RoaXMub2Zmc2V0VG9wfXB4ICR7dGhpcy5vZmZzZXRMZWZ0fXB4YFxuICAgICAgICB9KTtcblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5vYnNlcnZlKTtcblxuICAgIH0sXG5cbiAgICBkaXNjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICByZWFkKHtpbWFnZX0pIHtcblxuICAgICAgICAgICAgaWYgKCFpbWFnZSAmJiBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW1nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbWFnZSAmJiBpbWFnZS50aGVuKGltZyA9PiBpbWcgJiYgaW1nLmN1cnJlbnRTcmMgIT09ICcnICYmIHNldFNyY0F0dHJzKHRoaXMuJGVsLCBjdXJyZW50U3JjKGltZykpKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlKGRhdGEpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVNyY3NldCAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAhPT0gMSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYmdTaXplID0gY3NzKHRoaXMuJGVsLCAnYmFja2dyb3VuZFNpemUnKTtcbiAgICAgICAgICAgICAgICBpZiAoYmdTaXplLm1hdGNoKC9eKGF1dG9cXHM/KSskLykgfHwgdG9GbG9hdChiZ1NpemUpID09PSBkYXRhLmJnU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmJnU2l6ZSA9IGdldFNvdXJjZVNpemUodGhpcy5kYXRhU3Jjc2V0LCB0aGlzLnNpemVzKTtcbiAgICAgICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnYmFja2dyb3VuZFNpemUnLCBgJHtkYXRhLmJnU2l6ZX1weGApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGxvYWQoZW50cmllcykge1xuXG4gICAgICAgICAgICAvLyBPbGQgY2hyb21pdW0gYmFzZWQgYnJvd3NlcnMgKFVDIEJyb3dzZXIpIGRpZCBub3QgaW1wbGVtZW50IGBpc0ludGVyc2VjdGluZ2BcbiAgICAgICAgICAgIGlmICghZW50cmllcy5zb21lKGVudHJ5ID0+IGlzVW5kZWZpbmVkKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB8fCBlbnRyeS5pc0ludGVyc2VjdGluZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2RhdGEuaW1hZ2UgPSBnZXRJbWFnZSh0aGlzLmRhdGFTcmMsIHRoaXMuZGF0YVNyY3NldCwgdGhpcy5zaXplcykudGhlbihpbWcgPT4ge1xuXG4gICAgICAgICAgICAgICAgc2V0U3JjQXR0cnModGhpcy4kZWwsIGN1cnJlbnRTcmMoaW1nKSwgaW1nLnNyY3NldCwgaW1nLnNpemVzKTtcbiAgICAgICAgICAgICAgICBzdG9yYWdlW3RoaXMuY2FjaGVLZXldID0gY3VycmVudFNyYyhpbWcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbWc7XG5cbiAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvYnNlcnZlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9kYXRhLmltYWdlICYmIHRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmZvckVhY2goZWwgPT4gdGhpcy5vYnNlcnZlci5vYnNlcnZlKGVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gc2V0U3JjQXR0cnMoZWwsIHNyYywgc3Jjc2V0LCBzaXplcykge1xuXG4gICAgaWYgKGlzSW1nKGVsKSkge1xuICAgICAgICBzaXplcyAmJiAoZWwuc2l6ZXMgPSBzaXplcyk7XG4gICAgICAgIHNyY3NldCAmJiAoZWwuc3Jjc2V0ID0gc3Jjc2V0KTtcbiAgICAgICAgc3JjICYmIChlbC5zcmMgPSBzcmMpO1xuICAgIH0gZWxzZSBpZiAoc3JjKSB7XG5cbiAgICAgICAgY29uc3QgY2hhbmdlID0gIWluY2x1ZGVzKGVsLnN0eWxlLmJhY2tncm91bmRJbWFnZSwgc3JjKTtcbiAgICAgICAgaWYgKGNoYW5nZSkge1xuICAgICAgICAgICAgY3NzKGVsLCAnYmFja2dyb3VuZEltYWdlJywgYHVybCgke2VzY2FwZShzcmMpfSlgKTtcbiAgICAgICAgICAgIHRyaWdnZXIoZWwsIGNyZWF0ZUV2ZW50KCdsb2FkJywgZmFsc2UpKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIGdldFBsYWNlaG9sZGVySW1hZ2Uod2lkdGgsIGhlaWdodCwgc2l6ZXMpIHtcblxuICAgIGlmIChzaXplcykge1xuICAgICAgICAoe3dpZHRoLCBoZWlnaHR9ID0gRGltZW5zaW9ucy5yYXRpbyh7d2lkdGgsIGhlaWdodH0sICd3aWR0aCcsIHRvUHgoc2l6ZXNUb1BpeGVsKHNpemVzKSkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYGRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke2hlaWdodH1cIj48L3N2Zz5gO1xufVxuXG5jb25zdCBzaXplc1JlID0gL1xccyooLio/KVxccyooXFx3K3xjYWxjXFwoLio/XFwpKVxccyooPzosfCQpL2c7XG5mdW5jdGlvbiBzaXplc1RvUGl4ZWwoc2l6ZXMpIHtcbiAgICBsZXQgbWF0Y2hlcztcblxuICAgIHNpemVzUmUubGFzdEluZGV4ID0gMDtcblxuICAgIHdoaWxlICgobWF0Y2hlcyA9IHNpemVzUmUuZXhlYyhzaXplcykpKSB7XG4gICAgICAgIGlmICghbWF0Y2hlc1sxXSB8fCB3aW5kb3cubWF0Y2hNZWRpYShtYXRjaGVzWzFdKS5tYXRjaGVzKSB7XG4gICAgICAgICAgICBtYXRjaGVzID0gZXZhbHVhdGVTaXplKG1hdGNoZXNbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hlcyB8fCAnMTAwdncnO1xufVxuXG5jb25zdCBzaXplUmUgPSAvXFxkKyg/Olxcdyt8JSkvZztcbmNvbnN0IGFkZGl0aW9uUmUgPSAvWystXT8oXFxkKykvZztcbmZ1bmN0aW9uIGV2YWx1YXRlU2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIHN0YXJ0c1dpdGgoc2l6ZSwgJ2NhbGMnKVxuICAgICAgICA/IHNpemVcbiAgICAgICAgICAgIC5zdWJzdHJpbmcoNSwgc2l6ZS5sZW5ndGggLSAxKVxuICAgICAgICAgICAgLnJlcGxhY2Uoc2l6ZVJlLCBzaXplID0+IHRvUHgoc2l6ZSkpXG4gICAgICAgICAgICAucmVwbGFjZSgvIC9nLCAnJylcbiAgICAgICAgICAgIC5tYXRjaChhZGRpdGlvblJlKVxuICAgICAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArICtiLCAwKVxuICAgICAgICA6IHNpemU7XG59XG5cbmNvbnN0IHNyY1NldFJlID0gL1xccytcXGQrd1xccyooPzosfCQpL2c7XG5mdW5jdGlvbiBnZXRTb3VyY2VTaXplKHNyY3NldCwgc2l6ZXMpIHtcbiAgICBjb25zdCBzcmNTaXplID0gdG9QeChzaXplc1RvUGl4ZWwoc2l6ZXMpKTtcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IChzcmNzZXQubWF0Y2goc3JjU2V0UmUpIHx8IFtdKS5tYXAodG9GbG9hdCkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3JzLmZpbHRlcihzaXplID0+IHNpemUgPj0gc3JjU2l6ZSlbMF0gfHwgZGVzY3JpcHRvcnMucG9wKCkgfHwgJyc7XG59XG5cbmZ1bmN0aW9uIGlzSW1nKGVsKSB7XG4gICAgcmV0dXJuIGVsLnRhZ05hbWUgPT09ICdJTUcnO1xufVxuXG5mdW5jdGlvbiBjdXJyZW50U3JjKGVsKSB7XG4gICAgcmV0dXJuIGVsLmN1cnJlbnRTcmMgfHwgZWwuc3JjO1xufVxuXG5jb25zdCBrZXkgPSAnX190ZXN0X18nO1xubGV0IHN0b3JhZ2U7XG5cbi8vIHdvcmthcm91bmQgZm9yIFNhZmFyaSdzIHByaXZhdGUgYnJvd3NpbmcgbW9kZSBhbmQgYWNjZXNzaW5nIHNlc3Npb25TdG9yYWdlIGluIEJsaW5rXG50cnkge1xuICAgIHN0b3JhZ2UgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgfHwge307XG4gICAgc3RvcmFnZVtrZXldID0gMTtcbiAgICBkZWxldGUgc3RvcmFnZVtrZXldO1xufSBjYXRjaCAoZSkge1xuICAgIHN0b3JhZ2UgPSB7fTtcbn1cbiIsImltcG9ydCB7Z2V0Q3NzVmFyLCBpc1N0cmluZywgdG9GbG9hdH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIG1lZGlhOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgbWVkaWE6IGZhbHNlXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgbWF0Y2hNZWRpYSgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhID0gdG9NZWRpYSh0aGlzLm1lZGlhKTtcbiAgICAgICAgICAgIHJldHVybiAhbWVkaWEgfHwgd2luZG93Lm1hdGNoTWVkaWEobWVkaWEpLm1hdGNoZXM7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gdG9NZWRpYSh2YWx1ZSkge1xuXG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICBpZiAodmFsdWVbMF0gPT09ICdAJykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGBicmVha3BvaW50LSR7dmFsdWUuc3Vic3RyKDEpfWA7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvRmxvYXQoZ2V0Q3NzVmFyKG5hbWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZSAmJiAhaXNOYU4odmFsdWUpID8gYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCA6IGZhbHNlO1xufVxuIiwiaW1wb3J0IENsYXNzIGZyb20gJy4uL21peGluL2NsYXNzJztcbmltcG9ydCBNZWRpYSBmcm9tICcuLi9taXhpbi9tZWRpYSc7XG5pbXBvcnQge2F0dHIsIGdldENzc1ZhciwgdG9nZ2xlQ2xhc3MsIHVud3JhcCwgd3JhcElubmVyfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQ2xhc3MsIE1lZGlhXSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGZpbGw6IFN0cmluZ1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGZpbGw6ICcnLFxuICAgICAgICBjbHNXcmFwcGVyOiAndWstbGVhZGVyLWZpbGwnLFxuICAgICAgICBjbHNIaWRlOiAndWstbGVhZGVyLWhpZGUnLFxuICAgICAgICBhdHRyRmlsbDogJ2RhdGEtZmlsbCdcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBmaWxsKHtmaWxsfSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGwgfHwgZ2V0Q3NzVmFyKCdsZWFkZXItZmlsbC1jb250ZW50Jyk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjb25uZWN0ZWQoKSB7XG4gICAgICAgIFt0aGlzLndyYXBwZXJdID0gd3JhcElubmVyKHRoaXMuJGVsLCBgPHNwYW4gY2xhc3M9XCIke3RoaXMuY2xzV3JhcHBlcn1cIj5gKTtcbiAgICB9LFxuXG4gICAgZGlzY29ubmVjdGVkKCkge1xuICAgICAgICB1bndyYXAodGhpcy53cmFwcGVyLmNoaWxkTm9kZXMpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICByZWFkKHtjaGFuZ2VkLCB3aWR0aH0pIHtcblxuICAgICAgICAgICAgY29uc3QgcHJldiA9IHdpZHRoO1xuXG4gICAgICAgICAgICB3aWR0aCA9IE1hdGguZmxvb3IodGhpcy4kZWwub2Zmc2V0V2lkdGggLyAyKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICBmaWxsOiB0aGlzLmZpbGwsXG4gICAgICAgICAgICAgICAgY2hhbmdlZDogY2hhbmdlZCB8fCBwcmV2ICE9PSB3aWR0aCxcbiAgICAgICAgICAgICAgICBoaWRlOiAhdGhpcy5tYXRjaE1lZGlhXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlKGRhdGEpIHtcblxuICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModGhpcy53cmFwcGVyLCB0aGlzLmNsc0hpZGUsIGRhdGEuaGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBhdHRyKHRoaXMud3JhcHBlciwgdGhpcy5hdHRyRmlsbCwgbmV3IEFycmF5KGRhdGEud2lkdGgpLmpvaW4oZGF0YS5maWxsKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH1cblxufTtcbiIsImltcG9ydCB7JH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGNvbnRhaW5lcjogQm9vbGVhblxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGNvbnRhaW5lcjogdHJ1ZVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGNvbnRhaW5lcih7Y29udGFpbmVyfSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lciA9PT0gdHJ1ZSAmJiB0aGlzLiRjb250YWluZXIgfHwgY29udGFpbmVyICYmICQoY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IHskLCBhZGRDbGFzcywgYXBwZW5kLCBjc3MsIGluY2x1ZGVzLCBsYXN0LCBvbiwgb25jZSwgUHJvbWlzZSwgcmVtb3ZlQ2xhc3MsIHRvTXMsIHdpZHRoLCB3aXRoaW59IGZyb20gJ3Vpa2l0LXV0aWwnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4vY2xhc3MnO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgVG9nZ2xhYmxlIGZyb20gJy4vdG9nZ2xhYmxlJztcbmltcG9ydCB7ZGVsYXlPbn0gZnJvbSAnLi4vY29yZS9kcm9wJztcblxuY29uc3QgYWN0aXZlID0gW107XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0NsYXNzLCBDb250YWluZXIsIFRvZ2dsYWJsZV0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBzZWxQYW5lbDogU3RyaW5nLFxuICAgICAgICBzZWxDbG9zZTogU3RyaW5nLFxuICAgICAgICBlc2NDbG9zZTogQm9vbGVhbixcbiAgICAgICAgYmdDbG9zZTogQm9vbGVhbixcbiAgICAgICAgc3RhY2s6IEJvb2xlYW5cbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICBjbHM6ICd1ay1vcGVuJyxcbiAgICAgICAgZXNjQ2xvc2U6IHRydWUsXG4gICAgICAgIGJnQ2xvc2U6IHRydWUsXG4gICAgICAgIG92ZXJsYXk6IHRydWUsXG4gICAgICAgIHN0YWNrOiBmYWxzZVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIHBhbmVsKHtzZWxQYW5lbH0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQoc2VsUGFuZWwsICRlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNpdGlvbkVsZW1lbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbDtcbiAgICAgICAgfSxcblxuICAgICAgICBiZ0Nsb3NlKHtiZ0Nsb3NlfSkge1xuICAgICAgICAgICAgcmV0dXJuIGJnQ2xvc2UgJiYgdGhpcy5wYW5lbDtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGJlZm9yZURpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU5vdyh0aGlzLiRlbCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgZGVsZWdhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsQ2xvc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICd0b2dnbGUnLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2JlZm9yZXNob3cnLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlcyhhY3RpdmUsIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3RhY2sgJiYgYWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChhY3RpdmUubWFwKG1vZGFsID0+IG1vZGFsLmhpZGUoKSkpLnRoZW4odGhpcy5zaG93KTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ3Nob3cnLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoKHdpbmRvdykgLSB3aWR0aChkb2N1bWVudCkgJiYgdGhpcy5vdmVybGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dZJywgJ3Njcm9sbCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy5jbHNQYWdlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJnQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgb25jZSh0aGlzLiRlbCwgJ2hpZGUnLCBkZWxheU9uKGRvY3VtZW50LCAnY2xpY2snLCAoe2RlZmF1bHRQcmV2ZW50ZWQsIHRhcmdldH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBsYXN0KGFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBjdXJyZW50ID09PSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCFjdXJyZW50Lm92ZXJsYXkgfHwgd2l0aGluKHRhcmdldCwgY3VycmVudC4kZWwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmICF3aXRoaW4odGFyZ2V0LCBjdXJyZW50LnBhbmVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCB7c2VsZjogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVzY0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2UodGhpcy4kZWwsICdoaWRlJywgb24oZG9jdW1lbnQsICdrZXlkb3duJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gbGFzdChhY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcgJiYgY3VycmVudCA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSksIHtzZWxmOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiAnaGlkZGVuJyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcblxuICAgICAgICAgICAgICAgIGFjdGl2ZS5zcGxpY2UoYWN0aXZlLmluZGV4T2YodGhpcyksIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAnb3ZlcmZsb3dZJywgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghYWN0aXZlLnNvbWUobW9kYWwgPT4gbW9kYWwuY2xzUGFnZSA9PT0gdGhpcy5jbHNQYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgXSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICB0b2dnbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1RvZ2dsZWQoKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdygpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyICYmIHRoaXMuJGVsLnBhcmVudE5vZGUgIT09IHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgYXBwZW5kKHRoaXMuY29udGFpbmVyLCB0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKS50aGVuKHJlc29sdmUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b2dnbGVFbGVtZW50KHRoaXMuJGVsLCB0cnVlLCBhbmltYXRlKHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlRWxlbWVudCh0aGlzLiRlbCwgZmFsc2UsIGFuaW1hdGUodGhpcykpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIGFuaW1hdGUoe3RyYW5zaXRpb25FbGVtZW50LCBfdG9nZ2xlfSkge1xuICAgIHJldHVybiAoZWwsIHNob3cpID0+XG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICAgICAgICBvbmNlKGVsLCAnc2hvdyBoaWRlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGVsLl9yZWplY3QgJiYgZWwuX3JlamVjdCgpO1xuICAgICAgICAgICAgICAgIGVsLl9yZWplY3QgPSByZWplY3Q7XG5cbiAgICAgICAgICAgICAgICBfdG9nZ2xlKGVsLCBzaG93KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZiA9IG9uY2UodHJhbnNpdGlvbkVsZW1lbnQsICd0cmFuc2l0aW9uc3RhcnQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2UodHJhbnNpdGlvbkVsZW1lbnQsICd0cmFuc2l0aW9uZW5kIHRyYW5zaXRpb25jYW5jZWwnLCByZXNvbHZlLCB7c2VsZjogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgIH0sIHtzZWxmOiB0cnVlfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvZmYoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIHRvTXMoY3NzKHRyYW5zaXRpb25FbGVtZW50LCAndHJhbnNpdGlvbkR1cmF0aW9uJykpKTtcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbn1cbiIsImltcG9ydCBNb2RhbCBmcm9tICcuLi9taXhpbi9tb2RhbCc7XG5pbXBvcnQgeyQsIGFkZENsYXNzLCBhc3NpZ24sIGNzcywgaGFzQ2xhc3MsIGhlaWdodCwgaHRtbCwgaXNTdHJpbmcsIG9uLCBQcm9taXNlLCByZW1vdmVDbGFzc30gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGluc3RhbGwsXG5cbiAgICBtaXhpbnM6IFtNb2RhbF0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGNsc1BhZ2U6ICd1ay1tb2RhbC1wYWdlJyxcbiAgICAgICAgc2VsUGFuZWw6ICcudWstbW9kYWwtZGlhbG9nJyxcbiAgICAgICAgc2VsQ2xvc2U6ICcudWstbW9kYWwtY2xvc2UsIC51ay1tb2RhbC1jbG9zZS1kZWZhdWx0LCAudWstbW9kYWwtY2xvc2Utb3V0c2lkZSwgLnVrLW1vZGFsLWNsb3NlLWZ1bGwnXG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdzaG93JyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcblxuICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0aGlzLnBhbmVsLCAndWstbWFyZ2luLWF1dG8tdmVydGljYWwnKSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLWZsZXgnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaGVpZ2h0KHRoaXMuJGVsKTsgLy8gZm9yY2UgcmVmbG93XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG5cbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsICdkaXNwbGF5JywgJycpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCAndWstZmxleCcpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIF1cblxufTtcblxuZnVuY3Rpb24gaW5zdGFsbChVSWtpdCkge1xuXG4gICAgVUlraXQubW9kYWwuZGlhbG9nID0gZnVuY3Rpb24gKGNvbnRlbnQsIG9wdGlvbnMpIHtcblxuICAgICAgICBjb25zdCBkaWFsb2cgPSBVSWtpdC5tb2RhbChgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidWstbW9kYWxcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidWstbW9kYWwtZGlhbG9nXCI+JHtjb250ZW50fTwvZGl2PlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgLCBvcHRpb25zKTtcblxuICAgICAgICBkaWFsb2cuc2hvdygpO1xuXG4gICAgICAgIG9uKGRpYWxvZy4kZWwsICdoaWRkZW4nLCAoKSA9PiBQcm9taXNlLnJlc29sdmUoKCkgPT4gZGlhbG9nLiRkZXN0cm95KHRydWUpKSwge3NlbGY6IHRydWV9KTtcblxuICAgICAgICByZXR1cm4gZGlhbG9nO1xuICAgIH07XG5cbiAgICBVSWtpdC5tb2RhbC5hbGVydCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9IGFzc2lnbih7YmdDbG9zZTogZmFsc2UsIGVzY0Nsb3NlOiBmYWxzZSwgbGFiZWxzOiBVSWtpdC5tb2RhbC5sYWJlbHN9LCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoXG4gICAgICAgICAgICByZXNvbHZlID0+IG9uKFVJa2l0Lm1vZGFsLmRpYWxvZyhgXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVrLW1vZGFsLWJvZHlcIj4ke2lzU3RyaW5nKG1lc3NhZ2UpID8gbWVzc2FnZSA6IGh0bWwobWVzc2FnZSl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVrLW1vZGFsLWZvb3RlciB1ay10ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ1ay1idXR0b24gdWstYnV0dG9uLXByaW1hcnkgdWstbW9kYWwtY2xvc2VcIiBhdXRvZm9jdXM+JHtvcHRpb25zLmxhYmVscy5va308L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGAsIG9wdGlvbnMpLiRlbCwgJ2hpZGUnLCByZXNvbHZlKVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICBVSWtpdC5tb2RhbC5jb25maXJtID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcblxuICAgICAgICBvcHRpb25zID0gYXNzaWduKHtiZ0Nsb3NlOiBmYWxzZSwgZXNjQ2xvc2U6IHRydWUsIGxhYmVsczogVUlraXQubW9kYWwubGFiZWxzfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgY29uZmlybSA9IFVJa2l0Lm1vZGFsLmRpYWxvZyhgXG4gICAgICAgICAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1ay1tb2RhbC1ib2R5XCI+JHtpc1N0cmluZyhtZXNzYWdlKSA/IG1lc3NhZ2UgOiBodG1sKG1lc3NhZ2UpfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidWstbW9kYWwtZm9vdGVyIHVrLXRleHQtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ1ay1idXR0b24gdWstYnV0dG9uLWRlZmF1bHQgdWstbW9kYWwtY2xvc2VcIiB0eXBlPVwiYnV0dG9uXCI+JHtvcHRpb25zLmxhYmVscy5jYW5jZWx9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidWstYnV0dG9uIHVrLWJ1dHRvbi1wcmltYXJ5XCIgYXV0b2ZvY3VzPiR7b3B0aW9ucy5sYWJlbHMub2t9PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIGAsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgb24oY29uZmlybS4kZWwsICdzdWJtaXQnLCAnZm9ybScsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpcm0uaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvbihjb25maXJtLiRlbCwgJ2hpZGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgVUlraXQubW9kYWwucHJvbXB0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHZhbHVlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgb3B0aW9ucyA9IGFzc2lnbih7YmdDbG9zZTogZmFsc2UsIGVzY0Nsb3NlOiB0cnVlLCBsYWJlbHM6IFVJa2l0Lm1vZGFsLmxhYmVsc30sIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblxuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gVUlraXQubW9kYWwuZGlhbG9nKGBcbiAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9XCJ1ay1mb3JtLXN0YWNrZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1ay1tb2RhbC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPiR7aXNTdHJpbmcobWVzc2FnZSkgPyBtZXNzYWdlIDogaHRtbChtZXNzYWdlKX08L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cInVrLWlucHV0XCIgYXV0b2ZvY3VzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidWstbW9kYWwtZm9vdGVyIHVrLXRleHQtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidWstYnV0dG9uIHVrLWJ1dHRvbi1kZWZhdWx0IHVrLW1vZGFsLWNsb3NlXCIgdHlwZT1cImJ1dHRvblwiPiR7b3B0aW9ucy5sYWJlbHMuY2FuY2VsfTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ1ay1idXR0b24gdWstYnV0dG9uLXByaW1hcnlcIj4ke29wdGlvbnMubGFiZWxzLm9rfTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICBgLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICBpbnB1dCA9ICQoJ2lucHV0JywgcHJvbXB0LiRlbCk7XG5cbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGxldCByZXNvbHZlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBvbihwcm9tcHQuJGVsLCAnc3VibWl0JywgJ2Zvcm0nLCBlID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHByb21wdC5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9uKHByb21wdC4kZWwsICdoaWRlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgVUlraXQubW9kYWwubGFiZWxzID0ge1xuICAgICAgICBvazogJ09rJyxcbiAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJ1xuICAgIH07XG5cbn1cbiIsImltcG9ydCBBY2NvcmRpb24gZnJvbSAnLi9hY2NvcmRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBleHRlbmRzOiBBY2NvcmRpb24sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHRhcmdldHM6ICc+IC51ay1wYXJlbnQnLFxuICAgICAgICB0b2dnbGU6ICc+IGEnLFxuICAgICAgICBjb250ZW50OiAnPiB1bCdcbiAgICB9XG5cbn07XG4iLCJpbXBvcnQgQ2xhc3MgZnJvbSAnLi4vbWl4aW4vY2xhc3MnO1xuaW1wb3J0IEZsZXhCdWcgZnJvbSAnLi4vbWl4aW4vZmxleC1idWcnO1xuaW1wb3J0IHskLCAkJCwgYWRkQ2xhc3MsIGFmdGVyLCBhc3NpZ24sIGNzcywgaGVpZ2h0LCBpbmNsdWRlcywgaXNSdGwsIGlzVmlzaWJsZSwgbWF0Y2hlcywgbm9vcCwgUHJvbWlzZSwgcXVlcnksIHJlbW92ZSwgdG9GbG9hdCwgVHJhbnNpdGlvbiwgd2l0aGlufSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQ2xhc3MsIEZsZXhCdWddLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZHJvcGRvd246IFN0cmluZyxcbiAgICAgICAgbW9kZTogJ2xpc3QnLFxuICAgICAgICBhbGlnbjogU3RyaW5nLFxuICAgICAgICBvZmZzZXQ6IE51bWJlcixcbiAgICAgICAgYm91bmRhcnk6IEJvb2xlYW4sXG4gICAgICAgIGJvdW5kYXJ5QWxpZ246IEJvb2xlYW4sXG4gICAgICAgIGNsc0Ryb3A6IFN0cmluZyxcbiAgICAgICAgZGVsYXlTaG93OiBOdW1iZXIsXG4gICAgICAgIGRlbGF5SGlkZTogTnVtYmVyLFxuICAgICAgICBkcm9wYmFyOiBCb29sZWFuLFxuICAgICAgICBkcm9wYmFyTW9kZTogU3RyaW5nLFxuICAgICAgICBkcm9wYmFyQW5jaG9yOiBCb29sZWFuLFxuICAgICAgICBkdXJhdGlvbjogTnVtYmVyXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgZHJvcGRvd246ICcudWstbmF2YmFyLW5hdiA+IGxpJyxcbiAgICAgICAgYWxpZ246ICFpc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gICAgICAgIGNsc0Ryb3A6ICd1ay1uYXZiYXItZHJvcGRvd24nLFxuICAgICAgICBtb2RlOiB1bmRlZmluZWQsXG4gICAgICAgIG9mZnNldDogdW5kZWZpbmVkLFxuICAgICAgICBkZWxheVNob3c6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVsYXlIaWRlOiB1bmRlZmluZWQsXG4gICAgICAgIGJvdW5kYXJ5QWxpZ246IHVuZGVmaW5lZCxcbiAgICAgICAgZmxpcDogJ3gnLFxuICAgICAgICBib3VuZGFyeTogdHJ1ZSxcbiAgICAgICAgZHJvcGJhcjogZmFsc2UsXG4gICAgICAgIGRyb3BiYXJNb2RlOiAnc2xpZGUnLFxuICAgICAgICBkcm9wYmFyQW5jaG9yOiBmYWxzZSxcbiAgICAgICAgZHVyYXRpb246IDIwMCxcbiAgICAgICAgZm9yY2VIZWlnaHQ6IHRydWUsXG4gICAgICAgIHNlbE1pbkhlaWdodDogJy51ay1uYXZiYXItbmF2ID4gbGkgPiBhLCAudWstbmF2YmFyLWl0ZW0sIC51ay1uYXZiYXItdG9nZ2xlJ1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGJvdW5kYXJ5KHtib3VuZGFyeSwgYm91bmRhcnlBbGlnbn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIChib3VuZGFyeSA9PT0gdHJ1ZSB8fCBib3VuZGFyeUFsaWduKSA/ICRlbCA6IGJvdW5kYXJ5O1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyb3BiYXJBbmNob3Ioe2Ryb3BiYXJBbmNob3J9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeShkcm9wYmFyQW5jaG9yLCAkZWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBvcyh7YWxpZ259KSB7XG4gICAgICAgICAgICByZXR1cm4gYGJvdHRvbS0ke2FsaWdufWA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZHJvcGRvd25zKHtkcm9wZG93biwgY2xzRHJvcH0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQkKGAke2Ryb3Bkb3dufSAuJHtjbHNEcm9wfWAsICRlbCk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBiZWZvcmVDb25uZWN0KCkge1xuXG4gICAgICAgIGNvbnN0IHtkcm9wYmFyfSA9IHRoaXMuJHByb3BzO1xuXG4gICAgICAgIHRoaXMuZHJvcGJhciA9IGRyb3BiYXIgJiYgKHF1ZXJ5KGRyb3BiYXIsIHRoaXMuJGVsKSB8fCAkKCcrIC51ay1uYXZiYXItZHJvcGJhcicsIHRoaXMuJGVsKSB8fCAkKCc8ZGl2PjwvZGl2PicpKTtcblxuICAgICAgICBpZiAodGhpcy5kcm9wYmFyKSB7XG5cbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuZHJvcGJhciwgJ3VrLW5hdmJhci1kcm9wYmFyJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRyb3BiYXJNb2RlID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5kcm9wYmFyLCAndWstbmF2YmFyLWRyb3BiYXItc2xpZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGRpc2Nvbm5lY3RlZCgpIHtcbiAgICAgICAgdGhpcy5kcm9wYmFyICYmIHJlbW92ZSh0aGlzLmRyb3BiYXIpO1xuICAgIH0sXG5cbiAgICB1cGRhdGUoKSB7XG5cbiAgICAgICAgdGhpcy4kY3JlYXRlKFxuICAgICAgICAgICAgJ2Ryb3AnLFxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bnMuZmlsdGVyKGVsID0+ICF0aGlzLmdldERyb3Bkb3duKGVsKSksXG4gICAgICAgICAgICBhc3NpZ24oe30sIHRoaXMuJHByb3BzLCB7Ym91bmRhcnk6IHRoaXMuYm91bmRhcnksIHBvczogdGhpcy5wb3MsIG9mZnNldDogdGhpcy5kcm9wYmFyIHx8IHRoaXMub2Zmc2V0fSlcbiAgICAgICAgKTtcblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnbW91c2VvdmVyJyxcblxuICAgICAgICAgICAgZGVsZWdhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGRvd247XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKHtjdXJyZW50fSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSAmJiBhY3RpdmUudG9nZ2xlICYmICF3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIGN1cnJlbnQpICYmICFhY3RpdmUudHJhY2tlci5tb3Zlc1RvKGFjdGl2ZS4kZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5oaWRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnbW91c2VsZWF2ZScsXG5cbiAgICAgICAgICAgIGVsKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3BiYXI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICYmICF0aGlzLmRyb3Bkb3ducy5zb21lKGVsID0+IG1hdGNoZXMoZWwsICc6aG92ZXInKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2JlZm9yZXNob3cnLFxuXG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuXG4gICAgICAgICAgICBmaWx0ZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZHJvcGJhci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyKHRoaXMuZHJvcGJhckFuY2hvciB8fCB0aGlzLiRlbCwgdGhpcy5kcm9wYmFyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnc2hvdycsXG5cbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG5cbiAgICAgICAgICAgIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wYmFyO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcihfLCBkcm9wKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7JGVsLCBkaXJ9ID0gZHJvcDtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xzRHJvcCAmJiBhZGRDbGFzcygkZWwsIGAke3RoaXMuY2xzRHJvcH0tZHJvcGJhcmApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpciA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uVG8oJGVsLm9mZnNldEhlaWdodCArIHRvRmxvYXQoY3NzKCRlbCwgJ21hcmdpblRvcCcpKSArIHRvRmxvYXQoY3NzKCRlbCwgJ21hcmdpbkJvdHRvbScpKSwgJGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2JlZm9yZWhpZGUnLFxuXG4gICAgICAgICAgICBmaWx0ZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSwgeyRlbH0pIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyh0aGlzLmRyb3BiYXIsICc6aG92ZXInKSAmJiBhY3RpdmUgJiYgYWN0aXZlLiRlbCA9PT0gJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2hpZGUnLFxuXG4gICAgICAgICAgICBmaWx0ZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGJhcjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoXywgeyRlbH0pIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSB8fCBhY3RpdmUgJiYgYWN0aXZlLiRlbCA9PT0gJGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvblRvKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgXSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBnZXRBY3RpdmUoKSB7XG4gICAgICAgICAgICBjb25zdCBbYWN0aXZlXSA9IHRoaXMuZHJvcGRvd25zLm1hcCh0aGlzLmdldERyb3Bkb3duKS5maWx0ZXIoZHJvcCA9PiBkcm9wICYmIGRyb3AuaXNBY3RpdmUoKSk7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlICYmIGluY2x1ZGVzKGFjdGl2ZS5tb2RlLCAnaG92ZXInKSAmJiB3aXRoaW4oYWN0aXZlLnRvZ2dsZS4kZWwsIHRoaXMuJGVsKSAmJiBhY3RpdmU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNpdGlvblRvKG5ld0hlaWdodCwgZWwpIHtcblxuICAgICAgICAgICAgY29uc3Qge2Ryb3BiYXJ9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IG9sZEhlaWdodCA9IGlzVmlzaWJsZShkcm9wYmFyKSA/IGhlaWdodChkcm9wYmFyKSA6IDA7XG5cbiAgICAgICAgICAgIGVsID0gb2xkSGVpZ2h0IDwgbmV3SGVpZ2h0ICYmIGVsO1xuXG4gICAgICAgICAgICBjc3MoZWwsICdjbGlwJywgYHJlY3QoMCwke2VsLm9mZnNldFdpZHRofXB4LCR7b2xkSGVpZ2h0fXB4LDApYCk7XG5cbiAgICAgICAgICAgIGhlaWdodChkcm9wYmFyLCBvbGRIZWlnaHQpO1xuXG4gICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChbZWwsIGRyb3BiYXJdKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydChkcm9wYmFyLCB7aGVpZ2h0OiBuZXdIZWlnaHR9LCB0aGlzLmR1cmF0aW9uKSxcbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLnN0YXJ0KGVsLCB7Y2xpcDogYHJlY3QoMCwke2VsLm9mZnNldFdpZHRofXB4LCR7bmV3SGVpZ2h0fXB4LDApYH0sIHRoaXMuZHVyYXRpb24pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIC5jYXRjaChub29wKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKGVsLCB7Y2xpcDogJyd9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKGRyb3BiYXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldERyb3Bkb3duKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZ2V0Q29tcG9uZW50KGVsLCAnZHJvcCcpIHx8IHRoaXMuJGdldENvbXBvbmVudChlbCwgJ2Ryb3Bkb3duJyk7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbiIsImltcG9ydCBNb2RhbCBmcm9tICcuLi9taXhpbi9tb2RhbCc7XG5pbXBvcnQgeyQsIGFkZENsYXNzLCBhcHBlbmQsIGNzcywgZW5kc1dpdGgsIGhhc0NsYXNzLCBoZWlnaHQsIHJlbW92ZUNsYXNzLCB1bndyYXAsIHdyYXBBbGx9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtNb2RhbF0sXG5cbiAgICBhcmdzOiAnbW9kZScsXG5cbiAgICBwcm9wczoge1xuICAgICAgICBtb2RlOiBTdHJpbmcsXG4gICAgICAgIGZsaXA6IEJvb2xlYW4sXG4gICAgICAgIG92ZXJsYXk6IEJvb2xlYW5cbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICBtb2RlOiAnc2xpZGUnLFxuICAgICAgICBmbGlwOiBmYWxzZSxcbiAgICAgICAgb3ZlcmxheTogZmFsc2UsXG4gICAgICAgIGNsc1BhZ2U6ICd1ay1vZmZjYW52YXMtcGFnZScsXG4gICAgICAgIGNsc0NvbnRhaW5lcjogJ3VrLW9mZmNhbnZhcy1jb250YWluZXInLFxuICAgICAgICBzZWxQYW5lbDogJy51ay1vZmZjYW52YXMtYmFyJyxcbiAgICAgICAgY2xzRmxpcDogJ3VrLW9mZmNhbnZhcy1mbGlwJyxcbiAgICAgICAgY2xzQ29udGFpbmVyQW5pbWF0aW9uOiAndWstb2ZmY2FudmFzLWNvbnRhaW5lci1hbmltYXRpb24nLFxuICAgICAgICBjbHNTaWRlYmFyQW5pbWF0aW9uOiAndWstb2ZmY2FudmFzLWJhci1hbmltYXRpb24nLFxuICAgICAgICBjbHNNb2RlOiAndWstb2ZmY2FudmFzJyxcbiAgICAgICAgY2xzT3ZlcmxheTogJ3VrLW9mZmNhbnZhcy1vdmVybGF5JyxcbiAgICAgICAgc2VsQ2xvc2U6ICcudWstb2ZmY2FudmFzLWNsb3NlJyxcbiAgICAgICAgY29udGFpbmVyOiBmYWxzZVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGNsc0ZsaXAoe2ZsaXAsIGNsc0ZsaXB9KSB7XG4gICAgICAgICAgICByZXR1cm4gZmxpcCA/IGNsc0ZsaXAgOiAnJztcbiAgICAgICAgfSxcblxuICAgICAgICBjbHNPdmVybGF5KHtvdmVybGF5LCBjbHNPdmVybGF5fSkge1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJsYXkgPyBjbHNPdmVybGF5IDogJyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xzTW9kZSh7bW9kZSwgY2xzTW9kZX0pIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtjbHNNb2RlfS0ke21vZGV9YDtcbiAgICAgICAgfSxcblxuICAgICAgICBjbHNTaWRlYmFyQW5pbWF0aW9uKHttb2RlLCBjbHNTaWRlYmFyQW5pbWF0aW9ufSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vZGUgPT09ICdub25lJyB8fCBtb2RlID09PSAncmV2ZWFsJyA/ICcnIDogY2xzU2lkZWJhckFuaW1hdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBjbHNDb250YWluZXJBbmltYXRpb24oe21vZGUsIGNsc0NvbnRhaW5lckFuaW1hdGlvbn0pIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlICE9PSAncHVzaCcgJiYgbW9kZSAhPT0gJ3JldmVhbCcgPyAnJyA6IGNsc0NvbnRhaW5lckFuaW1hdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2l0aW9uRWxlbWVudCh7bW9kZX0pIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlID09PSAncmV2ZWFsJyA/IHRoaXMucGFuZWwucGFyZW50Tm9kZSA6IHRoaXMucGFuZWw7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgIGRlbGVnYXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnYVtocmVmXj1cIiNcIl0nO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcih7Y3VycmVudDoge2hhc2h9LCBkZWZhdWx0UHJldmVudGVkfSkge1xuICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFByZXZlbnRlZCAmJiBoYXNoICYmICQoaGFzaCwgZG9jdW1lbnQuYm9keSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3RvdWNoc3RhcnQnLFxuXG4gICAgICAgICAgICBwYXNzaXZlOiB0cnVlLFxuXG4gICAgICAgICAgICBlbCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoe3RhcmdldFRvdWNoZXN9KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnRZID0gdGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3RvdWNobW92ZScsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcblxuICAgICAgICAgICAgZmlsdGVyKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm92ZXJsYXk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgICAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3RvdWNobW92ZScsXG5cbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuXG4gICAgICAgICAgICBlbCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFkgPSBldmVudC50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgLSB0aGlzLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgY29uc3Qge3Njcm9sbFRvcCwgc2Nyb2xsSGVpZ2h0LCBjbGllbnRIZWlnaHR9ID0gdGhpcy5wYW5lbDtcblxuICAgICAgICAgICAgICAgIGlmIChjbGllbnRIZWlnaHQgPj0gc2Nyb2xsSGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIHx8IHNjcm9sbFRvcCA9PT0gMCAmJiBjbGllbnRZID4gMFxuICAgICAgICAgICAgICAgICAgICB8fCBzY3JvbGxIZWlnaHQgLSBzY3JvbGxUb3AgPD0gY2xpZW50SGVpZ2h0ICYmIGNsaWVudFkgPCAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuY2FuY2VsYWJsZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnc2hvdycsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSAncmV2ZWFsJyAmJiAhaGFzQ2xhc3ModGhpcy5wYW5lbC5wYXJlbnROb2RlLCB0aGlzLmNsc01vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBBbGwodGhpcy5wYW5lbCwgJzxkaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMucGFuZWwucGFyZW50Tm9kZSwgdGhpcy5jbHNNb2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnb3ZlcmZsb3dZJywgdGhpcy5vdmVybGF5ID8gJ2hpZGRlbicgOiAnJyk7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSwgdGhpcy5jbHNDb250YWluZXIsIHRoaXMuY2xzRmxpcCk7XG4gICAgICAgICAgICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd0b3VjaC1hY3Rpb24nLCAncGFuLXkgcGluY2gtem9vbScpO1xuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNPdmVybGF5KTtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLnBhbmVsLCB0aGlzLmNsc1NpZGViYXJBbmltYXRpb24sIHRoaXMubW9kZSAhPT0gJ3JldmVhbCcgPyB0aGlzLmNsc01vZGUgOiAnJyk7XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQoZG9jdW1lbnQuYm9keSk7IC8vIGZvcmNlIHJlZmxvd1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LmJvZHksIHRoaXMuY2xzQ29udGFpbmVyQW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2xzQ29udGFpbmVyQW5pbWF0aW9uICYmIHN1cHByZXNzVXNlclNjYWxlKCk7XG5cblxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCB0aGlzLmNsc0NvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd0b3VjaC1hY3Rpb24nLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ2hpZGRlbicsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNsc0NvbnRhaW5lckFuaW1hdGlvbiAmJiByZXN1bWVVc2VyU2NhbGUoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdyZXZlYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHVud3JhcCh0aGlzLnBhbmVsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnBhbmVsLCB0aGlzLmNsc1NpZGViYXJBbmltYXRpb24sIHRoaXMuY2xzTW9kZSk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzT3ZlcmxheSk7XG4gICAgICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCB0aGlzLmNsc0NvbnRhaW5lciwgdGhpcy5jbHNGbGlwKTtcblxuICAgICAgICAgICAgICAgIGNzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdvdmVyZmxvd1knLCAnJyk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnc3dpcGVMZWZ0IHN3aXBlUmlnaHQnLFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpICYmIGVuZHNXaXRoKGUudHlwZSwgJ0xlZnQnKSBeIHRoaXMuZmxpcCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgXVxuXG59O1xuXG4vLyBDaHJvbWUgaW4gcmVzcG9uc2l2ZSBtb2RlIHpvb21zIHBhZ2UgdXBvbiBvcGVuaW5nIG9mZmNhbnZhc1xuZnVuY3Rpb24gc3VwcHJlc3NVc2VyU2NhbGUoKSB7XG4gICAgZ2V0Vmlld3BvcnQoKS5jb250ZW50ICs9ICcsdXNlci1zY2FsYWJsZT0wJztcbn1cblxuZnVuY3Rpb24gcmVzdW1lVXNlclNjYWxlKCkge1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gZ2V0Vmlld3BvcnQoKTtcbiAgICB2aWV3cG9ydC5jb250ZW50ID0gdmlld3BvcnQuY29udGVudC5yZXBsYWNlKC8sdXNlci1zY2FsYWJsZT0wJC8sICcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnQoKSB7XG4gICAgcmV0dXJuICQoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJywgZG9jdW1lbnQuaGVhZCkgfHwgYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8bWV0YSBuYW1lPVwidmlld3BvcnRcIj4nKTtcbn1cbiIsImltcG9ydCBDbGFzcyBmcm9tICcuLi9taXhpbi9jbGFzcyc7XG5pbXBvcnQge2Nsb3Nlc3QsIGNzcywgaGVpZ2h0LCBvZmZzZXQsIHRvRmxvYXQsIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBzZWxDb250YWluZXI6IFN0cmluZyxcbiAgICAgICAgc2VsQ29udGVudDogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgc2VsQ29udGFpbmVyOiAnLnVrLW1vZGFsJyxcbiAgICAgICAgc2VsQ29udGVudDogJy51ay1tb2RhbC1kaWFsb2cnXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgY29udGFpbmVyKHtzZWxDb250YWluZXJ9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZXN0KCRlbCwgc2VsQ29udGFpbmVyKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb250ZW50KHtzZWxDb250ZW50fSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvc2VzdCgkZWwsIHNlbENvbnRlbnQpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuICAgICAgICBjc3ModGhpcy4kZWwsICdtaW5IZWlnaHQnLCAxNTApO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICByZWFkKCkge1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudCB8fCAhdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY3VycmVudDogdG9GbG9hdChjc3ModGhpcy4kZWwsICdtYXhIZWlnaHQnKSksXG4gICAgICAgICAgICAgICAgbWF4OiBNYXRoLm1heCgxNTAsIGhlaWdodCh0aGlzLmNvbnRhaW5lcikgLSAob2Zmc2V0KHRoaXMuY29udGVudCkuaGVpZ2h0IC0gaGVpZ2h0KHRoaXMuJGVsKSkpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlKHtjdXJyZW50LCBtYXh9KSB7XG4gICAgICAgICAgICBjc3ModGhpcy4kZWwsICdtYXhIZWlnaHQnLCBtYXgpO1xuICAgICAgICAgICAgaWYgKE1hdGgucm91bmQoY3VycmVudCkgIT09IE1hdGgucm91bmQobWF4KSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdyZXNpemUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH1cblxufTtcbiIsImltcG9ydCB7YWRkQ2xhc3MsIERpbWVuc2lvbnMsIGhlaWdodCwgaXNWaXNpYmxlLCB3aWR0aH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ3dpZHRoJywgJ2hlaWdodCddLFxuXG4gICAgY29ubmVjdGVkKCkge1xuICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbCwgJ3VrLXJlc3BvbnNpdmUtd2lkdGgnKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiB7XG5cbiAgICAgICAgcmVhZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1Zpc2libGUodGhpcy4kZWwpICYmIHRoaXMud2lkdGggJiYgdGhpcy5oZWlnaHRcbiAgICAgICAgICAgICAgICA/IHt3aWR0aDogd2lkdGgodGhpcy4kZWwucGFyZW50Tm9kZSksIGhlaWdodDogdGhpcy5oZWlnaHR9XG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZShkaW0pIHtcbiAgICAgICAgICAgIGhlaWdodCh0aGlzLiRlbCwgRGltZW5zaW9ucy5jb250YWluKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoXG4gICAgICAgICAgICB9LCBkaW0pLmhlaWdodCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICB9XG5cbn07XG4iLCJpbXBvcnQgeyQsIGVzY2FwZSwgc2Nyb2xsSW50b1ZpZXcsIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBkdXJhdGlvbjogTnVtYmVyLFxuICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHNjcm9sbFRvKGVsKSB7XG5cbiAgICAgICAgICAgIGVsID0gZWwgJiYgJChlbCkgfHwgZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAgICAgaWYgKHRyaWdnZXIodGhpcy4kZWwsICdiZWZvcmVzY3JvbGwnLCBbdGhpcywgZWxdKSkge1xuICAgICAgICAgICAgICAgIHNjcm9sbEludG9WaWV3KGVsLCB0aGlzLiRwcm9wcykudGhlbigoKSA9PlxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnc2Nyb2xsZWQnLCBbdGhpcywgZWxdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuXG4gICAgICAgIGNsaWNrKGUpIHtcblxuICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUbyhlc2NhcGUoZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuJGVsLmhhc2gpKS5zdWJzdHIoMSkpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG4iLCJpbXBvcnQgeyQkLCBjc3MsIGRhdGEsIGZpbHRlciwgaXNJblZpZXcsIFByb21pc2UsIHRvZ2dsZUNsYXNzLCB0cmlnZ2VyfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgYXJnczogJ2NscycsXG5cbiAgICBwcm9wczoge1xuICAgICAgICBjbHM6IFN0cmluZyxcbiAgICAgICAgdGFyZ2V0OiBTdHJpbmcsXG4gICAgICAgIGhpZGRlbjogQm9vbGVhbixcbiAgICAgICAgb2Zmc2V0VG9wOiBOdW1iZXIsXG4gICAgICAgIG9mZnNldExlZnQ6IE51bWJlcixcbiAgICAgICAgcmVwZWF0OiBCb29sZWFuLFxuICAgICAgICBkZWxheTogTnVtYmVyXG4gICAgfSxcblxuICAgIGRhdGE6ICgpID0+ICh7XG4gICAgICAgIGNsczogZmFsc2UsXG4gICAgICAgIHRhcmdldDogZmFsc2UsXG4gICAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0VG9wOiAwLFxuICAgICAgICBvZmZzZXRMZWZ0OiAwLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgaW5WaWV3Q2xhc3M6ICd1ay1zY3JvbGxzcHktaW52aWV3J1xuICAgIH0pLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBlbGVtZW50cyh7dGFyZ2V0fSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0ID8gJCQodGFyZ2V0LCAkZWwpIDogWyRlbF07XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICB1cGRhdGU6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIHdyaXRlKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICBjc3MoZmlsdGVyKHRoaXMuZWxlbWVudHMsIGA6bm90KC4ke3RoaXMuaW5WaWV3Q2xhc3N9KWApLCAndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIHJlYWQoe3VwZGF0ZX0pIHtcblxuICAgICAgICAgICAgICAgIGlmICghdXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGF0ZSA9IGVsLl91a1Njcm9sbHNweVN0YXRlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0ge2NsczogZGF0YShlbCwgJ3VrLXNjcm9sbHNweS1jbGFzcycpIHx8IHRoaXMuY2xzfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnNob3cgPSBpc0luVmlldyhlbCwgdGhpcy5vZmZzZXRUb3AsIHRoaXMub2Zmc2V0TGVmdCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLl91a1Njcm9sbHNweVN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGUoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgLy8gTGV0IGNoaWxkIGNvbXBvbmVudHMgYmUgYXBwbGllZCBhdCBsZWFzdCBvbmNlIGZpcnN0XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLnVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGVsLl91a1Njcm9sbHNweVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGUgPSBpbnZpZXcgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MoZWwsICd2aXNpYmlsaXR5JywgIWludmlldyAmJiB0aGlzLmhpZGRlbiA/ICdoaWRkZW4nIDogJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgdGhpcy5pblZpZXdDbGFzcywgaW52aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzdGF0ZS5jbHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKGVsLCBpbnZpZXcgPyAnaW52aWV3JyA6ICdvdXR2aWV3Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmludmlldyA9IGludmlldztcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKGVsKTtcblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zaG93ICYmICFzdGF0ZS5pbnZpZXcgJiYgIXN0YXRlLnF1ZXVlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5xdWV1ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb21pc2UgPSAoZGF0YS5wcm9taXNlIHx8IFByb21pc2UucmVzb2x2ZSgpKS50aGVuKCgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRoaXMuZGVsYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzdGF0ZS5xdWV1ZWQgPSBmYWxzZSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLnNob3cgJiYgc3RhdGUuaW52aWV3ICYmICFzdGF0ZS5xdWV1ZWQgJiYgdGhpcy5yZXBlYXQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Njcm9sbCcsICdyZXNpemUnXVxuXG4gICAgICAgIH1cblxuICAgIF1cblxufTtcblxuIiwiaW1wb3J0IHskJCwgYWRkQ2xhc3MsIGNsb3Nlc3QsIGVzY2FwZSwgZ2V0Vmlld3BvcnQsIGlzVmlzaWJsZSwgbGFzdCwgb2Zmc2V0LCBwb3NpdGlvbiwgcmVtb3ZlQ2xhc3MsIHNjcm9sbFBhcmVudHMsIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBjbHM6IFN0cmluZyxcbiAgICAgICAgY2xvc2VzdDogU3RyaW5nLFxuICAgICAgICBzY3JvbGw6IEJvb2xlYW4sXG4gICAgICAgIG92ZXJmbG93OiBCb29sZWFuLFxuICAgICAgICBvZmZzZXQ6IE51bWJlclxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGNsczogJ3VrLWFjdGl2ZScsXG4gICAgICAgIGNsb3Nlc3Q6IGZhbHNlLFxuICAgICAgICBzY3JvbGw6IGZhbHNlLFxuICAgICAgICBvdmVyZmxvdzogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgbGlua3MoXywgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gJCQoJ2FbaHJlZl49XCIjXCJdJywgJGVsKS5maWx0ZXIoZWwgPT4gZWwuaGFzaCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGFyZ2V0cygpIHtcbiAgICAgICAgICAgIHJldHVybiAkJCh0aGlzLmxpbmtzLm1hcChlbCA9PiBlc2NhcGUoZWwuaGFzaCkuc3Vic3RyKDEpKS5qb2luKCcsJykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVsZW1lbnRzKHtjbG9zZXN0OiBzZWxlY3Rvcn0pIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9zZXN0KCQkKHRoaXMudGFyZ2V0cy5tYXAoZWwgPT4gYFtocmVmPVwiIyR7ZWwuaWR9XCJdYCkuam9pbignLCcpKSwgc2VsZWN0b3IgfHwgJyonKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHVwZGF0ZTogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgcmVhZCgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY3JlYXRlKCdzY3JvbGwnLCB0aGlzLmxpbmtzLCB7b2Zmc2V0OiB0aGlzLm9mZnNldCB8fCAwfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICByZWFkKCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qge2xlbmd0aH0gPSB0aGlzLnRhcmdldHM7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWxlbmd0aCB8fCAhaXNWaXNpYmxlKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2Nyb2xsRWxlbWVudCA9IGxhc3Qoc2Nyb2xsUGFyZW50cyh0aGlzLnRhcmdldHNbMF0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7c2Nyb2xsVG9wLCBzY3JvbGxIZWlnaHR9ID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3cG9ydCA9IGdldFZpZXdwb3J0KHNjcm9sbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcm9sbCA9IHNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXggPSBzY3JvbGxIZWlnaHQgLSBvZmZzZXQodmlld3BvcnQpLmhlaWdodDtcbiAgICAgICAgICAgICAgICBsZXQgYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsID09PSBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0cy5ldmVyeSgoZWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHt0b3B9ID0gcG9zaXRpb24oZWwsIHZpZXdwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3AgLSB0aGlzLm9mZnNldCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSA9PT0gZmFsc2UgJiYgdGhpcy5vdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7YWN0aXZlfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlKHthY3RpdmV9KSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxpbmtzLmZvckVhY2goZWwgPT4gZWwuYmx1cigpKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLCB0aGlzLmNscyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnYWN0aXZlJywgW2FjdGl2ZSwgYWRkQ2xhc3ModGhpcy5lbGVtZW50c1thY3RpdmVdLCB0aGlzLmNscyldKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cblxuICAgICAgICB9XG5cbiAgICBdXG5cbn07XG4iLCJpbXBvcnQgQ2xhc3MgZnJvbSAnLi4vbWl4aW4vY2xhc3MnO1xuaW1wb3J0IE1lZGlhIGZyb20gJy4uL21peGluL21lZGlhJztcbmltcG9ydCB7JCwgYWRkQ2xhc3MsIGFmdGVyLCBBbmltYXRpb24sIGFzc2lnbiwgYXR0ciwgY3NzLCBmYXN0ZG9tLCBoYXNDbGFzcywgaXNOdW1lcmljLCBpc1N0cmluZywgaXNWaXNpYmxlLCBub29wLCBvZmZzZXQsIG9mZnNldFBvc2l0aW9uLCBxdWVyeSwgcmVtb3ZlLCByZW1vdmVDbGFzcywgcmVwbGFjZUNsYXNzLCBzY3JvbGxUb3AsIHRvRmxvYXQsIHRvZ2dsZUNsYXNzLCB0b1B4LCB0cmlnZ2VyLCB3aXRoaW59IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtDbGFzcywgTWVkaWFdLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgdG9wOiBudWxsLFxuICAgICAgICBib3R0b206IEJvb2xlYW4sXG4gICAgICAgIG9mZnNldDogU3RyaW5nLFxuICAgICAgICBhbmltYXRpb246IFN0cmluZyxcbiAgICAgICAgY2xzQWN0aXZlOiBTdHJpbmcsXG4gICAgICAgIGNsc0luYWN0aXZlOiBTdHJpbmcsXG4gICAgICAgIGNsc0ZpeGVkOiBTdHJpbmcsXG4gICAgICAgIGNsc0JlbG93OiBTdHJpbmcsXG4gICAgICAgIHNlbFRhcmdldDogU3RyaW5nLFxuICAgICAgICB3aWR0aEVsZW1lbnQ6IEJvb2xlYW4sXG4gICAgICAgIHNob3dPblVwOiBCb29sZWFuLFxuICAgICAgICB0YXJnZXRPZmZzZXQ6IE51bWJlclxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgYm90dG9tOiBmYWxzZSxcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBhbmltYXRpb246ICcnLFxuICAgICAgICBjbHNBY3RpdmU6ICd1ay1hY3RpdmUnLFxuICAgICAgICBjbHNJbmFjdGl2ZTogJycsXG4gICAgICAgIGNsc0ZpeGVkOiAndWstc3RpY2t5LWZpeGVkJyxcbiAgICAgICAgY2xzQmVsb3c6ICd1ay1zdGlja3ktYmVsb3cnLFxuICAgICAgICBzZWxUYXJnZXQ6ICcnLFxuICAgICAgICB3aWR0aEVsZW1lbnQ6IGZhbHNlLFxuICAgICAgICBzaG93T25VcDogZmFsc2UsXG4gICAgICAgIHRhcmdldE9mZnNldDogZmFsc2VcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBvZmZzZXQoe29mZnNldH0pIHtcbiAgICAgICAgICAgIHJldHVybiB0b1B4KG9mZnNldCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VsVGFyZ2V0KHtzZWxUYXJnZXR9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxUYXJnZXQgJiYgJChzZWxUYXJnZXQsICRlbCkgfHwgJGVsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHdpZHRoRWxlbWVudCh7d2lkdGhFbGVtZW50fSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVlcnkod2lkdGhFbGVtZW50LCAkZWwpIHx8IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNBY3RpdmU6IHtcblxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYXNDbGFzcyh0aGlzLnNlbFRhcmdldCwgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VDbGFzcyh0aGlzLnNlbFRhcmdldCwgdGhpcy5jbHNJbmFjdGl2ZSwgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgIWhhc0NsYXNzKHRoaXMuc2VsVGFyZ2V0LCB0aGlzLmNsc0luYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXBsYWNlQ2xhc3ModGhpcy5zZWxUYXJnZXQsIHRoaXMuY2xzQWN0aXZlLCB0aGlzLmNsc0luYWN0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2luYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSAkKCcrIC51ay1zdGlja3ktcGxhY2Vob2xkZXInLCB0aGlzLiRlbCkgfHwgJCgnPGRpdiBjbGFzcz1cInVrLXN0aWNreS1wbGFjZWhvbGRlclwiPjwvZGl2PicpO1xuICAgICAgICB0aGlzLmlzRml4ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICBkaXNjb25uZWN0ZWQoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNGaXhlZCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnNlbFRhcmdldCwgdGhpcy5jbHNJbmFjdGl2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZW1vdmUodGhpcy5wbGFjZWhvbGRlcik7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpZHRoRWxlbWVudCA9IG51bGw7XG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2xvYWQgaGFzaGNoYW5nZSBwb3BzdGF0ZScsXG5cbiAgICAgICAgICAgIGVsOiB3aW5kb3csXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnRhcmdldE9mZnNldCAhPT0gZmFsc2UgJiYgbG9jYXRpb24uaGFzaCAmJiB3aW5kb3cucGFnZVlPZmZzZXQgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gJChsb2NhdGlvbi5oYXNoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS5yZWFkKCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge3RvcH0gPSBvZmZzZXQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsVG9wID0gb2Zmc2V0KHRoaXMuJGVsKS50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbEhlaWdodCA9IHRoaXMuJGVsLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNGaXhlZCAmJiBlbFRvcCArIGVsSGVpZ2h0ID49IHRvcCAmJiBlbFRvcCA8PSB0b3AgKyB0YXJnZXQub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wKHdpbmRvdywgdG9wIC0gZWxIZWlnaHQgLSAoaXNOdW1lcmljKHRoaXMudGFyZ2V0T2Zmc2V0KSA/IHRoaXMudGFyZ2V0T2Zmc2V0IDogMCkgLSB0aGlzLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgXSxcblxuICAgIHVwZGF0ZTogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgcmVhZCh7aGVpZ2h0fSwgdHlwZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUgJiYgdHlwZSAhPT0gJ3VwZGF0ZScpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhlaWdodCA9ICF0aGlzLmlzQWN0aXZlID8gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0IDogaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b3BPZmZzZXQgPSBvZmZzZXQodGhpcy5pc0ZpeGVkID8gdGhpcy5wbGFjZWhvbGRlciA6IHRoaXMuJGVsKS50b3A7XG4gICAgICAgICAgICAgICAgdGhpcy5ib3R0b21PZmZzZXQgPSB0aGlzLnRvcE9mZnNldCArIGhlaWdodDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IHBhcnNlUHJvcCgnYm90dG9tJywgdGhpcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvcCA9IE1hdGgubWF4KHRvRmxvYXQocGFyc2VQcm9wKCd0b3AnLCB0aGlzKSksIHRoaXMudG9wT2Zmc2V0KSAtIHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuYm90dG9tID0gYm90dG9tICYmIGJvdHRvbSAtIGhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYWN0aXZlID0gIXRoaXMubWF0Y2hNZWRpYTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTY3JvbGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbnM6IGNzcyh0aGlzLiRlbCwgWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luUmlnaHQnXSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgd3JpdGUoe2hlaWdodCwgbWFyZ2luc30pIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHtwbGFjZWhvbGRlcn0gPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgY3NzKHBsYWNlaG9sZGVyLCBhc3NpZ24oe2hlaWdodH0sIG1hcmdpbnMpKTtcblxuICAgICAgICAgICAgICAgIGlmICghd2l0aGluKHBsYWNlaG9sZGVyLCBkb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIodGhpcy4kZWwsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgYXR0cihwbGFjZWhvbGRlciwgJ2hpZGRlbicsICcnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgYWN0aXZlL2luYWN0aXZlIGNsYXNzZXMgYXJlIGFwcGxpZWRcbiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlID0gdGhpcy5pc0FjdGl2ZTtcblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIHJlYWQoe3Njcm9sbCA9IDB9KSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gKGlzVmlzaWJsZSh0aGlzLndpZHRoRWxlbWVudCkgPyB0aGlzLndpZHRoRWxlbWVudCA6IHRoaXMuJGVsKS5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyOiBzY3JvbGwgPD0gdGhpcy5zY3JvbGwgPyAnZG93bicgOiAndXAnLFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IHRoaXMuc2Nyb2xsLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBpc1Zpc2libGUodGhpcy4kZWwpLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldFBvc2l0aW9uKHRoaXMucGxhY2Vob2xkZXIpWzBdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdyaXRlKGRhdGEsIHR5cGUpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHtpbml0VGltZXN0YW1wID0gMCwgZGlyLCBsYXN0RGlyLCBsYXN0U2Nyb2xsLCBzY3JvbGwsIHRvcCwgdmlzaWJsZX0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICAgICAgICAgICAgZGF0YS5sYXN0U2Nyb2xsID0gc2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbCA8IDAgfHwgc2Nyb2xsID09PSBsYXN0U2Nyb2xsIHx8ICF2aXNpYmxlIHx8IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5zaG93T25VcCAmJiB0eXBlICE9PSAnc2Nyb2xsJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG5vdyAtIGluaXRUaW1lc3RhbXAgPiAzMDAgfHwgZGlyICE9PSBsYXN0RGlyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaW5pdFNjcm9sbCA9IHNjcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pbml0VGltZXN0YW1wID0gbm93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRhdGEubGFzdERpciA9IGRpcjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3dPblVwICYmIE1hdGguYWJzKGRhdGEuaW5pdFNjcm9sbCAtIHNjcm9sbCkgPD0gMzAgJiYgTWF0aC5hYnMobGFzdFNjcm9sbCAtIHNjcm9sbCkgPD0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgIHx8IHNjcm9sbCA8IHRoaXMudG9wXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMuc2hvd09uVXAgJiYgKHNjcm9sbCA8PSB0aGlzLnRvcCB8fCBkaXIgPT09ICdkb3duJyB8fCBkaXIgPT09ICd1cCcgJiYgIXRoaXMuaXNGaXhlZCAmJiBzY3JvbGwgPD0gdGhpcy5ib3R0b21PZmZzZXQpXG4gICAgICAgICAgICAgICAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRml4ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5pblByb2dyZXNzKHRoaXMuJGVsKSAmJiB0b3AgPiBzY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uICYmIHNjcm9sbCA+IHRoaXMudG9wT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5vdXQodGhpcy4kZWwsIHRoaXMuYW5pbWF0aW9uKS50aGVuKCgpID0+IHRoaXMuaGlkZSgpLCBub29wKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNGaXhlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmNhbmNlbCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uaW4odGhpcy4kZWwsIHRoaXMuYW5pbWF0aW9uKS5jYXRjaChub29wKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZScsICdzY3JvbGwnXVxuXG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2hvdygpIHtcblxuICAgICAgICAgICAgdGhpcy5pc0ZpeGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICBhdHRyKHRoaXMucGxhY2Vob2xkZXIsICdoaWRkZW4nLCBudWxsKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGhpZGUoKSB7XG5cbiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0ZpeGVkLCB0aGlzLmNsc0JlbG93KTtcbiAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge3Bvc2l0aW9uOiAnJywgdG9wOiAnJywgd2lkdGg6ICcnfSk7XG4gICAgICAgICAgICBhdHRyKHRoaXMucGxhY2Vob2xkZXIsICdoaWRkZW4nLCAnJyk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGUoKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMudG9wICE9PSAwIHx8IHRoaXMuc2Nyb2xsID4gdGhpcy50b3A7XG4gICAgICAgICAgICBsZXQgdG9wID0gTWF0aC5tYXgoMCwgdGhpcy5vZmZzZXQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5ib3R0b20gJiYgdGhpcy5zY3JvbGwgPiB0aGlzLmJvdHRvbSAtIHRoaXMub2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdG9wID0gdGhpcy5ib3R0b20gLSB0aGlzLnNjcm9sbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3NzKHRoaXMuJGVsLCB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICAgICAgdG9wOiBgJHt0b3B9cHhgLFxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0JlbG93LCB0aGlzLnNjcm9sbCA+IHRoaXMuYm90dG9tT2Zmc2V0KTtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCB0aGlzLmNsc0ZpeGVkKTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIHBhcnNlUHJvcChwcm9wLCB7JHByb3BzLCAkZWwsIFtgJHtwcm9wfU9mZnNldGBdOiBwcm9wT2Zmc2V0fSkge1xuXG4gICAgY29uc3QgdmFsdWUgPSAkcHJvcHNbcHJvcF07XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1lcmljKHZhbHVlKSAmJiBpc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUubWF0Y2goL14tP1xcZC8pKSB7XG5cbiAgICAgICAgcmV0dXJuIHByb3BPZmZzZXQgKyB0b1B4KHZhbHVlKTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgcmV0dXJuIG9mZnNldCh2YWx1ZSA9PT0gdHJ1ZSA/ICRlbC5wYXJlbnROb2RlIDogcXVlcnkodmFsdWUsICRlbCkpLmJvdHRvbTtcblxuICAgIH1cbn1cbiIsImltcG9ydCBUb2dnbGFibGUgZnJvbSAnLi4vbWl4aW4vdG9nZ2xhYmxlJztcbmltcG9ydCB7JCQsIGFkZENsYXNzLCBhdHRyLCBjaGlsZHJlbiwgY3NzLCBkYXRhLCBlbmRzV2l0aCwgZmlsdGVyLCBnZXRJbmRleCwgaW5kZXgsIGlzRW1wdHksIG1hdGNoZXMsIHF1ZXJ5QWxsLCByZW1vdmVDbGFzcywgd2l0aGlufSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbVG9nZ2xhYmxlXSxcblxuICAgIGFyZ3M6ICdjb25uZWN0JyxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGNvbm5lY3Q6IFN0cmluZyxcbiAgICAgICAgdG9nZ2xlOiBTdHJpbmcsXG4gICAgICAgIGFjdGl2ZTogTnVtYmVyLFxuICAgICAgICBzd2lwaW5nOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgY29ubmVjdDogJ34udWstc3dpdGNoZXInLFxuICAgICAgICB0b2dnbGU6ICc+ICogPiA6Zmlyc3QtY2hpbGQnLFxuICAgICAgICBhY3RpdmU6IDAsXG4gICAgICAgIHN3aXBpbmc6IHRydWUsXG4gICAgICAgIGNsczogJ3VrLWFjdGl2ZScsXG4gICAgICAgIGNsc0NvbnRhaW5lcjogJ3VrLXN3aXRjaGVyJyxcbiAgICAgICAgYXR0ckl0ZW06ICd1ay1zd2l0Y2hlci1pdGVtJyxcbiAgICAgICAgcXVldWVkOiB0cnVlXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgY29ubmVjdHMoe2Nvbm5lY3R9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeUFsbChjb25uZWN0LCAkZWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvZ2dsZXMoe3RvZ2dsZX0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQkKHRvZ2dsZSwgJGVsKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgZGVsZWdhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMudG9nZ2xlfTpub3QoLnVrLWRpc2FibGVkKWA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KGNoaWxkcmVuKHRoaXMuJGVsKS5maWx0ZXIoZWwgPT4gd2l0aGluKGUuY3VycmVudCwgZWwpKVswXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICBlbCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0cztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRlbGVnYXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5hdHRySXRlbX1dLFtkYXRhLSR7dGhpcy5hdHRySXRlbX1dYDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coZGF0YShlLmN1cnJlbnQsIHRoaXMuYXR0ckl0ZW0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnc3dpcGVSaWdodCBzd2lwZUxlZnQnLFxuXG4gICAgICAgICAgICBmaWx0ZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3dpcGluZztcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGVsKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RzO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcih7dHlwZX0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coZW5kc1dpdGgodHlwZSwgJ0xlZnQnKSA/ICduZXh0JyA6ICdwcmV2aW91cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICBdLFxuXG4gICAgdXBkYXRlKCkge1xuXG4gICAgICAgIHRoaXMuY29ubmVjdHMuZm9yRWFjaChsaXN0ID0+IHRoaXMudXBkYXRlQXJpYShsaXN0LmNoaWxkcmVuKSk7XG4gICAgICAgIGNvbnN0IHtjaGlsZHJlbn0gPSB0aGlzLiRlbDtcbiAgICAgICAgdGhpcy5zaG93KGZpbHRlcihjaGlsZHJlbiwgYC4ke3RoaXMuY2xzfWApWzBdIHx8IGNoaWxkcmVuW3RoaXMuYWN0aXZlXSB8fCBjaGlsZHJlblswXSk7XG5cbiAgICAgICAgdGhpcy5zd2lwaW5nICYmIGNzcyh0aGlzLmNvbm5lY3RzLCAndG91Y2gtYWN0aW9uJywgJ3Bhbi15IHBpbmNoLXpvb20nKTtcblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgaW5kZXgoKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzRW1wdHkodGhpcy5jb25uZWN0cykgPyBpbmRleChmaWx0ZXIodGhpcy5jb25uZWN0c1swXS5jaGlsZHJlbiwgYC4ke3RoaXMuY2xzfWApWzBdKSA6IC0xO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3coaXRlbSkge1xuXG4gICAgICAgICAgICBjb25zdCB7Y2hpbGRyZW59ID0gdGhpcy4kZWw7XG4gICAgICAgICAgICBjb25zdCB7bGVuZ3RofSA9IGNoaWxkcmVuO1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuaW5kZXgoKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1ByZXYgPSBwcmV2ID49IDA7XG4gICAgICAgICAgICBjb25zdCBkaXIgPSBpdGVtID09PSAncHJldmlvdXMnID8gLTEgOiAxO1xuXG4gICAgICAgICAgICBsZXQgdG9nZ2xlLCBhY3RpdmUsIG5leHQgPSBnZXRJbmRleChpdGVtLCBjaGlsZHJlbiwgcHJldik7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyssIG5leHQgPSAobmV4dCArIGRpciArIGxlbmd0aCkgJSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZXModGhpcy50b2dnbGVzW25leHRdLCAnLnVrLWRpc2FibGVkICosIC51ay1kaXNhYmxlZCwgW2Rpc2FibGVkXScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZSA9IHRoaXMudG9nZ2xlc1tuZXh0XTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlID0gY2hpbGRyZW5bbmV4dF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFhY3RpdmUgfHwgcHJldiA9PT0gbmV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoY2hpbGRyZW4sIHRoaXMuY2xzKTtcbiAgICAgICAgICAgIGFkZENsYXNzKGFjdGl2ZSwgdGhpcy5jbHMpO1xuICAgICAgICAgICAgYXR0cih0aGlzLnRvZ2dsZXMsICdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgYXR0cih0b2dnbGUsICdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29ubmVjdHMuZm9yRWFjaChsaXN0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1ByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVOb3cobGlzdC5jaGlsZHJlbltuZXh0XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KFtsaXN0LmNoaWxkcmVuW3ByZXZdLCBsaXN0LmNoaWxkcmVuW25leHRdXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IFN3aXRjaGVyIGZyb20gJy4vc3dpdGNoZXInO1xuaW1wb3J0IENsYXNzIGZyb20gJy4uL21peGluL2NsYXNzJztcbmltcG9ydCB7aGFzQ2xhc3N9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICBleHRlbmRzOiBTd2l0Y2hlcixcblxuICAgIHByb3BzOiB7XG4gICAgICAgIG1lZGlhOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgbWVkaWE6IDk2MCxcbiAgICAgICAgYXR0ckl0ZW06ICd1ay10YWItaXRlbSdcbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuXG4gICAgICAgIGNvbnN0IGNscyA9IGhhc0NsYXNzKHRoaXMuJGVsLCAndWstdGFiLWxlZnQnKVxuICAgICAgICAgICAgPyAndWstdGFiLWxlZnQnXG4gICAgICAgICAgICA6IGhhc0NsYXNzKHRoaXMuJGVsLCAndWstdGFiLXJpZ2h0JylcbiAgICAgICAgICAgICAgICA/ICd1ay10YWItcmlnaHQnXG4gICAgICAgICAgICAgICAgOiBmYWxzZTtcblxuICAgICAgICBpZiAoY2xzKSB7XG4gICAgICAgICAgICB0aGlzLiRjcmVhdGUoJ3RvZ2dsZScsIHRoaXMuJGVsLCB7Y2xzLCBtb2RlOiAnbWVkaWEnLCBtZWRpYTogdGhpcy5tZWRpYX0pO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IE1lZGlhIGZyb20gJy4uL21peGluL21lZGlhJztcbmltcG9ydCBUb2dnbGFibGUgZnJvbSAnLi4vbWl4aW4vdG9nZ2xhYmxlJztcbmltcG9ydCB7Y2xvc2VzdCwgaGFzQ2xhc3MsIGhhc1RvdWNoLCBpbmNsdWRlcywgaXNUb3VjaCwgaXNWaXNpYmxlLCBtYXRjaGVzLCBwb2ludGVyRW50ZXIsIHBvaW50ZXJMZWF2ZSwgcXVlcnlBbGwsIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtNZWRpYSwgVG9nZ2xhYmxlXSxcblxuICAgIGFyZ3M6ICd0YXJnZXQnLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaHJlZjogU3RyaW5nLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIG1vZGU6ICdsaXN0J1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGhyZWY6IGZhbHNlLFxuICAgICAgICB0YXJnZXQ6IGZhbHNlLFxuICAgICAgICBtb2RlOiAnY2xpY2snLFxuICAgICAgICBxdWV1ZWQ6IHRydWVcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICB0YXJnZXQoe2hyZWYsIHRhcmdldH0sICRlbCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gcXVlcnlBbGwodGFyZ2V0IHx8IGhyZWYsICRlbCk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lmxlbmd0aCAmJiB0YXJnZXQgfHwgWyRlbF07XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRyaWdnZXIodGhpcy50YXJnZXQsICd1cGRhdGVhcmlhJywgW3RoaXNdKTtcbiAgICB9LFxuXG4gICAgZXZlbnRzOiBbXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiBgJHtwb2ludGVyRW50ZXJ9ICR7cG9pbnRlckxlYXZlfWAsXG5cbiAgICAgICAgICAgIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnaG92ZXInKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZShgdG9nZ2xlJHtlLnR5cGUgPT09IHBvaW50ZXJFbnRlciA/ICdzaG93JyA6ICdoaWRlJ31gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnY2xpY2snKSB8fCBoYXNUb3VjaCAmJiBpbmNsdWRlcyh0aGlzLm1vZGUsICdob3ZlcicpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcihlKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPIGJldHRlciBpc1RvZ2dsZWQgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICBsZXQgbGluaztcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZj1cIiNcIl0sIGFbaHJlZj1cIlwiXScpXG4gICAgICAgICAgICAgICAgICAgIHx8IChsaW5rID0gY2xvc2VzdChlLnRhcmdldCwgJ2FbaHJlZl0nKSkgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbHMgJiYgIWhhc0NsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmNscy5zcGxpdCgnICcpWzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgIWlzVmlzaWJsZSh0aGlzLnRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGxpbmsuaGFzaCAmJiBtYXRjaGVzKHRoaXMudGFyZ2V0LCBsaW5rLmhhc2gpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgXSxcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5tb2RlLCAnbWVkaWEnKSAmJiB0aGlzLm1lZGlhXG4gICAgICAgICAgICAgICAgPyB7bWF0Y2g6IHRoaXMubWF0Y2hNZWRpYX1cbiAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlKHttYXRjaH0pIHtcblxuICAgICAgICAgICAgY29uc3QgdG9nZ2xlZCA9IHRoaXMuaXNUb2dnbGVkKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChtYXRjaCA/ICF0b2dnbGVkIDogdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgdG9nZ2xlKHR5cGUpIHtcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyKHRoaXMudGFyZ2V0LCB0eXBlIHx8ICd0b2dnbGUnLCBbdGhpc10pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IENsYXNzIGZyb20gJy4uL21peGluL2NsYXNzJztcbmltcG9ydCB7JCwgZW1wdHksIGh0bWx9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtDbGFzc10sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBkYXRlOiBTdHJpbmcsXG4gICAgICAgIGNsc1dyYXBwZXI6IFN0cmluZ1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGRhdGU6ICcnLFxuICAgICAgICBjbHNXcmFwcGVyOiAnLnVrLWNvdW50ZG93bi0ldW5pdCUnXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgZGF0ZSh7ZGF0ZX0pIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLnBhcnNlKGRhdGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRheXMoe2Nsc1dyYXBwZXJ9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAkKGNsc1dyYXBwZXIucmVwbGFjZSgnJXVuaXQlJywgJ2RheXMnKSwgJGVsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBob3Vycyh7Y2xzV3JhcHBlcn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnaG91cnMnKSwgJGVsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBtaW51dGVzKHtjbHNXcmFwcGVyfSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gJChjbHNXcmFwcGVyLnJlcGxhY2UoJyV1bml0JScsICdtaW51dGVzJyksICRlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2Vjb25kcyh7Y2xzV3JhcHBlcn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQoY2xzV3JhcHBlci5yZXBsYWNlKCcldW5pdCUnLCAnc2Vjb25kcycpLCAkZWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVuaXRzKCkge1xuICAgICAgICAgICAgcmV0dXJuIFsnZGF5cycsICdob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXS5maWx0ZXIodW5pdCA9PiB0aGlzW3VuaXRdKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGNvbm5lY3RlZCgpIHtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH0sXG5cbiAgICBkaXNjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLnVuaXRzLmZvckVhY2godW5pdCA9PiBlbXB0eSh0aGlzW3VuaXRdKSk7XG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ3Zpc2liaWxpdHljaGFuZ2UnLFxuXG4gICAgICAgICAgICBlbDogZG9jdW1lbnQsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICB3cml0ZSgpIHtcblxuICAgICAgICAgICAgY29uc3QgdGltZXNwYW4gPSBnZXRUaW1lU3Bhbih0aGlzLmRhdGUpO1xuXG4gICAgICAgICAgICBpZiAodGltZXNwYW4udG90YWwgPD0gMCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgICAgICB0aW1lc3Bhbi5kYXlzXG4gICAgICAgICAgICAgICAgICAgID0gdGltZXNwYW4uaG91cnNcbiAgICAgICAgICAgICAgICAgICAgPSB0aW1lc3Bhbi5taW51dGVzXG4gICAgICAgICAgICAgICAgICAgID0gdGltZXNwYW4uc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudW5pdHMuZm9yRWFjaCh1bml0ID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBkaWdpdHMgPSBTdHJpbmcoTWF0aC5mbG9vcih0aW1lc3Bhblt1bml0XSkpO1xuXG4gICAgICAgICAgICAgICAgZGlnaXRzID0gZGlnaXRzLmxlbmd0aCA8IDIgPyBgMCR7ZGlnaXRzfWAgOiBkaWdpdHM7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXNbdW5pdF07XG4gICAgICAgICAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSBkaWdpdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlnaXRzID0gZGlnaXRzLnNwbGl0KCcnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlnaXRzLmxlbmd0aCAhPT0gZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sKGVsLCBkaWdpdHMubWFwKCgpID0+ICc8c3Bhbj48L3NwYW4+Jykuam9pbignJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGlnaXRzLmZvckVhY2goKGRpZ2l0LCBpKSA9PiBlbC5jaGlsZHJlbltpXS50ZXh0Q29udGVudCA9IGRpZ2l0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc3RhcnQoKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRlICYmIHRoaXMudW5pdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLiRlbWl0KCksIDEwMDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcCgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gZ2V0VGltZVNwYW4oZGF0ZSkge1xuXG4gICAgY29uc3QgdG90YWwgPSBkYXRlIC0gRGF0ZS5ub3coKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsLFxuICAgICAgICBzZWNvbmRzOiB0b3RhbCAvIDEwMDAgJSA2MCxcbiAgICAgICAgbWludXRlczogdG90YWwgLyAxMDAwIC8gNjAgJSA2MCxcbiAgICAgICAgaG91cnM6IHRvdGFsIC8gMTAwMCAvIDYwIC8gNjAgJSAyNCxcbiAgICAgICAgZGF5czogdG90YWwgLyAxMDAwIC8gNjAgLyA2MCAvIDI0XG4gICAgfTtcbn1cbiIsImltcG9ydCB7YWRkQ2xhc3MsIGFwcGVuZCwgYXNzaWduLCBjaGlsZHJlbiBhcyBnZXRDaGlsZHJlbiwgY3NzLCBmYXN0ZG9tLCBoZWlnaHQsIGluY2x1ZGVzLCBpbmRleCwgaXNWaXNpYmxlLCBub29wLCBvZmZzZXQsIHBvc2l0aW9uLCBQcm9taXNlLCByZW1vdmVDbGFzcywgc2Nyb2xsVG9wLCBUcmFuc2l0aW9ufSBmcm9tICd1aWtpdC11dGlsJztcblxuY29uc3QgdGFyZ2V0Q2xhc3MgPSAndWstYW5pbWF0aW9uLXRhcmdldCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGFuaW1hdGlvbjogTnVtYmVyXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgYW5pbWF0aW9uOiAxNTBcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICB0YXJnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZWw7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgYW5pbWF0ZShhY3Rpb24pIHtcblxuICAgICAgICAgICAgYWRkU3R5bGUoKTtcblxuICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4odGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgbGV0IHByb3BzRnJvbSA9IGNoaWxkcmVuLm1hcChlbCA9PiBnZXRQcm9wcyhlbCwgdHJ1ZSkpO1xuXG4gICAgICAgICAgICBjb25zdCBvbGRIZWlnaHQgPSBoZWlnaHQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgY29uc3Qgb2xkU2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAgICAgICAgICAgYWN0aW9uKCk7XG5cbiAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goVHJhbnNpdGlvbi5jYW5jZWwpO1xuXG4gICAgICAgICAgICByZXNldCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICB0aGlzLiR1cGRhdGUodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgZmFzdGRvbS5mbHVzaCgpO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSBoZWlnaHQodGhpcy50YXJnZXQpO1xuXG4gICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChnZXRDaGlsZHJlbih0aGlzLnRhcmdldCkuZmlsdGVyKGVsID0+ICFpbmNsdWRlcyhjaGlsZHJlbiwgZWwpKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb3BzVG8gPSBjaGlsZHJlbi5tYXAoKGVsLCBpKSA9PlxuICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUgJiYgaSBpbiBwcm9wc0Zyb21cbiAgICAgICAgICAgICAgICAgICAgPyBwcm9wc0Zyb21baV1cbiAgICAgICAgICAgICAgICAgICAgPyBpc1Zpc2libGUoZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGdldFBvc2l0aW9uV2l0aE1hcmdpbihlbClcbiAgICAgICAgICAgICAgICAgICAgICAgIDoge29wYWNpdHk6IDB9XG4gICAgICAgICAgICAgICAgICAgIDoge29wYWNpdHk6IGlzVmlzaWJsZShlbCkgPyAxIDogMH1cbiAgICAgICAgICAgICAgICAgICAgOiBmYWxzZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcHJvcHNGcm9tID0gcHJvcHNUby5tYXAoKHByb3BzLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9IGNoaWxkcmVuW2ldLnBhcmVudE5vZGUgPT09IHRoaXMudGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgID8gcHJvcHNGcm9tW2ldIHx8IGdldFByb3BzKGNoaWxkcmVuW2ldKVxuICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZyb20ub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKCdvcGFjaXR5JyBpbiBwcm9wcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtvcGFjaXR5fSA9IGZyb207XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGFjaXR5ICUgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZnJvbS5vcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyb207XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy50YXJnZXQsIHRhcmdldENsYXNzKTtcbiAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGVsLCBpKSA9PiBwcm9wc0Zyb21baV0gJiYgY3NzKGVsLCBwcm9wc0Zyb21baV0pKTtcbiAgICAgICAgICAgIGNzcyh0aGlzLnRhcmdldCwgJ2hlaWdodCcsIG9sZEhlaWdodCk7XG4gICAgICAgICAgICBzY3JvbGxUb3Aod2luZG93LCBvbGRTY3JvbGxZKTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGNoaWxkcmVuLm1hcCgoZWwsIGkpID0+XG4gICAgICAgICAgICAgICAgcHJvcHNGcm9tW2ldICYmIHByb3BzVG9baV1cbiAgICAgICAgICAgICAgICAgICAgPyBUcmFuc2l0aW9uLnN0YXJ0KGVsLCBwcm9wc1RvW2ldLCB0aGlzLmFuaW1hdGlvbiwgJ2Vhc2UnKVxuICAgICAgICAgICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICApLmNvbmNhdChUcmFuc2l0aW9uLnN0YXJ0KHRoaXMudGFyZ2V0LCB7aGVpZ2h0OiBuZXdIZWlnaHR9LCB0aGlzLmFuaW1hdGlvbiwgJ2Vhc2UnKSkpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGVsLCBpKSA9PiBjc3MoZWwsIHtkaXNwbGF5OiBwcm9wc1RvW2ldLm9wYWNpdHkgPT09IDAgPyAnbm9uZScgOiAnJywgekluZGV4OiAnJ30pKTtcbiAgICAgICAgICAgICAgICByZXNldCh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kdXBkYXRlKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBmYXN0ZG9tLmZsdXNoKCk7IC8vIG5lZWRlZCBmb3IgSUUxMVxuICAgICAgICAgICAgfSwgbm9vcCk7XG5cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGdldFByb3BzKGVsLCBvcGFjaXR5KSB7XG5cbiAgICBjb25zdCB6SW5kZXggPSBjc3MoZWwsICd6SW5kZXgnKTtcblxuICAgIHJldHVybiBpc1Zpc2libGUoZWwpXG4gICAgICAgID8gYXNzaWduKHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICcnLFxuICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSA/IGNzcyhlbCwgJ29wYWNpdHknKSA6ICcwJyxcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgekluZGV4OiB6SW5kZXggPT09ICdhdXRvJyA/IGluZGV4KGVsKSA6IHpJbmRleFxuICAgICAgICB9LCBnZXRQb3NpdGlvbldpdGhNYXJnaW4oZWwpKVxuICAgICAgICA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXNldChlbCkge1xuICAgIGNzcyhlbC5jaGlsZHJlbiwge1xuICAgICAgICBoZWlnaHQ6ICcnLFxuICAgICAgICBsZWZ0OiAnJyxcbiAgICAgICAgb3BhY2l0eTogJycsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICcnLFxuICAgICAgICBwb3NpdGlvbjogJycsXG4gICAgICAgIHRvcDogJycsXG4gICAgICAgIHdpZHRoOiAnJ1xuICAgIH0pO1xuICAgIHJlbW92ZUNsYXNzKGVsLCB0YXJnZXRDbGFzcyk7XG4gICAgY3NzKGVsLCAnaGVpZ2h0JywgJycpO1xufVxuXG5mdW5jdGlvbiBnZXRQb3NpdGlvbldpdGhNYXJnaW4oZWwpIHtcbiAgICBjb25zdCB7aGVpZ2h0LCB3aWR0aH0gPSBvZmZzZXQoZWwpO1xuICAgIGNvbnN0IHt0b3AsIGxlZnR9ID0gcG9zaXRpb24oZWwpO1xuXG4gICAgcmV0dXJuIHt0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGh9O1xufVxuXG5sZXQgc3R5bGU7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKCkge1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0eWxlID0gYXBwZW5kKGRvY3VtZW50LmhlYWQsICc8c3R5bGU+Jykuc2hlZXQ7XG4gICAgc3R5bGUuaW5zZXJ0UnVsZShcbiAgICAgICAgYC4ke3RhcmdldENsYXNzfSA+ICoge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIH1gLCAwXG4gICAgKTtcbn1cbiIsImltcG9ydCBBbmltYXRlIGZyb20gJy4uL21peGluL2FuaW1hdGUnO1xuaW1wb3J0IHskJCwgJCwgYXBwZW5kLCBhc3NpZ24sIGNoaWxkcmVuLCBjc3MsIGRhdGEsIGVhY2gsIGZhc3Rkb20sIGhhc0NsYXNzLCBpbmNsdWRlcywgaXNFbXB0eSwgaXNFcXVhbCwgaXNVbmRlZmluZWQsIG1hdGNoZXMsIHBhcnNlT3B0aW9ucywgdG9nZ2xlQ2xhc3MsIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtBbmltYXRlXSxcblxuICAgIGFyZ3M6ICd0YXJnZXQnLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgdGFyZ2V0OiBCb29sZWFuLFxuICAgICAgICBzZWxBY3RpdmU6IEJvb2xlYW5cbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIHNlbEFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGF0dHJJdGVtOiAndWstZmlsdGVyLWNvbnRyb2wnLFxuICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICBhbmltYXRpb246IDI1MFxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIHRvZ2dsZXM6IHtcblxuICAgICAgICAgICAgZ2V0KHthdHRySXRlbX0sICRlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkJChgWyR7dGhpcy5hdHRySXRlbX1dLFtkYXRhLSR7dGhpcy5hdHRySXRlbX1dYCwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdhdGNoKCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHRhcmdldCh7dGFyZ2V0fSwgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gJCh0YXJnZXQsICRlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hpbGRyZW46IHtcblxuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbih0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB3YXRjaChsaXN0LCBvbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMaXN0KGxpc3QsIG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2NsaWNrJyxcblxuICAgICAgICAgICAgZGVsZWdhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmF0dHJJdGVtfV0sW2RhdGEtJHt0aGlzLmF0dHJJdGVtfV1gO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcihlKSB7XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseShlLmN1cnJlbnQpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgXSxcblxuICAgIGNvbm5lY3RlZCgpIHtcblxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2VsQWN0aXZlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlcyA9ICQkKHRoaXMuc2VsQWN0aXZlLCB0aGlzLiRlbCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZXMuZm9yRWFjaChlbCA9PiB0b2dnbGVDbGFzcyhlbCwgdGhpcy5jbHMsIGluY2x1ZGVzKGFjdGl2ZXMsIGVsKSkpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGFwcGx5KGVsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKG1lcmdlU3RhdGUoZWwsIHRoaXMuYXR0ckl0ZW0sIHRoaXMuZ2V0U3RhdGUoKSkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBoYXNDbGFzcyhpdGVtLCB0aGlzLmNscykpXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoc3RhdGUsIGVsKSA9PiBtZXJnZVN0YXRlKGVsLCB0aGlzLmF0dHJJdGVtLCBzdGF0ZSksIHtmaWx0ZXI6IHsnJzogJyd9LCBzb3J0OiBbXX0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFN0YXRlKHN0YXRlLCBhbmltYXRlID0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBzdGF0ZSA9IGFzc2lnbih7ZmlsdGVyOiB7Jyc6ICcnfSwgc29ydDogW119LCBzdGF0ZSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdiZWZvcmVGaWx0ZXInLCBbdGhpcywgc3RhdGVdKTtcblxuICAgICAgICAgICAgY29uc3Qge2NoaWxkcmVufSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMudG9nZ2xlcy5mb3JFYWNoKGVsID0+IHRvZ2dsZUNsYXNzKGVsLCB0aGlzLmNscywgISFtYXRjaEZpbHRlcihlbCwgdGhpcy5hdHRySXRlbSwgc3RhdGUpKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGFwcGx5ID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGVsID0+IGNzcyhlbCwgJ2Rpc3BsYXknLCBzZWxlY3RvciAmJiAhbWF0Y2hlcyhlbCwgc2VsZWN0b3IpID8gJ25vbmUnIDogJycpKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IFtzb3J0LCBvcmRlcl0gPSBzdGF0ZS5zb3J0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHNvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkID0gc29ydEl0ZW1zKGNoaWxkcmVuLCBzb3J0LCBvcmRlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNFcXVhbChzb3J0ZWQsIGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkLmZvckVhY2goZWwgPT4gYXBwZW5kKHRoaXMudGFyZ2V0LCBlbCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShhcHBseSkudGhlbigoKSA9PiB0cmlnZ2VyKHRoaXMuJGVsLCAnYWZ0ZXJGaWx0ZXInLCBbdGhpc10pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAnYWZ0ZXJGaWx0ZXInLCBbdGhpc10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlU3RhdGUoKSB7XG4gICAgICAgICAgICBmYXN0ZG9tLndyaXRlKCgpID0+IHRoaXMuc2V0U3RhdGUodGhpcy5nZXRTdGF0ZSgpLCBmYWxzZSkpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIGdldEZpbHRlcihlbCwgYXR0cikge1xuICAgIHJldHVybiBwYXJzZU9wdGlvbnMoZGF0YShlbCwgYXR0ciksIFsnZmlsdGVyJ10pO1xufVxuXG5mdW5jdGlvbiBtZXJnZVN0YXRlKGVsLCBhdHRyLCBzdGF0ZSkge1xuXG4gICAgY29uc3QgZmlsdGVyQnkgPSBnZXRGaWx0ZXIoZWwsIGF0dHIpO1xuICAgIGNvbnN0IHtmaWx0ZXIsIGdyb3VwLCBzb3J0LCBvcmRlciA9ICdhc2MnfSA9IGZpbHRlckJ5O1xuXG4gICAgaWYgKGZpbHRlciB8fCBpc1VuZGVmaW5lZChzb3J0KSkge1xuXG4gICAgICAgIGlmIChncm91cCkge1xuXG4gICAgICAgICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmZpbHRlclsnJ107XG4gICAgICAgICAgICAgICAgc3RhdGUuZmlsdGVyW2dyb3VwXSA9IGZpbHRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmZpbHRlcltncm91cF07XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eShzdGF0ZS5maWx0ZXIpIHx8ICcnIGluIHN0YXRlLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5maWx0ZXIgPSB7Jyc6IGZpbHRlciB8fCAnJ307XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlLmZpbHRlciA9IHsnJzogZmlsdGVyIHx8ICcnfTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKCFpc1VuZGVmaW5lZChzb3J0KSkge1xuICAgICAgICBzdGF0ZS5zb3J0ID0gW3NvcnQsIG9yZGVyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIG1hdGNoRmlsdGVyKGVsLCBhdHRyLCB7ZmlsdGVyOiBzdGF0ZUZpbHRlciA9IHsnJzogJyd9LCBzb3J0OiBbc3RhdGVTb3J0LCBzdGF0ZU9yZGVyXX0pIHtcblxuICAgIGNvbnN0IHtmaWx0ZXIgPSAnJywgZ3JvdXAgPSAnJywgc29ydCwgb3JkZXIgPSAnYXNjJ30gPSBnZXRGaWx0ZXIoZWwsIGF0dHIpO1xuXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHNvcnQpXG4gICAgICAgID8gZ3JvdXAgaW4gc3RhdGVGaWx0ZXIgJiYgZmlsdGVyID09PSBzdGF0ZUZpbHRlcltncm91cF1cbiAgICAgICAgICAgIHx8ICFmaWx0ZXIgJiYgZ3JvdXAgJiYgIShncm91cCBpbiBzdGF0ZUZpbHRlcikgJiYgIXN0YXRlRmlsdGVyWycnXVxuICAgICAgICA6IHN0YXRlU29ydCA9PT0gc29ydCAmJiBzdGF0ZU9yZGVyID09PSBvcmRlcjtcbn1cblxuZnVuY3Rpb24gaXNFcXVhbExpc3QobGlzdEEsIGxpc3RCKSB7XG4gICAgcmV0dXJuIGxpc3RBLmxlbmd0aCA9PT0gbGlzdEIubGVuZ3RoXG4gICAgICAgICYmIGxpc3RBLmV2ZXJ5KGVsID0+IH5saXN0Qi5pbmRleE9mKGVsKSk7XG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdG9yKHtmaWx0ZXJ9KSB7XG4gICAgbGV0IHNlbGVjdG9yID0gJyc7XG4gICAgZWFjaChmaWx0ZXIsIHZhbHVlID0+IHNlbGVjdG9yICs9IHZhbHVlIHx8ICcnKTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIHNvcnRJdGVtcyhub2Rlcywgc29ydCwgb3JkZXIpIHtcbiAgICByZXR1cm4gYXNzaWduKFtdLCBub2Rlcykuc29ydCgoYSwgYikgPT4gZGF0YShhLCBzb3J0KS5sb2NhbGVDb21wYXJlKGRhdGEoYiwgc29ydCksIHVuZGVmaW5lZCwge251bWVyaWM6IHRydWV9KSAqIChvcmRlciA9PT0gJ2FzYycgfHwgLTEpKTtcbn1cbiIsImltcG9ydCB7Y3NzLCBpc0lFfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgc2xpZGU6IHtcblxuICAgICAgICBzaG93KGRpcikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoZGlyICogLTEwMCl9LFxuICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcblxuICAgICAgICBwZXJjZW50KGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVkKGN1cnJlbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyYW5zbGF0ZShwZXJjZW50LCBkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKGRpciAqIC0xMDAgKiBwZXJjZW50KX0sXG4gICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKGRpciAqIDEwMCAqICgxIC0gcGVyY2VudCkpfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlZChlbCkge1xuICAgIHJldHVybiBNYXRoLmFicyhjc3MoZWwsICd0cmFuc2Zvcm0nKS5zcGxpdCgnLCcpWzRdIC8gZWwub2Zmc2V0V2lkdGgpIHx8IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUodmFsdWUgPSAwLCB1bml0ID0gJyUnKSB7XG4gICAgdmFsdWUgKz0gdmFsdWUgPyB1bml0IDogJyc7XG4gICAgcmV0dXJuIGlzSUUgPyBgdHJhbnNsYXRlWCgke3ZhbHVlfSlgIDogYHRyYW5zbGF0ZTNkKCR7dmFsdWV9LCAwLCAwKWA7IC8vIGN1cnJlbnRseSBub3QgdHJhbnNsYXRlM2QgaW4gSUUsIHRyYW5zbGF0ZTNkIHdpdGhpbiB0cmFuc2xhdGUzZCBkb2VzIG5vdCB3b3JrIHdoaWxlIHRyYW5zaXRpb25pbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlM2QodmFsdWUpIHtcbiAgICByZXR1cm4gYHNjYWxlM2QoJHt2YWx1ZX0sICR7dmFsdWV9LCAxKWA7XG59XG4iLCJpbXBvcnQgQW5pbWF0aW9ucywge3NjYWxlM2R9IGZyb20gJy4uLy4uL21peGluL2ludGVybmFsL3NsaWRlc2hvdy1hbmltYXRpb25zJztcbmltcG9ydCB7YXNzaWduLCBjc3N9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ24oe30sIEFuaW1hdGlvbnMsIHtcblxuICAgIGZhZGU6IHtcblxuICAgICAgICBzaG93KCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7b3BhY2l0eTogMH0sXG4gICAgICAgICAgICAgICAge29wYWNpdHk6IDF9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBlcmNlbnQoY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgLSBjc3MoY3VycmVudCwgJ29wYWNpdHknKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2xhdGUocGVyY2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnR9LFxuICAgICAgICAgICAgICAgIHtvcGFjaXR5OiBwZXJjZW50fVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHNjYWxlOiB7XG5cbiAgICAgICAgc2hvdygpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge29wYWNpdHk6IDAsIHRyYW5zZm9ybTogc2NhbGUzZCgxIC0gLjIpfSxcbiAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSwgdHJhbnNmb3JtOiBzY2FsZTNkKDEpfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcblxuICAgICAgICBwZXJjZW50KGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC0gY3NzKGN1cnJlbnQsICdvcGFjaXR5Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNsYXRlKHBlcmNlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge29wYWNpdHk6IDEgLSBwZXJjZW50LCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yICogcGVyY2VudCl9LFxuICAgICAgICAgICAgICAgIHtvcGFjaXR5OiBwZXJjZW50LCB0cmFuc2Zvcm06IHNjYWxlM2QoMSAtIC4yICsgLjIgKiBwZXJjZW50KX1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgIH1cblxufSk7XG4iLCJpbXBvcnQge2NyZWF0ZUV2ZW50LCBjbGFtcCwgY3NzLCBEZWZlcnJlZCwgbm9vcCwgUHJvbWlzZSwgVHJhbnNpdGlvbiwgdHJpZ2dlcn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRyYW5zaXRpb25lcihwcmV2LCBuZXh0LCBkaXIsIHthbmltYXRpb24sIGVhc2luZ30pIHtcblxuICAgIGNvbnN0IHtwZXJjZW50LCB0cmFuc2xhdGUsIHNob3cgPSBub29wfSA9IGFuaW1hdGlvbjtcbiAgICBjb25zdCBwcm9wcyA9IHNob3coZGlyKTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBkaXIsXG5cbiAgICAgICAgc2hvdyhkdXJhdGlvbiwgcGVyY2VudCA9IDAsIGxpbmVhcikge1xuXG4gICAgICAgICAgICBjb25zdCB0aW1pbmcgPSBsaW5lYXIgPyAnbGluZWFyJyA6IGVhc2luZztcbiAgICAgICAgICAgIGR1cmF0aW9uIC09IE1hdGgucm91bmQoZHVyYXRpb24gKiBjbGFtcChwZXJjZW50LCAtMSwgMSkpO1xuXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZShwZXJjZW50KTtcblxuICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShuZXh0LCAnaXRlbWluJywge3BlcmNlbnQsIGR1cmF0aW9uLCB0aW1pbmcsIGRpcn0pO1xuICAgICAgICAgICAgdHJpZ2dlclVwZGF0ZShwcmV2LCAnaXRlbW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZHVyYXRpb24sIHRpbWluZywgZGlyfSk7XG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLnN0YXJ0KG5leHQsIHByb3BzWzFdLCBkdXJhdGlvbiwgdGltaW5nKSxcbiAgICAgICAgICAgICAgICBUcmFuc2l0aW9uLnN0YXJ0KHByZXYsIHByb3BzWzBdLCBkdXJhdGlvbiwgdGltaW5nKVxuICAgICAgICAgICAgXSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH0sIG5vb3ApO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzdG9wKCkge1xuICAgICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb24uc3RvcChbbmV4dCwgcHJldl0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKFtuZXh0LCBwcmV2XSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcHNbMF0pIHtcbiAgICAgICAgICAgICAgICBjc3MoW25leHQsIHByZXZdLCBwcm9wLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9yd2FyZChkdXJhdGlvbiwgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpKSB7XG4gICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChbbmV4dCwgcHJldl0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvdyhkdXJhdGlvbiwgcGVyY2VudCwgdHJ1ZSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2xhdGUocGVyY2VudCkge1xuXG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdHJhbnNsYXRlKHBlcmNlbnQsIGRpcik7XG4gICAgICAgICAgICBjc3MobmV4dCwgcHJvcHNbMV0pO1xuICAgICAgICAgICAgY3NzKHByZXYsIHByb3BzWzBdKTtcbiAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUobmV4dCwgJ2l0ZW10cmFuc2xhdGVpbicsIHtwZXJjZW50LCBkaXJ9KTtcbiAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUocHJldiwgJ2l0ZW10cmFuc2xhdGVvdXQnLCB7cGVyY2VudDogMSAtIHBlcmNlbnQsIGRpcn0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcGVyY2VudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBwZXJjZW50KHByZXYgfHwgbmV4dCwgbmV4dCwgZGlyKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXREaXN0YW5jZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2ICYmIHByZXYub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cblxuICAgIH07XG5cbn1cblxuZnVuY3Rpb24gdHJpZ2dlclVwZGF0ZShlbCwgdHlwZSwgZGF0YSkge1xuICAgIHRyaWdnZXIoZWwsIGNyZWF0ZUV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSwgZGF0YSkpO1xufVxuIiwiaW1wb3J0IHskLCBhdHRyLCBtYXRjaGVzfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgYXV0b3BsYXk6IEJvb2xlYW4sXG4gICAgICAgIGF1dG9wbGF5SW50ZXJ2YWw6IE51bWJlcixcbiAgICAgICAgcGF1c2VPbkhvdmVyOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICBhdXRvcGxheUludGVydmFsOiA3MDAwLFxuICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWVcbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuICAgICAgICB0aGlzLmF1dG9wbGF5ICYmIHRoaXMuc3RhcnRBdXRvcGxheSgpO1xuICAgIH0sXG5cbiAgICBkaXNjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuc3RvcEF1dG9wbGF5KCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgYXR0cih0aGlzLnNsaWRlcywgJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ3Zpc2liaWxpdHljaGFuZ2UnLFxuXG4gICAgICAgICAgICBlbDogZG9jdW1lbnQsXG5cbiAgICAgICAgICAgIGZpbHRlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdXRvcGxheTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BBdXRvcGxheSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRBdXRvcGxheSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICBdLFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHN0YXJ0QXV0b3BsYXkoKSB7XG5cbiAgICAgICAgICAgIHRoaXMuc3RvcEF1dG9wbGF5KCk7XG5cbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgICAgICAoKSA9PiAoIXRoaXMuZHJhZ2dhYmxlIHx8ICEkKCc6Zm9jdXMnLCB0aGlzLiRlbCkpXG4gICAgICAgICAgICAgICAgICAgICYmICghdGhpcy5wYXVzZU9uSG92ZXIgfHwgIW1hdGNoZXModGhpcy4kZWwsICc6aG92ZXInKSlcbiAgICAgICAgICAgICAgICAgICAgJiYgIXRoaXMuc3RhY2subGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICYmIHRoaXMuc2hvdygnbmV4dCcpLFxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b3BsYXlJbnRlcnZhbFxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHN0b3BBdXRvcGxheSgpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IHtjbG9zZXN0LCBjc3MsIGdldEV2ZW50UG9zLCBpbmNsdWRlcywgaXNSdGwsIGlzVG91Y2gsIG5vb3AsIG9mZiwgb24sIHBvaW50ZXJEb3duLCBwb2ludGVyTW92ZSwgcG9pbnRlclVwLCBzZWxJbnB1dCwgdHJpZ2dlcn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGRyYWdnYWJsZTogQm9vbGVhblxuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgdGhyZXNob2xkOiAxMFxuICAgIH0sXG5cbiAgICBjcmVhdGVkKCkge1xuXG4gICAgICAgIFsnc3RhcnQnLCAnbW92ZScsICdlbmQnXS5mb3JFYWNoKGtleSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGZuID0gdGhpc1trZXldO1xuICAgICAgICAgICAgdGhpc1trZXldID0gZSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBnZXRFdmVudFBvcyhlKS54ICogKGlzUnRsID8gLTEgOiAxKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucHJldlBvcyA9IHBvcyAhPT0gdGhpcy5wb3MgPyB0aGlzLnBvcyA6IHRoaXMucHJldlBvcztcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IHBvcztcblxuICAgICAgICAgICAgICAgIGZuKGUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6IHBvaW50ZXJEb3duLFxuXG4gICAgICAgICAgICBkZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxTbGlkZXM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kcmFnZ2FibGVcbiAgICAgICAgICAgICAgICAgICAgfHwgIWlzVG91Y2goZSkgJiYgaGFzVGV4dE5vZGVzT25seShlLnRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgfHwgY2xvc2VzdChlLnRhcmdldCwgc2VsSW5wdXQpXG4gICAgICAgICAgICAgICAgICAgIHx8IGUuYnV0dG9uID4gMFxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLmxlbmd0aCA8IDJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGlPUyAxMSBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODQyNTBcblxuICAgICAgICAgICAgbmFtZTogJ3RvdWNobW92ZScsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGhhbmRsZXI6ICdtb3ZlJyxcbiAgICAgICAgICAgIGRlbGVnYXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbFNsaWRlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdkcmFnc3RhcnQnLFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc3RhcnQoKSB7XG5cbiAgICAgICAgICAgIHRoaXMuZHJhZyA9IHRoaXMucG9zO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNpdGlvbmVyKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBlcmNlbnQgPSB0aGlzLl90cmFuc2l0aW9uZXIucGVyY2VudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZyArPSB0aGlzLl90cmFuc2l0aW9uZXIuZ2V0RGlzdGFuY2UoKSAqIHRoaXMucGVyY2VudCAqIHRoaXMuZGlyO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25lci50cmFuc2xhdGUodGhpcy5wZXJjZW50KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2VlIGFib3ZlIHdvcmthcm91bmQgbm90aWNlXG4gICAgICAgICAgICBjb25zdCBvZmYgPSBwb2ludGVyTW92ZSAhPT0gJ3RvdWNobW92ZSdcbiAgICAgICAgICAgICAgICA/IG9uKGRvY3VtZW50LCBwb2ludGVyTW92ZSwgdGhpcy5tb3ZlLCB7cGFzc2l2ZTogZmFsc2V9KVxuICAgICAgICAgICAgICAgIDogbm9vcDtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kTW92ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBvZmYoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVuYmluZE1vdmUgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9uKHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICBvbihkb2N1bWVudCwgcG9pbnRlclVwLCB0aGlzLmVuZCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGNzcyh0aGlzLmxpc3QsICd1c2VyU2VsZWN0JywgJ25vbmUnKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmUoZSkge1xuXG4gICAgICAgICAgICAvLyBTZWUgYWJvdmUgd29ya2Fyb3VuZCBub3RpY2VcbiAgICAgICAgICAgIGlmICghdGhpcy51bmJpbmRNb3ZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRoaXMucG9zIC0gdGhpcy5kcmFnO1xuXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPT09IDAgfHwgdGhpcy5wcmV2UG9zID09PSB0aGlzLnBvcyB8fCAhdGhpcy5kcmFnZ2luZyAmJiBNYXRoLmFicyhkaXN0YW5jZSkgPCB0aGlzLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3NzKHRoaXMubGlzdCwgJ3BvaW50ZXJFdmVudHMnLCAnbm9uZScpO1xuXG4gICAgICAgICAgICBlLmNhbmNlbGFibGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZGlyID0gKGRpc3RhbmNlIDwgMCA/IDEgOiAtMSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHtzbGlkZXN9ID0gdGhpcztcbiAgICAgICAgICAgIGxldCB7cHJldkluZGV4fSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgZGlzID0gTWF0aC5hYnMoZGlzdGFuY2UpO1xuICAgICAgICAgICAgbGV0IG5leHRJbmRleCA9IHRoaXMuZ2V0SW5kZXgocHJldkluZGV4ICsgdGhpcy5kaXIsIHByZXZJbmRleCk7XG4gICAgICAgICAgICBsZXQgd2lkdGggPSB0aGlzLl9nZXREaXN0YW5jZShwcmV2SW5kZXgsIG5leHRJbmRleCkgfHwgc2xpZGVzW3ByZXZJbmRleF0ub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgICAgIHdoaWxlIChuZXh0SW5kZXggIT09IHByZXZJbmRleCAmJiBkaXMgPiB3aWR0aCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnIC09IHdpZHRoICogdGhpcy5kaXI7XG5cbiAgICAgICAgICAgICAgICBwcmV2SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICAgICAgZGlzIC09IHdpZHRoO1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHRoaXMuZ2V0SW5kZXgocHJldkluZGV4ICsgdGhpcy5kaXIsIHByZXZJbmRleCk7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB0aGlzLl9nZXREaXN0YW5jZShwcmV2SW5kZXgsIG5leHRJbmRleCkgfHwgc2xpZGVzW3ByZXZJbmRleF0ub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gZGlzIC8gd2lkdGg7XG5cbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBzbGlkZXNbcHJldkluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBzbGlkZXNbbmV4dEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLmluZGV4ICE9PSBuZXh0SW5kZXg7XG4gICAgICAgICAgICBjb25zdCBlZGdlID0gcHJldkluZGV4ID09PSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgIGxldCBpdGVtU2hvd247XG5cbiAgICAgICAgICAgIFt0aGlzLmluZGV4LCB0aGlzLnByZXZJbmRleF0uZmlsdGVyKGkgPT4gIWluY2x1ZGVzKFtuZXh0SW5kZXgsIHByZXZJbmRleF0sIGkpKS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIoc2xpZGVzW2ldLCAnaXRlbWhpZGRlbicsIFt0aGlzXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZWRnZSkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtU2hvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZJbmRleCA9IHByZXZJbmRleDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gcHJldkluZGV4ICYmIHRoaXMucHJldkluZGV4ICE9PSBwcmV2SW5kZXggfHwgaXRlbVNob3duKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcihzbGlkZXNbdGhpcy5pbmRleF0sICdpdGVtc2hvd24nLCBbdGhpc10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldkluZGV4ID0gcHJldkluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgICAgICAhZWRnZSAmJiB0cmlnZ2VyKHByZXYsICdiZWZvcmVpdGVtaGlkZScsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnYmVmb3JlaXRlbXNob3cnLCBbdGhpc10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIgPSB0aGlzLl90cmFuc2xhdGUoTWF0aC5hYnModGhpcy5wZXJjZW50KSwgcHJldiwgIWVkZ2UgJiYgbmV4dCk7XG5cbiAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgIWVkZ2UgJiYgdHJpZ2dlcihwcmV2LCAnaXRlbWhpZGUnLCBbdGhpc10pO1xuICAgICAgICAgICAgICAgIHRyaWdnZXIobmV4dCwgJ2l0ZW1zaG93JywgW3RoaXNdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGVuZCgpIHtcblxuICAgICAgICAgICAgb2ZmKHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMudW5iaW5kTW92ZSk7XG4gICAgICAgICAgICB0aGlzLnVuYmluZE1vdmUgJiYgdGhpcy51bmJpbmRNb3ZlKCk7XG4gICAgICAgICAgICBvZmYoZG9jdW1lbnQsIHBvaW50ZXJVcCwgdGhpcy5lbmQsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2luZykge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy5wcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMSAtIHRoaXMucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXIgKj0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3coZmFsc2UsIHRoaXMuaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlyQ2hhbmdlID0gKGlzUnRsID8gdGhpcy5kaXIgKiAoaXNSdGwgPyAxIDogLTEpIDogdGhpcy5kaXIpIDwgMCA9PT0gdGhpcy5wcmV2UG9zID4gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBkaXJDaGFuZ2UgPyB0aGlzLmluZGV4IDogdGhpcy5wcmV2SW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpckNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50ID0gMSAtIHRoaXMucGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyh0aGlzLmRpciA+IDAgJiYgIWRpckNoYW5nZSB8fCB0aGlzLmRpciA8IDAgJiYgZGlyQ2hhbmdlID8gJ25leHQnIDogJ3ByZXZpb3VzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNzcyh0aGlzLmxpc3QsIHt1c2VyU2VsZWN0OiAnJywgcG9pbnRlckV2ZW50czogJyd9KTtcblxuICAgICAgICAgICAgdGhpcy5kcmFnXG4gICAgICAgICAgICAgICAgPSB0aGlzLnBlcmNlbnRcbiAgICAgICAgICAgICAgICA9IG51bGw7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5mdW5jdGlvbiBoYXNUZXh0Tm9kZXNPbmx5KGVsKSB7XG4gICAgcmV0dXJuICFlbC5jaGlsZHJlbi5sZW5ndGggJiYgZWwuY2hpbGROb2Rlcy5sZW5ndGg7XG59XG4iLCJpbXBvcnQgeyQsICQkLCBkYXRhLCBodG1sLCB0b2dnbGVDbGFzcywgdG9OdW1iZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHNlbE5hdjogZmFsc2VcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBuYXYoe3NlbE5hdn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQoc2VsTmF2LCAkZWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbE5hdkl0ZW0oe2F0dHJJdGVtfSkge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHthdHRySXRlbX1dLFtkYXRhLSR7YXR0ckl0ZW19XWA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmF2SXRlbXMoXywgJGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gJCQodGhpcy5zZWxOYXZJdGVtLCAkZWwpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgdXBkYXRlOiB7XG5cbiAgICAgICAgd3JpdGUoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm5hdiAmJiB0aGlzLmxlbmd0aCAhPT0gdGhpcy5uYXYuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaHRtbCh0aGlzLm5hdiwgdGhpcy5zbGlkZXMubWFwKChfLCBpKSA9PiBgPGxpICR7dGhpcy5hdHRySXRlbX09XCIke2l9XCI+PGEgaHJlZj1cIiNcIj48L2E+PC9saT5gKS5qb2luKCcnKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKCQkKHRoaXMuc2VsTmF2SXRlbSwgdGhpcy4kZWwpLmNvbmNhdCh0aGlzLm5hdiksICd1ay1oaWRkZW4nLCAhdGhpcy5tYXhJbmRleCk7XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmF2KCk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgIGRlbGVnYXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbE5hdkl0ZW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93KGRhdGEoZS5jdXJyZW50LCB0aGlzLmF0dHJJdGVtKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdpdGVtc2hvdycsXG4gICAgICAgICAgICBoYW5kbGVyOiAndXBkYXRlTmF2J1xuXG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgdXBkYXRlTmF2KCkge1xuXG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5nZXRWYWxpZEluZGV4KCk7XG4gICAgICAgICAgICB0aGlzLm5hdkl0ZW1zLmZvckVhY2goZWwgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY21kID0gZGF0YShlbCwgdGhpcy5hdHRySXRlbSk7XG5cbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbCwgdGhpcy5jbHNBY3RpdmUsIHRvTnVtYmVyKGNtZCkgPT09IGkpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsLCAndWstaW52aXNpYmxlJywgdGhpcy5maW5pdGUgJiYgKGNtZCA9PT0gJ3ByZXZpb3VzJyAmJiBpID09PSAwIHx8IGNtZCA9PT0gJ25leHQnICYmIGkgPj0gdGhpcy5tYXhJbmRleCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IFNsaWRlckF1dG9wbGF5IGZyb20gJy4vc2xpZGVyLWF1dG9wbGF5JztcbmltcG9ydCBTbGlkZXJEcmFnIGZyb20gJy4vc2xpZGVyLWRyYWcnO1xuaW1wb3J0IFNsaWRlck5hdiBmcm9tICcuL3NsaWRlci1uYXYnO1xuaW1wb3J0IHskLCAkJCwgYXNzaWduLCBjbGFtcCwgZmFzdGRvbSwgZ2V0SW5kZXgsIGhhc0NsYXNzLCBpc051bWJlciwgaXNSdGwsIFByb21pc2UsIHJlbW92ZUNsYXNzLCB0cmlnZ2VyfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbU2xpZGVyQXV0b3BsYXksIFNsaWRlckRyYWcsIFNsaWRlck5hdl0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBjbHNBY3RpdmF0ZWQ6IEJvb2xlYW4sXG4gICAgICAgIGVhc2luZzogU3RyaW5nLFxuICAgICAgICBpbmRleDogTnVtYmVyLFxuICAgICAgICBmaW5pdGU6IEJvb2xlYW4sXG4gICAgICAgIHZlbG9jaXR5OiBOdW1iZXIsXG4gICAgICAgIHNlbFNsaWRlczogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6ICgpID0+ICh7XG4gICAgICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgICAgICBmaW5pdGU6IGZhbHNlLFxuICAgICAgICB2ZWxvY2l0eTogMSxcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIHByZXZJbmRleDogLTEsXG4gICAgICAgIHN0YWNrOiBbXSxcbiAgICAgICAgcGVyY2VudDogMCxcbiAgICAgICAgY2xzQWN0aXZlOiAndWstYWN0aXZlJyxcbiAgICAgICAgY2xzQWN0aXZhdGVkOiBmYWxzZSxcbiAgICAgICAgVHJhbnNpdGlvbmVyOiBmYWxzZSxcbiAgICAgICAgdHJhbnNpdGlvbk9wdGlvbnM6IHt9XG4gICAgfSksXG5cbiAgICBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMucHJldkluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldFZhbGlkSW5kZXgodGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB9LFxuXG4gICAgZGlzY29ubmVjdGVkKCkge1xuICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnNsaWRlcywgdGhpcy5jbHNBY3RpdmUpO1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGR1cmF0aW9uKHt2ZWxvY2l0eX0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIHNwZWVkVXAoJGVsLm9mZnNldFdpZHRoIC8gdmVsb2NpdHkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxpc3Qoe3NlbExpc3R9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAkKHNlbExpc3QsICRlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF4SW5kZXgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLSAxO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbFNsaWRlcyh7c2VsTGlzdCwgc2VsU2xpZGVzfSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3NlbExpc3R9ICR7c2VsU2xpZGVzIHx8ICc+IConfWA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2xpZGVzOiB7XG5cbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCQodGhpcy5zZWxTbGlkZXMsIHRoaXMuJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdhdGNoKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJHJlc2V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBsZW5ndGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG5cbiAgICAgICAgaXRlbXNob3duKCkge1xuICAgICAgICAgICAgdGhpcy4kdXBkYXRlKHRoaXMubGlzdCk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2hvdyhpbmRleCwgZm9yY2UgPSBmYWxzZSkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2luZyB8fCAhdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHtzdGFja30gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgcXVldWVJbmRleCA9IGZvcmNlID8gMCA6IHN0YWNrLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YWNrLnNwbGljZShxdWV1ZUluZGV4LCAxKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KHN0YWNrLnNoaWZ0KCksIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHN0YWNrW2ZvcmNlID8gJ3Vuc2hpZnQnIDogJ3B1c2gnXShpbmRleCk7XG5cbiAgICAgICAgICAgIGlmICghZm9yY2UgJiYgc3RhY2subGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uZXIuZm9yd2FyZChNYXRoLm1pbih0aGlzLmR1cmF0aW9uLCAyMDApKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHByZXZJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gaGFzQ2xhc3ModGhpcy5zbGlkZXMsIHRoaXMuY2xzQWN0aXZlKSAmJiB0aGlzLnNsaWRlc1twcmV2SW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gdGhpcy5nZXRJbmRleChpbmRleCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5zbGlkZXNbbmV4dEluZGV4XTtcblxuICAgICAgICAgICAgaWYgKHByZXYgPT09IG5leHQpIHtcbiAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kaXIgPSBnZXREaXJlY3Rpb24oaW5kZXgsIHByZXZJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnByZXZJbmRleCA9IHByZXZJbmRleDtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICAgICAgICAgIHByZXYgJiYgdHJpZ2dlcihwcmV2LCAnYmVmb3JlaXRlbWhpZGUnLCBbdGhpc10pO1xuICAgICAgICAgICAgaWYgKCF0cmlnZ2VyKG5leHQsICdiZWZvcmVpdGVtc2hvdycsIFt0aGlzLCBwcmV2XSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5wcmV2SW5kZXg7XG4gICAgICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLl9zaG93KHByZXYsIG5leHQsIGZvcmNlKS50aGVuKCgpID0+IHtcblxuICAgICAgICAgICAgICAgIHByZXYgJiYgdHJpZ2dlcihwcmV2LCAnaXRlbWhpZGRlbicsIFt0aGlzXSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcihuZXh0LCAnaXRlbXNob3duJywgW3RoaXNdKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmFzdGRvbS53cml0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhzdGFjay5zaGlmdCgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwcmV2ICYmIHRyaWdnZXIocHJldiwgJ2l0ZW1oaWRlJywgW3RoaXNdKTtcbiAgICAgICAgICAgIHRyaWdnZXIobmV4dCwgJ2l0ZW1zaG93JywgW3RoaXNdKTtcblxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRJbmRleChpbmRleCA9IHRoaXMuaW5kZXgsIHByZXYgPSB0aGlzLmluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gY2xhbXAoZ2V0SW5kZXgoaW5kZXgsIHRoaXMuc2xpZGVzLCBwcmV2LCB0aGlzLmZpbml0ZSksIDAsIHRoaXMubWF4SW5kZXgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFZhbGlkSW5kZXgoaW5kZXggPSB0aGlzLmluZGV4LCBwcmV2SW5kZXggPSB0aGlzLnByZXZJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5kZXgoaW5kZXgsIHByZXZJbmRleCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3Nob3cocHJldiwgbmV4dCwgZm9yY2UpIHtcblxuICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmVyID0gdGhpcy5fZ2V0VHJhbnNpdGlvbmVyKFxuICAgICAgICAgICAgICAgIHByZXYsXG4gICAgICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgICAgICB0aGlzLmRpcixcbiAgICAgICAgICAgICAgICBhc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IGZvcmNlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5leHQub2Zmc2V0V2lkdGggPCA2MDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCknIC8qIGVhc2VPdXRRdWFkICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKScgLyogZWFzZU91dFF1YXJ0ICovXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZWFzaW5nXG4gICAgICAgICAgICAgICAgfSwgdGhpcy50cmFuc2l0aW9uT3B0aW9ucylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmICghZm9yY2UgJiYgIXByZXYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGUoMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7bGVuZ3RofSA9IHRoaXMuc3RhY2s7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNpdGlvbmVyW2xlbmd0aCA+IDEgPyAnZm9yd2FyZCcgOiAnc2hvdyddKGxlbmd0aCA+IDEgPyBNYXRoLm1pbih0aGlzLmR1cmF0aW9uLCA3NSArIDc1IC8gKGxlbmd0aCAtIDEpKSA6IHRoaXMuZHVyYXRpb24sIHRoaXMucGVyY2VudCk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBfZ2V0RGlzdGFuY2UocHJldiwgbmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zaXRpb25lcihwcmV2LCBwcmV2ICE9PSBuZXh0ICYmIG5leHQpLmdldERpc3RhbmNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RyYW5zbGF0ZShwZXJjZW50LCBwcmV2ID0gdGhpcy5wcmV2SW5kZXgsIG5leHQgPSB0aGlzLmluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2l0aW9uZXIgPSB0aGlzLl9nZXRUcmFuc2l0aW9uZXIocHJldiAhPT0gbmV4dCA/IHByZXYgOiBmYWxzZSwgbmV4dCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uZXIudHJhbnNsYXRlKHBlcmNlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25lcjtcbiAgICAgICAgfSxcblxuICAgICAgICBfZ2V0VHJhbnNpdGlvbmVyKHByZXYgPSB0aGlzLnByZXZJbmRleCwgbmV4dCA9IHRoaXMuaW5kZXgsIGRpciA9IHRoaXMuZGlyIHx8IDEsIG9wdGlvbnMgPSB0aGlzLnRyYW5zaXRpb25PcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuVHJhbnNpdGlvbmVyKFxuICAgICAgICAgICAgICAgIGlzTnVtYmVyKHByZXYpID8gdGhpcy5zbGlkZXNbcHJldl0gOiBwcmV2LFxuICAgICAgICAgICAgICAgIGlzTnVtYmVyKG5leHQpID8gdGhpcy5zbGlkZXNbbmV4dF0gOiBuZXh0LFxuICAgICAgICAgICAgICAgIGRpciAqIChpc1J0bCA/IC0xIDogMSksXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5mdW5jdGlvbiBnZXREaXJlY3Rpb24oaW5kZXgsIHByZXZJbmRleCkge1xuICAgIHJldHVybiBpbmRleCA9PT0gJ25leHQnXG4gICAgICAgID8gMVxuICAgICAgICA6IGluZGV4ID09PSAncHJldmlvdXMnXG4gICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICA6IGluZGV4IDwgcHJldkluZGV4XG4gICAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICAgIDogMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwZWVkVXAoeCkge1xuICAgIHJldHVybiAuNSAqIHggKyAzMDA7IC8vIHBhcmFib2xhIHRocm91Z2ggKDQwMCw1MDA7IDYwMCw2MDA7IDE4MDAsMTIwMClcbn1cbiIsImltcG9ydCBBbmltYXRpb25zIGZyb20gJy4vaW50ZXJuYWwvc2xpZGVzaG93LWFuaW1hdGlvbnMnO1xuaW1wb3J0IFRyYW5zaXRpb25lciBmcm9tICcuL2ludGVybmFsL3NsaWRlc2hvdy10cmFuc2l0aW9uZXInO1xuaW1wb3J0IFNsaWRlciBmcm9tICcuL3NsaWRlci5qcyc7XG5pbXBvcnQge2FkZENsYXNzLCBhc3NpZ24sIHJlbW92ZUNsYXNzfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbU2xpZGVyXSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGFuaW1hdGlvbjogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUnLFxuICAgICAgICBjbHNBY3RpdmF0ZWQ6ICd1ay10cmFuc2l0aW9uLWFjdGl2ZScsXG4gICAgICAgIEFuaW1hdGlvbnMsXG4gICAgICAgIFRyYW5zaXRpb25lclxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGFuaW1hdGlvbih7YW5pbWF0aW9uLCBBbmltYXRpb25zfSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbihhbmltYXRpb24gaW4gQW5pbWF0aW9ucyA/IEFuaW1hdGlvbnNbYW5pbWF0aW9uXSA6IEFuaW1hdGlvbnMuc2xpZGUsIHtuYW1lOiBhbmltYXRpb259KTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2l0aW9uT3B0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB7YW5pbWF0aW9uOiB0aGlzLmFuaW1hdGlvbn07XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcblxuICAgICAgICAnaXRlbXNob3cgaXRlbWhpZGUgaXRlbXNob3duIGl0ZW1oaWRkZW4nKHt0YXJnZXR9KSB7XG4gICAgICAgICAgICB0aGlzLiR1cGRhdGUodGFyZ2V0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVpdGVtc2hvdyh7dGFyZ2V0fSkge1xuICAgICAgICAgICAgYWRkQ2xhc3ModGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXRlbXNob3duKHt0YXJnZXR9KSB7XG4gICAgICAgICAgICBhZGRDbGFzcyh0YXJnZXQsIHRoaXMuY2xzQWN0aXZhdGVkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpdGVtaGlkZGVuKHt0YXJnZXR9KSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0YXJnZXQsIHRoaXMuY2xzQWN0aXZlLCB0aGlzLmNsc0FjdGl2YXRlZCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbiIsImltcG9ydCBBbmltYXRpb25zIGZyb20gJy4vaW50ZXJuYWwvbGlnaHRib3gtYW5pbWF0aW9ucyc7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gJy4uL21peGluL2NvbnRhaW5lcic7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vbWl4aW4vbW9kYWwnO1xuaW1wb3J0IFNsaWRlc2hvdyBmcm9tICcuLi9taXhpbi9zbGlkZXNob3cnO1xuaW1wb3J0IFRvZ2dsYWJsZSBmcm9tICcuLi9taXhpbi90b2dnbGFibGUnO1xuaW1wb3J0IHskLCBhZGRDbGFzcywgYWpheCwgYXBwZW5kLCBhc3NpZ24sIGF0dHIsIGNzcywgZ2V0SW1hZ2UsIGh0bWwsIGluZGV4LCBvbmNlLCBwb2ludGVyRG93biwgcG9pbnRlck1vdmUsIHJlbW92ZUNsYXNzLCBUcmFuc2l0aW9uLCB0cmlnZ2VyfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQ29udGFpbmVyLCBNb2RhbCwgVG9nZ2xhYmxlLCBTbGlkZXNob3ddLFxuXG4gICAgZnVuY3Rpb25hbDogdHJ1ZSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGRlbGF5Q29udHJvbHM6IE51bWJlcixcbiAgICAgICAgcHJlbG9hZDogTnVtYmVyLFxuICAgICAgICB2aWRlb0F1dG9wbGF5OiBCb29sZWFuLFxuICAgICAgICB0ZW1wbGF0ZTogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6ICgpID0+ICh7XG4gICAgICAgIHByZWxvYWQ6IDEsXG4gICAgICAgIHZpZGVvQXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICBkZWxheUNvbnRyb2xzOiAzMDAwLFxuICAgICAgICBpdGVtczogW10sXG4gICAgICAgIGNsczogJ3VrLW9wZW4nLFxuICAgICAgICBjbHNQYWdlOiAndWstbGlnaHRib3gtcGFnZScsXG4gICAgICAgIHNlbExpc3Q6ICcudWstbGlnaHRib3gtaXRlbXMnLFxuICAgICAgICBhdHRySXRlbTogJ3VrLWxpZ2h0Ym94LWl0ZW0nLFxuICAgICAgICBzZWxDbG9zZTogJy51ay1jbG9zZS1sYXJnZScsXG4gICAgICAgIHNlbENhcHRpb246ICcudWstbGlnaHRib3gtY2FwdGlvbicsXG4gICAgICAgIHBhdXNlT25Ib3ZlcjogZmFsc2UsXG4gICAgICAgIHZlbG9jaXR5OiAyLFxuICAgICAgICBBbmltYXRpb25zLFxuICAgICAgICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJ1ay1saWdodGJveCB1ay1vdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInVrLWxpZ2h0Ym94LWl0ZW1zXCI+PC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1ay1saWdodGJveC10b29sYmFyIHVrLXBvc2l0aW9uLXRvcCB1ay10ZXh0LXJpZ2h0IHVrLXRyYW5zaXRpb24tc2xpZGUtdG9wIHVrLXRyYW5zaXRpb24tb3BhcXVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInVrLWxpZ2h0Ym94LXRvb2xiYXItaWNvbiB1ay1jbG9zZS1sYXJnZVwiIHR5cGU9XCJidXR0b25cIiB1ay1jbG9zZT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwidWstbGlnaHRib3gtYnV0dG9uIHVrLXBvc2l0aW9uLWNlbnRlci1sZWZ0IHVrLXBvc2l0aW9uLW1lZGl1bSB1ay10cmFuc2l0aW9uLWZhZGVcIiBocmVmPVwiI1wiIHVrLXNsaWRlbmF2LXByZXZpb3VzIHVrLWxpZ2h0Ym94LWl0ZW09XCJwcmV2aW91c1wiPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwidWstbGlnaHRib3gtYnV0dG9uIHVrLXBvc2l0aW9uLWNlbnRlci1yaWdodCB1ay1wb3NpdGlvbi1tZWRpdW0gdWstdHJhbnNpdGlvbi1mYWRlXCIgaHJlZj1cIiNcIiB1ay1zbGlkZW5hdi1uZXh0IHVrLWxpZ2h0Ym94LWl0ZW09XCJuZXh0XCI+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInVrLWxpZ2h0Ym94LXRvb2xiYXIgdWstbGlnaHRib3gtY2FwdGlvbiB1ay1wb3NpdGlvbi1ib3R0b20gdWstdGV4dC1jZW50ZXIgdWstdHJhbnNpdGlvbi1zbGlkZS1ib3R0b20gdWstdHJhbnNpdGlvbi1vcGFxdWVcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+YFxuICAgIH0pLFxuXG4gICAgY3JlYXRlZCgpIHtcblxuICAgICAgICBjb25zdCAkZWwgPSAkKHRoaXMudGVtcGxhdGUpO1xuICAgICAgICBjb25zdCBsaXN0ID0gJCh0aGlzLnNlbExpc3QsICRlbCk7XG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoKSA9PiBhcHBlbmQobGlzdCwgJzxsaT48L2xpPicpKTtcblxuICAgICAgICB0aGlzLiRtb3VudChhcHBlbmQodGhpcy5jb250YWluZXIsICRlbCkpO1xuXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgY2FwdGlvbih7c2VsQ2FwdGlvbn0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuICQoJy51ay1saWdodGJveC1jYXB0aW9uJywgJGVsKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGV2ZW50czogW1xuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogYCR7cG9pbnRlck1vdmV9ICR7cG9pbnRlckRvd259IGtleWRvd25gLFxuXG4gICAgICAgICAgICBoYW5kbGVyOiAnc2hvd0NvbnRyb2xzJ1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiAnY2xpY2snLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBkZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxTbGlkZXM7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiAnc2hvd24nLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbnRyb2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdoaWRlJyxcblxuICAgICAgICAgICAgc2VsZjogdHJ1ZSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUNvbnRyb2xzKCk7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnNsaWRlcywgdGhpcy5jbHNBY3RpdmUpO1xuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RvcCh0aGlzLnNsaWRlcyk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdoaWRkZW4nLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGRlc3Ryb3kodHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdrZXl1cCcsXG5cbiAgICAgICAgICAgIGVsOiBkb2N1bWVudCxcblxuICAgICAgICAgICAgaGFuZGxlcihlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUb2dnbGVkKHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdygncHJldmlvdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCduZXh0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuXG4gICAgICAgICAgICBuYW1lOiAnYmVmb3JlaXRlbXNob3cnLFxuXG4gICAgICAgICAgICBoYW5kbGVyKGUpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVG9nZ2xlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdnYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVOb3codGhpcy4kZWwsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBBbmltYXRpb25zWydzY2FsZSddO1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGUudGFyZ2V0LCB0aGlzLmNsc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFjay5zcGxpY2UoMSwgMCwgdGhpcy5pbmRleCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93JyxcblxuICAgICAgICAgICAgaGFuZGxlcih7dGFyZ2V0fSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGluZGV4KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgY29uc3Qge2NhcHRpb259ID0gdGhpcy5nZXRJdGVtKGkpO1xuXG4gICAgICAgICAgICAgICAgY3NzKHRoaXMuY2FwdGlvbiwgJ2Rpc3BsYXknLCBjYXB0aW9uID8gJycgOiAnbm9uZScpO1xuICAgICAgICAgICAgICAgIGh0bWwodGhpcy5jYXB0aW9uLCBjYXB0aW9uKTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IHRoaXMucHJlbG9hZDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZEl0ZW0odGhpcy5nZXRJbmRleChpICsgaikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRJdGVtKHRoaXMuZ2V0SW5kZXgoaSAtIGopKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgbmFtZTogJ2l0ZW1zaG93bicsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSB0aGlzLiRwcm9wcy5kcmFnZ2FibGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdpdGVtbG9hZCcsXG5cbiAgICAgICAgICAgIGhhbmRsZXIoXywgaXRlbSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qge3NvdXJjZSwgdHlwZSwgYWx0fSA9IGl0ZW07XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldEl0ZW0oaXRlbSwgJzxzcGFuIHVrLXNwaW5uZXI+PC9zcGFuPicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBtYXRjaGVzO1xuXG4gICAgICAgICAgICAgICAgLy8gSW1hZ2VcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ltYWdlJyB8fCBzb3VyY2UubWF0Y2goL1xcLihqcChlKT9nfHBuZ3xnaWZ8c3ZnfHdlYnApKCR8XFw/KS9pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGdldEltYWdlKHNvdXJjZSkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZyA9PiB0aGlzLnNldEl0ZW0oaXRlbSwgYDxpbWcgd2lkdGg9XCIke2ltZy53aWR0aH1cIiBoZWlnaHQ9XCIke2ltZy5oZWlnaHR9XCIgc3JjPVwiJHtzb3VyY2V9XCIgYWx0PVwiJHthbHQgPyBhbHQgOiAnJ31cIj5gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHRoaXMuc2V0RXJyb3IoaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaWRlb1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3ZpZGVvJyB8fCBzb3VyY2UubWF0Y2goL1xcLihtcDR8d2VibXxvZ3YpKCR8XFw/KS9pKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZGVvID0gJChgPHZpZGVvIGNvbnRyb2xzIHBsYXlzaW5saW5lJHtpdGVtLnBvc3RlciA/IGAgcG9zdGVyPVwiJHtpdGVtLnBvc3Rlcn1cImAgOiAnJ30gdWstdmlkZW89XCIke3RoaXMudmlkZW9BdXRvcGxheX1cIj48L3ZpZGVvPmApO1xuICAgICAgICAgICAgICAgICAgICBhdHRyKHZpZGVvLCAnc3JjJywgc291cmNlKTtcblxuICAgICAgICAgICAgICAgICAgICBvbmNlKHZpZGVvLCAnZXJyb3IgbG9hZGVkbWV0YWRhdGEnLCB0eXBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvcihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cih2aWRlbywge3dpZHRoOiB2aWRlby52aWRlb1dpZHRoLCBoZWlnaHQ6IHZpZGVvLnZpZGVvSGVpZ2h0fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sIHZpZGVvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWZyYW1lXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnaWZyYW1lJyB8fCBzb3VyY2UubWF0Y2goL1xcLihodG1sfHBocCkoJHxcXD8pL2kpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sIGA8aWZyYW1lIGNsYXNzPVwidWstbGlnaHRib3gtaWZyYW1lXCIgc3JjPVwiJHtzb3VyY2V9XCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPmApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFlvdVR1YmVcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChtYXRjaGVzID0gc291cmNlLm1hdGNoKC9cXC9cXC8uKj95b3V0dWJlKC1ub2Nvb2tpZSk/XFwuW2Etel0rXFwvd2F0Y2hcXD92PShbXiZcXHNdKykvKSB8fCBzb3VyY2UubWF0Y2goLygpeW91dHVcXC5iZVxcLyguKikvKSkpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBbLCAsIGlkXSA9IG1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldElmcmFtZSA9ICh3aWR0aCA9IDY0MCwgaGVpZ2h0ID0gNDUwKSA9PiB0aGlzLnNldEl0ZW0oaXRlbSwgZ2V0SWZyYW1lKGBodHRwczovL3d3dy55b3V0dWJlJHttYXRjaGVzWzFdIHx8ICcnfS5jb20vZW1iZWQvJHtpZH1gLCB3aWR0aCwgaGVpZ2h0LCB0aGlzLnZpZGVvQXV0b3BsYXkpKTtcblxuICAgICAgICAgICAgICAgICAgICBnZXRJbWFnZShgaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvJHtpZH0vbWF4cmVzZGVmYXVsdC5qcGdgKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHt3aWR0aCwgaGVpZ2h0fSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlvdVR1YmUgZGVmYXVsdCA0MDQgdGh1bWIsIGZhbGwgYmFjayB0byBsb3cgcmVzb2x1dGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gMTIwICYmIGhlaWdodCA9PT0gOTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0SW1hZ2UoYGh0dHBzOi8vaW1nLnlvdXR1YmUuY29tL3ZpLyR7aWR9LzAuanBnYCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh7d2lkdGgsIGhlaWdodH0pID0+IHNldElmcmFtZSh3aWR0aCwgaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldElmcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldElmcmFtZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SWZyYW1lXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVmltZW9cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChtYXRjaGVzID0gc291cmNlLm1hdGNoKC8oXFwvXFwvLio/KXZpbWVvXFwuW2Etel0rXFwvKFswLTldKykuKj8vKSkpIHtcblxuICAgICAgICAgICAgICAgICAgICBhamF4KGBodHRwczovL3ZpbWVvLmNvbS9hcGkvb2VtYmVkLmpzb24/bWF4d2lkdGg9MTkyMCZ1cmw9JHtlbmNvZGVVUkkoc291cmNlKX1gLCB7cmVzcG9uc2VUeXBlOiAnanNvbicsIHdpdGhDcmVkZW50aWFsczogZmFsc2V9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHtyZXNwb25zZToge2hlaWdodCwgd2lkdGh9fSkgPT4gdGhpcy5zZXRJdGVtKGl0ZW0sIGdldElmcmFtZShgaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyR7bWF0Y2hlc1syXX1gLCB3aWR0aCwgaGVpZ2h0LCB0aGlzLnZpZGVvQXV0b3BsYXkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLnNldEVycm9yKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgXSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBsb2FkSXRlbShpbmRleCA9IHRoaXMuaW5kZXgpIHtcblxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0SXRlbShpbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdpdGVtbG9hZCcsIFtpdGVtXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0SXRlbShpbmRleCA9IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2luZGV4XSB8fCB7fTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRJdGVtKGl0ZW0sIGNvbnRlbnQpIHtcbiAgICAgICAgICAgIGFzc2lnbihpdGVtLCB7Y29udGVudH0pO1xuICAgICAgICAgICAgY29uc3QgZWwgPSBodG1sKHRoaXMuc2xpZGVzW3RoaXMuaXRlbXMuaW5kZXhPZihpdGVtKV0sIGNvbnRlbnQpO1xuICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2l0ZW1sb2FkZWQnLCBbdGhpcywgZWxdKTtcbiAgICAgICAgICAgIHRoaXMuJHVwZGF0ZShlbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RXJyb3IoaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5zZXRJdGVtKGl0ZW0sICc8c3BhbiB1ay1pY29uPVwiaWNvbjogYm9sdDsgcmF0aW86IDJcIj48L3NwYW4+Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0NvbnRyb2xzKCkge1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jb250cm9sc1RpbWVyKTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHNUaW1lciA9IHNldFRpbWVvdXQodGhpcy5oaWRlQ29udHJvbHMsIHRoaXMuZGVsYXlDb250cm9scyk7XG5cbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLCAndWstYWN0aXZlJywgJ3VrLXRyYW5zaXRpb24tYWN0aXZlJyk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlQ29udHJvbHMoKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgJ3VrLWFjdGl2ZScsICd1ay10cmFuc2l0aW9uLWFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIGdldElmcmFtZShzcmMsIHdpZHRoLCBoZWlnaHQsIGF1dG9wbGF5KSB7XG4gICAgcmV0dXJuIGA8aWZyYW1lIHNyYz1cIiR7c3JjfVwiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke2hlaWdodH1cIiBzdHlsZT1cIm1heC13aWR0aDogMTAwJTsgYm94LXNpemluZzogYm9yZGVyLWJveDtcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4gdWstdmlkZW89XCJhdXRvcGxheTogJHthdXRvcGxheX1cIiB1ay1yZXNwb25zaXZlPjwvaWZyYW1lPmA7XG59XG4iLCJpbXBvcnQgTGlnaHRib3hQYW5lbCBmcm9tICcuL2xpZ2h0Ym94LXBhbmVsJztcbmltcG9ydCB7JCQsIGFzc2lnbiwgZGF0YSwgZmluZEluZGV4LCBvbiwgdW5pcXVlQnl9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBpbnN0YWxsLFxuXG4gICAgcHJvcHM6IHt0b2dnbGU6IFN0cmluZ30sXG5cbiAgICBkYXRhOiB7dG9nZ2xlOiAnYSd9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICB0b2dnbGVzOiB7XG5cbiAgICAgICAgICAgIGdldCh7dG9nZ2xlfSwgJGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkKHRvZ2dsZSwgJGVsKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdhdGNoKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaXRlbXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5pcXVlQnkodGhpcy50b2dnbGVzLm1hcCh0b0l0ZW0pLCAnc291cmNlJyk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBkaXNjb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdjbGljaycsXG5cbiAgICAgICAgICAgIGRlbGVnYXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLnRvZ2dsZX06bm90KC51ay1kaXNhYmxlZClgO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNyYyA9IGRhdGEoZS5jdXJyZW50LCAnaHJlZicpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyhmaW5kSW5kZXgodGhpcy5pdGVtcywgKHtzb3VyY2V9KSA9PiBzb3VyY2UgPT09IHNyYykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIF0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2hvdyhpbmRleCkge1xuXG4gICAgICAgICAgICB0aGlzLnBhbmVsID0gdGhpcy5wYW5lbCB8fCB0aGlzLiRjcmVhdGUoJ2xpZ2h0Ym94UGFuZWwnLCBhc3NpZ24oe30sIHRoaXMuJHByb3BzLCB7aXRlbXM6IHRoaXMuaXRlbXN9KSk7XG5cbiAgICAgICAgICAgIG9uKHRoaXMucGFuZWwuJGVsLCAnaGlkZGVuJywgKCkgPT4gdGhpcy5wYW5lbCA9IGZhbHNlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFuZWwuc2hvdyhpbmRleCk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlKCkge1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYW5lbCAmJiB0aGlzLnBhbmVsLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIGluc3RhbGwoVUlraXQsIExpZ2h0Ym94KSB7XG5cbiAgICBpZiAoIVVJa2l0LmxpZ2h0Ym94UGFuZWwpIHtcbiAgICAgICAgVUlraXQuY29tcG9uZW50KCdsaWdodGJveFBhbmVsJywgTGlnaHRib3hQYW5lbCk7XG4gICAgfVxuXG4gICAgYXNzaWduKFxuICAgICAgICBMaWdodGJveC5wcm9wcyxcbiAgICAgICAgVUlraXQuY29tcG9uZW50KCdsaWdodGJveFBhbmVsJykub3B0aW9ucy5wcm9wc1xuICAgICk7XG5cbn1cblxuZnVuY3Rpb24gdG9JdGVtKGVsKSB7XG4gICAgcmV0dXJuIFsnaHJlZicsICdjYXB0aW9uJywgJ3R5cGUnLCAncG9zdGVyJywgJ2FsdCddLnJlZHVjZSgob2JqLCBhdHRyKSA9PiB7XG4gICAgICAgIG9ialthdHRyID09PSAnaHJlZicgPyAnc291cmNlJyA6IGF0dHJdID0gZGF0YShlbCwgYXR0cik7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSwge30pO1xufVxuIiwiaW1wb3J0IHthcHBlbmQsIGFwcGx5LCBjbG9zZXN0LCBjc3MsIHBvaW50ZXJFbnRlciwgcG9pbnRlckxlYXZlLCByZW1vdmUsIHN0YXJ0c1dpdGgsIHRvRmxvYXQsIFRyYW5zaXRpb24sIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5jb25zdCBjb250YWluZXJzID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGZ1bmN0aW9uYWw6IHRydWUsXG5cbiAgICBhcmdzOiBbJ21lc3NhZ2UnLCAnc3RhdHVzJ10sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgICBzdGF0dXM6ICcnLFxuICAgICAgICB0aW1lb3V0OiA1MDAwLFxuICAgICAgICBncm91cDogbnVsbCxcbiAgICAgICAgcG9zOiAndG9wLWNlbnRlcicsXG4gICAgICAgIGNsc0Nsb3NlOiAndWstbm90aWZpY2F0aW9uLWNsb3NlJyxcbiAgICAgICAgY2xzTXNnOiAndWstbm90aWZpY2F0aW9uLW1lc3NhZ2UnXG4gICAgfSxcblxuICAgIGluc3RhbGwsXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIG1hcmdpblByb3Aoe3Bvc30pIHtcbiAgICAgICAgICAgIHJldHVybiBgbWFyZ2luJHtzdGFydHNXaXRoKHBvcywgJ3RvcCcpID8gJ1RvcCcgOiAnQm90dG9tJ31gO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0YXJ0UHJvcHMoKSB7XG4gICAgICAgICAgICByZXR1cm4ge29wYWNpdHk6IDAsIFt0aGlzLm1hcmdpblByb3BdOiAtdGhpcy4kZWwub2Zmc2V0SGVpZ2h0fTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGNyZWF0ZWQoKSB7XG5cbiAgICAgICAgaWYgKCFjb250YWluZXJzW3RoaXMucG9zXSkge1xuICAgICAgICAgICAgY29udGFpbmVyc1t0aGlzLnBvc10gPSBhcHBlbmQodGhpcy4kY29udGFpbmVyLCBgPGRpdiBjbGFzcz1cInVrLW5vdGlmaWNhdGlvbiB1ay1ub3RpZmljYXRpb24tJHt0aGlzLnBvc31cIj48L2Rpdj5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNzcyhjb250YWluZXJzW3RoaXMucG9zXSwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcblxuICAgICAgICB0aGlzLiRtb3VudChhcHBlbmQoY29udGFpbmVyLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCIke3RoaXMuY2xzTXNnfSR7dGhpcy5zdGF0dXMgPyBgICR7dGhpcy5jbHNNc2d9LSR7dGhpcy5zdGF0dXN9YCA6ICcnfVwiPlxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiJHt0aGlzLmNsc0Nsb3NlfVwiIGRhdGEtdWstY2xvc2U+PC9hPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PiR7dGhpcy5tZXNzYWdlfTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgKSk7XG5cbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuXG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHRvRmxvYXQoY3NzKHRoaXMuJGVsLCB0aGlzLm1hcmdpblByb3ApKTtcbiAgICAgICAgVHJhbnNpdGlvbi5zdGFydChcbiAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwgdGhpcy5zdGFydFByb3BzKSxcbiAgICAgICAgICAgIHtvcGFjaXR5OiAxLCBbdGhpcy5tYXJnaW5Qcm9wXTogbWFyZ2lufVxuICAgICAgICApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2UsIHRoaXMudGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuXG4gICAgICAgIGNsaWNrKGUpIHtcbiAgICAgICAgICAgIGlmIChjbG9zZXN0KGUudGFyZ2V0LCAnYVtocmVmPVwiI1wiXSxhW2hyZWY9XCJcIl0nKSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBbcG9pbnRlckVudGVyXSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIFtwb2ludGVyTGVhdmVdKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2UsIHRoaXMudGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgY2xvc2UoaW1tZWRpYXRlKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUZuID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ2Nsb3NlJywgW3RoaXNdKTtcbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy4kZWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXJzW3RoaXMucG9zXS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKGNvbnRhaW5lcnNbdGhpcy5wb3NdLCAnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUZuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uc3RhcnQodGhpcy4kZWwsIHRoaXMuc3RhcnRQcm9wcykudGhlbihyZW1vdmVGbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gaW5zdGFsbChVSWtpdCkge1xuICAgIFVJa2l0Lm5vdGlmaWNhdGlvbi5jbG9zZUFsbCA9IGZ1bmN0aW9uIChncm91cCwgaW1tZWRpYXRlKSB7XG4gICAgICAgIGFwcGx5KGRvY3VtZW50LmJvZHksIGVsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IFVJa2l0LmdldENvbXBvbmVudChlbCwgJ25vdGlmaWNhdGlvbicpO1xuICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbiAmJiAoIWdyb3VwIHx8IGdyb3VwID09PSBub3RpZmljYXRpb24uZ3JvdXApKSB7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmNsb3NlKGltbWVkaWF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4iLCJpbXBvcnQgTWVkaWEgZnJvbSAnLi4vbWl4aW4vbWVkaWEnO1xuaW1wb3J0IHtnZXRNYXhQYXRoTGVuZ3RofSBmcm9tICcuLi9jb3JlL3N2Zyc7XG5pbXBvcnQge2NzcywgRGltZW5zaW9ucywgZWFjaCwgaXNOdW1iZXIsIGlzU3RyaW5nLCBpc1VuZGVmaW5lZCwgc3RhcnRzV2l0aCwgdG9GbG9hdCwgdG9QeCwgdWNmaXJzdH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmNvbnN0IHByb3BzID0gWyd4JywgJ3knLCAnYmd4JywgJ2JneScsICdyb3RhdGUnLCAnc2NhbGUnLCAnY29sb3InLCAnYmFja2dyb3VuZENvbG9yJywgJ2JvcmRlckNvbG9yJywgJ29wYWNpdHknLCAnYmx1cicsICdodWUnLCAnZ3JheXNjYWxlJywgJ2ludmVydCcsICdzYXR1cmF0ZScsICdzZXBpYScsICdmb3BhY2l0eScsICdzdHJva2UnXTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbTWVkaWFdLFxuXG4gICAgcHJvcHM6IHByb3BzLnJlZHVjZSgocHJvcHMsIHByb3ApID0+IHtcbiAgICAgICAgcHJvcHNbcHJvcF0gPSAnbGlzdCc7XG4gICAgICAgIHJldHVybiBwcm9wcztcbiAgICB9LCB7fSksXG5cbiAgICBkYXRhOiBwcm9wcy5yZWR1Y2UoKGRhdGEsIHByb3ApID0+IHtcbiAgICAgICAgZGF0YVtwcm9wXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSwge30pLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBwcm9wcyhwcm9wZXJ0aWVzLCAkZWwpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHByb3BzLnJlZHVjZSgocHJvcHMsIHByb3ApID0+IHtcblxuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChwcm9wZXJ0aWVzW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaXNDb2xvciA9IHByb3AubWF0Y2goL2NvbG9yL2kpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ3NzUHJvcCA9IGlzQ29sb3IgfHwgcHJvcCA9PT0gJ29wYWNpdHknO1xuXG4gICAgICAgICAgICAgICAgbGV0IHBvcywgYmdQb3MsIGRpZmY7XG4gICAgICAgICAgICAgICAgbGV0IHN0ZXBzID0gcHJvcGVydGllc1twcm9wXS5zbGljZSgwKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0Nzc1Byb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzKCRlbCwgcHJvcCwgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdGVwcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzLnVuc2hpZnQoKHByb3AgPT09ICdzY2FsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpc0Nzc1Byb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNzcygkZWwsIHByb3ApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKSB8fCAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1bml0ID0gZ2V0VW5pdChzdGVwcywgcHJvcCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNDb2xvcikge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtjb2xvcn0gPSAkZWwuc3R5bGU7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKHN0ZXAgPT4gcGFyc2VDb2xvcigkZWwsIHN0ZXApKTtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnN0eWxlLmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0c1dpdGgocHJvcCwgJ2JnJykpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gcHJvcCA9PT0gJ2JneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKHN0ZXAgPT4gdG9QeChzdGVwLCBhdHRyLCB0aGlzLiRlbCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNzcygkZWwsIGBiYWNrZ3JvdW5kLXBvc2l0aW9uLSR7cHJvcFsyXX1gLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGJnUG9zID0gY3NzKCRlbCwgJ2JhY2tncm91bmRQb3NpdGlvbicpLnNwbGl0KCcgJylbcHJvcFsyXSA9PT0gJ3gnID8gMCA6IDFdOyAvLyBJRSAxMSBjYW4ndCByZWFkIGJhY2tncm91bmQtcG9zaXRpb24tW3h8eV1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb3ZlcnMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oLi4uc3RlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4uc3RlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG93biA9IHN0ZXBzLmluZGV4T2YobWluKSA8IHN0ZXBzLmluZGV4T2YobWF4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IG1heCAtIG1pbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAoc3RlcCA9PiBzdGVwIC0gKGRvd24gPyBtaW4gOiBtYXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGAke2Rvd24gPyAtZGlmZiA6IDB9cHhgO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IGJnUG9zO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBzdGVwcy5tYXAodG9GbG9hdCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0cm9rZScpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0ZXBzLnNvbWUoc3RlcCA9PiBzdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gZ2V0TWF4UGF0aExlbmd0aCh0aGlzLiRlbCk7XG4gICAgICAgICAgICAgICAgICAgIGNzcygkZWwsICdzdHJva2VEYXNoYXJyYXknLCBsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1bml0ID09PSAnJScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gc3RlcHMubWFwKHN0ZXAgPT4gc3RlcCAqIGxlbmd0aCAvIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHN0ZXBzLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICBwcm9wID0gJ3N0cm9rZURhc2hvZmZzZXQnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByb3BzW3Byb3BdID0ge3N0ZXBzLCB1bml0LCBwb3MsIGJnUG9zLCBkaWZmfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcblxuICAgICAgICAgICAgfSwge30pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgYmdQcm9wcygpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ2JneCcsICdiZ3knXS5maWx0ZXIoYmcgPT4gYmcgaW4gdGhpcy5wcm9wcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY292ZXJzKF8sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvdmVycygkZWwpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZGlzY29ubmVjdGVkKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5faW1hZ2U7XG4gICAgfSxcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoZGF0YSkge1xuXG4gICAgICAgICAgICBkYXRhLmFjdGl2ZSA9IHRoaXMubWF0Y2hNZWRpYTtcblxuICAgICAgICAgICAgaWYgKCFkYXRhLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkYXRhLmltYWdlICYmIHRoaXMuY292ZXJzICYmIHRoaXMuYmdQcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmMgPSBjc3ModGhpcy4kZWwsICdiYWNrZ3JvdW5kSW1hZ2UnKS5yZXBsYWNlKC9ebm9uZXx1cmxcXChbXCInXT8oLis/KVtcIiddP1xcKSQvLCAnJDEnKTtcblxuICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaW1hZ2UgPSBpbWc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbWcubmF0dXJhbFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4gdGhpcy4kZW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHtpbWFnZX0gPSBkYXRhO1xuXG4gICAgICAgICAgICBpZiAoIWltYWdlIHx8ICFpbWFnZS5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRpbUVsID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLiRlbC5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuJGVsLm9mZnNldEhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGRpbUltYWdlID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBpbWFnZS5uYXR1cmFsV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpbWFnZS5uYXR1cmFsSGVpZ2h0XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgZGltID0gRGltZW5zaW9ucy5jb3ZlcihkaW1JbWFnZSwgZGltRWwpO1xuXG4gICAgICAgICAgICB0aGlzLmJnUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHtkaWZmLCBiZ1Bvcywgc3RlcHN9ID0gdGhpcy5wcm9wc1twcm9wXTtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gcHJvcCA9PT0gJ2JneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGRpbVthdHRyXSAtIGRpbUVsW2F0dHJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNwYW4gPCBkaWZmKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpbUVsW2F0dHJdID0gZGltW2F0dHJdICsgZGlmZiAtIHNwYW47XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcGFuID4gZGlmZikge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc1BlcmNlbnRhZ2UgPSBkaW1FbFthdHRyXSAvIHRvUHgoYmdQb3MsIGF0dHIsIHRoaXMuJGVsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zUGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wc1twcm9wXS5zdGVwcyA9IHN0ZXBzLm1hcChzdGVwID0+IHN0ZXAgLSAoc3BhbiAtIGRpZmYpIC8gcG9zUGVyY2VudGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaW0gPSBEaW1lbnNpb25zLmNvdmVyKGRpbUltYWdlLCBkaW1FbCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGF0YS5kaW0gPSBkaW07XG4gICAgICAgIH0sXG5cbiAgICAgICAgd3JpdGUoe2RpbSwgYWN0aXZlfSkge1xuXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGNzcyh0aGlzLiRlbCwge2JhY2tncm91bmRTaXplOiAnJywgYmFja2dyb3VuZFJlcGVhdDogJyd9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpbSAmJiBjc3ModGhpcy4kZWwsIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogYCR7ZGltLndpZHRofXB4ICR7ZGltLmhlaWdodH1weGAsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgZWFjaCh0aGlzLmdldENzcygwKSwgKF8sIHByb3ApID0+IGNzcyh0aGlzLiRlbCwgcHJvcCwgJycpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDc3MocGVyY2VudCkge1xuXG4gICAgICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChjc3MsIHByb3ApID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCB7c3RlcHMsIHVuaXQsIHBvc30gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFZhbHVlKHN0ZXBzLCBwZXJjZW50KTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRyYW5zZm9ybXNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3knOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSArPSBgIHRyYW5zbGF0ZSR7dWNmaXJzdChwcm9wKX0oJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0Zsb2F0KHZhbHVlKS50b0ZpeGVkKHVuaXQgPT09ICdweCcgPyAwIDogMilcbiAgICAgICAgICAgICAgICAgICAgICAgIH0ke3VuaXR9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgJ2RlZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MudHJhbnNmb3JtICs9IGAgcm90YXRlKCR7dmFsdWUgKyB1bml0fSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gKz0gYCBzY2FsZSgke3ZhbHVlfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYmcgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmd5JzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmd4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1tgYmFja2dyb3VuZC1wb3NpdGlvbi0ke3Byb3BbMl19YF0gPSBgY2FsYygke3Bvc30gKyAke3ZhbHVlfXB4KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb2xvclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xvcic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmRDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvcmRlckNvbG9yJzoge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbc3RhcnQsIGVuZCwgcF0gPSBnZXRTdGVwKHN0ZXBzLCBwZXJjZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzW3Byb3BdID0gYHJnYmEoJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydC5tYXAoKHZhbHVlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBwICogKGVuZFtpXSAtIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IDMgPyB0b0Zsb2F0KHZhbHVlKSA6IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignLCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDU1MgRmlsdGVyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsdXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5maWx0ZXIgKz0gYCBibHVyKCR7dmFsdWUgKyB1bml0fSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2h1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0ID0gdW5pdCB8fCAnZGVnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5maWx0ZXIgKz0gYCBodWUtcm90YXRlKCR7dmFsdWUgKyB1bml0fSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZvcGFjaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQgPSB1bml0IHx8ICclJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5maWx0ZXIgKz0gYCBvcGFjaXR5KCR7dmFsdWUgKyB1bml0fSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dyYXlzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ludmVydCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NhdHVyYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VwaWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHVuaXQgfHwgJyUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzLmZpbHRlciArPSBgICR7cHJvcH0oJHt2YWx1ZSArIHVuaXR9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1twcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjc3M7XG5cbiAgICAgICAgICAgIH0sIHt0cmFuc2Zvcm06ICcnLCBmaWx0ZXI6ICcnfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5mdW5jdGlvbiBwYXJzZUNvbG9yKGVsLCBjb2xvcikge1xuICAgIHJldHVybiBjc3MoY3NzKGVsLCAnY29sb3InLCBjb2xvciksICdjb2xvcicpXG4gICAgICAgIC5zcGxpdCgvWygpLF0vZylcbiAgICAgICAgLnNsaWNlKDEsIC0xKVxuICAgICAgICAuY29uY2F0KDEpXG4gICAgICAgIC5zbGljZSgwLCA0KVxuICAgICAgICAubWFwKHRvRmxvYXQpO1xufVxuXG5mdW5jdGlvbiBnZXRTdGVwKHN0ZXBzLCBwZXJjZW50KSB7XG4gICAgY29uc3QgY291bnQgPSBzdGVwcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5taW4oTWF0aC5mbG9vcihjb3VudCAqIHBlcmNlbnQpLCBjb3VudCAtIDEpO1xuICAgIGNvbnN0IHN0ZXAgPSBzdGVwcy5zbGljZShpbmRleCwgaW5kZXggKyAyKTtcblxuICAgIHN0ZXAucHVzaChwZXJjZW50ID09PSAxID8gMSA6IHBlcmNlbnQgJSAoMSAvIGNvdW50KSAqIGNvdW50KTtcblxuICAgIHJldHVybiBzdGVwO1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZShzdGVwcywgcGVyY2VudCwgZGlnaXRzID0gMikge1xuICAgIGNvbnN0IFtzdGFydCwgZW5kLCBwXSA9IGdldFN0ZXAoc3RlcHMsIHBlcmNlbnQpO1xuICAgIHJldHVybiAoaXNOdW1iZXIoc3RhcnQpXG4gICAgICAgID8gc3RhcnQgKyBNYXRoLmFicyhzdGFydCAtIGVuZCkgKiBwICogKHN0YXJ0IDwgZW5kID8gMSA6IC0xKVxuICAgICAgICA6ICtlbmRcbiAgICApLnRvRml4ZWQoZGlnaXRzKTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5pdChzdGVwcykge1xuICAgIHJldHVybiBzdGVwcy5yZWR1Y2UoKHVuaXQsIHN0ZXApID0+IGlzU3RyaW5nKHN0ZXApICYmIHN0ZXAucmVwbGFjZSgvLXxcXGQvZywgJycpLnRyaW0oKSB8fCB1bml0LCAnJyk7XG59XG5cbmZ1bmN0aW9uIGNvdmVycyhlbCkge1xuICAgIGNvbnN0IHtiYWNrZ3JvdW5kU2l6ZX0gPSBlbC5zdHlsZTtcbiAgICBjb25zdCBjb3ZlcnMgPSBjc3MoY3NzKGVsLCAnYmFja2dyb3VuZFNpemUnLCAnJyksICdiYWNrZ3JvdW5kU2l6ZScpID09PSAnY292ZXInO1xuICAgIGVsLnN0eWxlLmJhY2tncm91bmRTaXplID0gYmFja2dyb3VuZFNpemU7XG4gICAgcmV0dXJuIGNvdmVycztcbn1cbiIsImltcG9ydCBQYXJhbGxheCBmcm9tICcuLi9taXhpbi9wYXJhbGxheCc7XG5pbXBvcnQge2NsYW1wLCBjc3MsIHNjcm9sbGVkT3ZlciwgcXVlcnl9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtQYXJhbGxheF0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICB0YXJnZXQ6IFN0cmluZyxcbiAgICAgICAgdmlld3BvcnQ6IE51bWJlcixcbiAgICAgICAgZWFzaW5nOiBOdW1iZXJcbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICB0YXJnZXQ6IGZhbHNlLFxuICAgICAgICB2aWV3cG9ydDogMSxcbiAgICAgICAgZWFzaW5nOiAxXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgdGFyZ2V0KHt0YXJnZXR9LCAkZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRPZmZzZXRFbGVtZW50KHRhcmdldCAmJiBxdWVyeSh0YXJnZXQsICRlbCkgfHwgJGVsKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoe3BlcmNlbnQsIGFjdGl2ZX0sIHR5cGUpIHtcblxuICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdzY3JvbGwnKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcHJldiA9IHBlcmNlbnQ7XG4gICAgICAgICAgICBwZXJjZW50ID0gZWFzZShzY3JvbGxlZE92ZXIodGhpcy50YXJnZXQpIC8gKHRoaXMudmlld3BvcnQgfHwgMSksIHRoaXMuZWFzaW5nKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50LFxuICAgICAgICAgICAgICAgIHN0eWxlOiBwcmV2ICE9PSBwZXJjZW50ID8gdGhpcy5nZXRDc3MocGVyY2VudCkgOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZSh7c3R5bGUsIGFjdGl2ZX0pIHtcblxuICAgICAgICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdHlsZSAmJiBjc3ModGhpcy4kZWwsIHN0eWxlKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50czogWydzY3JvbGwnLCAncmVzaXplJ11cbiAgICB9XG5cbn07XG5cbmZ1bmN0aW9uIGVhc2UocGVyY2VudCwgZWFzaW5nKSB7XG4gICAgcmV0dXJuIGNsYW1wKHBlcmNlbnQgKiAoMSAtIChlYXNpbmcgLSBlYXNpbmcgKiBwZXJjZW50KSkpO1xufVxuXG4vLyBTVkcgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgZnJvbSBIVE1MRWxlbWVudFxuZnVuY3Rpb24gZ2V0T2Zmc2V0RWxlbWVudChlbCkge1xuICAgIHJldHVybiBlbFxuICAgICAgICA/ICdvZmZzZXRUb3AnIGluIGVsXG4gICAgICAgICAgICA/IGVsXG4gICAgICAgICAgICA6IGdldE9mZnNldEVsZW1lbnQoZWwucGFyZW50Tm9kZSlcbiAgICAgICAgOiBkb2N1bWVudC5ib2R5O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgdXBkYXRlOiB7XG5cbiAgICAgICAgd3JpdGUoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCB8fCB0aGlzLmRyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0VmFsaWRJbmRleCh0aGlzLmluZGV4KTtcblxuICAgICAgICAgICAgaWYgKCF+dGhpcy5wcmV2SW5kZXggfHwgdGhpcy5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coaW5kZXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXZlbnRzOiBbJ3Jlc2l6ZSddXG5cbiAgICB9XG5cbn07XG4iLCJpbXBvcnQge3RyYW5zbGF0ZX0gZnJvbSAnLi4vLi4vbWl4aW4vaW50ZXJuYWwvc2xpZGVzaG93LWFuaW1hdGlvbnMnO1xuaW1wb3J0IHtjaGlsZHJlbiwgY2xhbXAsIGNyZWF0ZUV2ZW50LCBjc3MsIERlZmVycmVkLCBpbmNsdWRlcywgaW5kZXgsIGlzUnRsLCBub29wLCBvZmZzZXQsIHBvc2l0aW9uLCBzb3J0QnksIFRyYW5zaXRpb24sIHRyaWdnZXJ9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocHJldiwgbmV4dCwgZGlyLCB7Y2VudGVyLCBlYXNpbmcsIGxpc3R9KSB7XG5cbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgY29uc3QgZnJvbSA9IHByZXZcbiAgICAgICAgPyBnZXRMZWZ0KHByZXYsIGxpc3QsIGNlbnRlcilcbiAgICAgICAgOiBnZXRMZWZ0KG5leHQsIGxpc3QsIGNlbnRlcikgKyBvZmZzZXQobmV4dCkud2lkdGggKiBkaXI7XG4gICAgY29uc3QgdG8gPSBuZXh0XG4gICAgICAgID8gZ2V0TGVmdChuZXh0LCBsaXN0LCBjZW50ZXIpXG4gICAgICAgIDogZnJvbSArIG9mZnNldChwcmV2KS53aWR0aCAqIGRpciAqIChpc1J0bCA/IC0xIDogMSk7XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGRpcixcblxuICAgICAgICBzaG93KGR1cmF0aW9uLCBwZXJjZW50ID0gMCwgbGluZWFyKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHRpbWluZyA9IGxpbmVhciA/ICdsaW5lYXInIDogZWFzaW5nO1xuICAgICAgICAgICAgZHVyYXRpb24gLT0gTWF0aC5yb3VuZChkdXJhdGlvbiAqIGNsYW1wKHBlcmNlbnQsIC0xLCAxKSk7XG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKHBlcmNlbnQpO1xuXG4gICAgICAgICAgICBwcmV2ICYmIHRoaXMudXBkYXRlVHJhbnNsYXRlcygpO1xuICAgICAgICAgICAgcGVyY2VudCA9IHByZXYgPyBwZXJjZW50IDogY2xhbXAocGVyY2VudCwgMCwgMSk7XG4gICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKHRoaXMuZ2V0SXRlbUluKCksICdpdGVtaW4nLCB7cGVyY2VudCwgZHVyYXRpb24sIHRpbWluZywgZGlyfSk7XG4gICAgICAgICAgICBwcmV2ICYmIHRyaWdnZXJVcGRhdGUodGhpcy5nZXRJdGVtSW4odHJ1ZSksICdpdGVtb3V0Jywge3BlcmNlbnQ6IDEgLSBwZXJjZW50LCBkdXJhdGlvbiwgdGltaW5nLCBkaXJ9KTtcblxuICAgICAgICAgICAgVHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIC5zdGFydChsaXN0LCB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLXRvICogKGlzUnRsID8gLTEgOiAxKSwgJ3B4Jyl9LCBkdXJhdGlvbiwgdGltaW5nKVxuICAgICAgICAgICAgICAgIC50aGVuKGRlZmVycmVkLnJlc29sdmUsIG5vb3ApO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHN0b3AoKSB7XG4gICAgICAgICAgICByZXR1cm4gVHJhbnNpdGlvbi5zdG9wKGxpc3QpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKGxpc3QpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgY3NzKGxpc3QsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9yd2FyZChkdXJhdGlvbiwgcGVyY2VudCA9IHRoaXMucGVyY2VudCgpKSB7XG4gICAgICAgICAgICBUcmFuc2l0aW9uLmNhbmNlbChsaXN0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3coZHVyYXRpb24sIHBlcmNlbnQsIHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyYW5zbGF0ZShwZXJjZW50KSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5nZXREaXN0YW5jZSgpICogZGlyICogKGlzUnRsID8gLTEgOiAxKTtcblxuICAgICAgICAgICAgY3NzKGxpc3QsICd0cmFuc2Zvcm0nLCB0cmFuc2xhdGUoY2xhbXAoXG4gICAgICAgICAgICAgICAgLXRvICsgKGRpc3RhbmNlIC0gZGlzdGFuY2UgKiBwZXJjZW50KSxcbiAgICAgICAgICAgICAgICAtZ2V0V2lkdGgobGlzdCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0KGxpc3QpLndpZHRoXG4gICAgICAgICAgICApICogKGlzUnRsID8gLTEgOiAxKSwgJ3B4JykpO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYW5zbGF0ZXMoKTtcblxuICAgICAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gY2xhbXAocGVyY2VudCwgLTEsIDEpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJVcGRhdGUodGhpcy5nZXRJdGVtSW4oKSwgJ2l0ZW10cmFuc2xhdGVpbicsIHtwZXJjZW50LCBkaXJ9KTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKHRoaXMuZ2V0SXRlbUluKHRydWUpLCAnaXRlbXRyYW5zbGF0ZW91dCcsIHtwZXJjZW50OiAxIC0gcGVyY2VudCwgZGlyfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBwZXJjZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKChjc3MobGlzdCwgJ3RyYW5zZm9ybScpLnNwbGl0KCcsJylbNF0gKiAoaXNSdGwgPyAtMSA6IDEpICsgZnJvbSkgLyAodG8gLSBmcm9tKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RGlzdGFuY2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModG8gLSBmcm9tKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRJdGVtSW4ob3V0ID0gZmFsc2UpIHtcblxuICAgICAgICAgICAgY29uc3QgYWN0aXZlcyA9IHRoaXMuZ2V0QWN0aXZlcygpO1xuICAgICAgICAgICAgY29uc3QgYWxsID0gc29ydEJ5KHNsaWRlcyhsaXN0KSwgJ29mZnNldExlZnQnKTtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBpbmRleChhbGwsIGFjdGl2ZXNbZGlyICogKG91dCA/IC0xIDogMSkgPiAwID8gYWN0aXZlcy5sZW5ndGggLSAxIDogMF0pO1xuXG4gICAgICAgICAgICByZXR1cm4gfmkgJiYgYWxsW2kgKyAocHJldiAmJiAhb3V0ID8gZGlyIDogMCldO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0QWN0aXZlcygpIHtcblxuICAgICAgICAgICAgY29uc3QgbGVmdCA9IGdldExlZnQocHJldiB8fCBuZXh0LCBsaXN0LCBjZW50ZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gc29ydEJ5KHNsaWRlcyhsaXN0KS5maWx0ZXIoc2xpZGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlTGVmdCA9IGdldEVsTGVmdChzbGlkZSwgbGlzdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlTGVmdCA+PSBsZWZ0ICYmIHNsaWRlTGVmdCArIG9mZnNldChzbGlkZSkud2lkdGggPD0gb2Zmc2V0KGxpc3QpLndpZHRoICsgbGVmdDtcbiAgICAgICAgICAgIH0pLCAnb2Zmc2V0TGVmdCcpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlVHJhbnNsYXRlcygpIHtcblxuICAgICAgICAgICAgY29uc3QgYWN0aXZlcyA9IHRoaXMuZ2V0QWN0aXZlcygpO1xuXG4gICAgICAgICAgICBzbGlkZXMobGlzdCkuZm9yRWFjaChzbGlkZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSBpbmNsdWRlcyhhY3RpdmVzLCBzbGlkZSk7XG5cbiAgICAgICAgICAgICAgICB0cmlnZ2VyVXBkYXRlKHNsaWRlLCBgaXRlbXRyYW5zbGF0ZSR7aXNBY3RpdmUgPyAnaW4nIDogJ291dCd9YCwge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50OiBpc0FjdGl2ZSA/IDEgOiAwLFxuICAgICAgICAgICAgICAgICAgICBkaXI6IHNsaWRlLm9mZnNldExlZnQgPD0gbmV4dC5vZmZzZXRMZWZ0ID8gMSA6IC0xXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxufVxuXG5mdW5jdGlvbiBnZXRMZWZ0KGVsLCBsaXN0LCBjZW50ZXIpIHtcblxuICAgIGNvbnN0IGxlZnQgPSBnZXRFbExlZnQoZWwsIGxpc3QpO1xuXG4gICAgcmV0dXJuIGNlbnRlclxuICAgICAgICA/IGxlZnQgLSBjZW50ZXJFbChlbCwgbGlzdClcbiAgICAgICAgOiBNYXRoLm1pbihsZWZ0LCBnZXRNYXgobGlzdCkpO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXgobGlzdCkge1xuICAgIHJldHVybiBNYXRoLm1heCgwLCBnZXRXaWR0aChsaXN0KSAtIG9mZnNldChsaXN0KS53aWR0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXaWR0aChsaXN0KSB7XG4gICAgcmV0dXJuIHNsaWRlcyhsaXN0KS5yZWR1Y2UoKHJpZ2h0LCBlbCkgPT4gb2Zmc2V0KGVsKS53aWR0aCArIHJpZ2h0LCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1heFdpZHRoKGxpc3QpIHtcbiAgICByZXR1cm4gc2xpZGVzKGxpc3QpLnJlZHVjZSgocmlnaHQsIGVsKSA9PiBNYXRoLm1heChyaWdodCwgb2Zmc2V0KGVsKS53aWR0aCksIDApO1xufVxuXG5mdW5jdGlvbiBjZW50ZXJFbChlbCwgbGlzdCkge1xuICAgIHJldHVybiBvZmZzZXQobGlzdCkud2lkdGggLyAyIC0gb2Zmc2V0KGVsKS53aWR0aCAvIDI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbExlZnQoZWwsIGxpc3QpIHtcbiAgICByZXR1cm4gKHBvc2l0aW9uKGVsKS5sZWZ0ICsgKGlzUnRsID8gb2Zmc2V0KGVsKS53aWR0aCAtIG9mZnNldChsaXN0KS53aWR0aCA6IDApKSAqIChpc1J0bCA/IC0xIDogMSk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJVcGRhdGUoZWwsIHR5cGUsIGRhdGEpIHtcbiAgICB0cmlnZ2VyKGVsLCBjcmVhdGVFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRhdGEpKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVzKGxpc3QpIHtcbiAgICByZXR1cm4gY2hpbGRyZW4obGlzdCk7XG59XG4iLCJpbXBvcnQgQ2xhc3MgZnJvbSAnLi4vbWl4aW4vY2xhc3MnO1xuaW1wb3J0IFNsaWRlciwge3NwZWVkVXB9IGZyb20gJy4uL21peGluL3NsaWRlcic7XG5pbXBvcnQgU2xpZGVyUmVhY3RpdmUgZnJvbSAnLi4vbWl4aW4vc2xpZGVyLXJlYWN0aXZlJztcbmltcG9ydCBUcmFuc2l0aW9uZXIsIHtnZXRFbExlZnQsIGdldFdpZHRoLCBnZXRNYXgsIGdldE1heFdpZHRofSBmcm9tICcuL2ludGVybmFsL3NsaWRlci10cmFuc2l0aW9uZXInO1xuaW1wb3J0IHskLCAkJCwgYWRkQ2xhc3MsIGNzcywgZGF0YSwgaW5jbHVkZXMsIGlzRW1wdHksIGlzTnVtZXJpYywgaXNVbmRlZmluZWQsIGxhc3QsIG9mZnNldCwgdG9nZ2xlQ2xhc3MsIHRvRmxvYXR9IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtDbGFzcywgU2xpZGVyLCBTbGlkZXJSZWFjdGl2ZV0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBjZW50ZXI6IEJvb2xlYW4sXG4gICAgICAgIHNldHM6IEJvb2xlYW5cbiAgICB9LFxuXG4gICAgZGF0YToge1xuICAgICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgICBzZXRzOiBmYWxzZSxcbiAgICAgICAgYXR0ckl0ZW06ICd1ay1zbGlkZXItaXRlbScsXG4gICAgICAgIHNlbExpc3Q6ICcudWstc2xpZGVyLWl0ZW1zJyxcbiAgICAgICAgc2VsTmF2OiAnLnVrLXNsaWRlci1uYXYnLFxuICAgICAgICBjbHNDb250YWluZXI6ICd1ay1zbGlkZXItY29udGFpbmVyJyxcbiAgICAgICAgVHJhbnNpdGlvbmVyXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgYXZnV2lkdGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGgodGhpcy5saXN0KSAvIHRoaXMubGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpbml0ZSh7ZmluaXRlfSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbml0ZSB8fCBNYXRoLmNlaWwoZ2V0V2lkdGgodGhpcy5saXN0KSkgPCBvZmZzZXQodGhpcy5saXN0KS53aWR0aCArIGdldE1heFdpZHRoKHRoaXMubGlzdCkgKyB0aGlzLmNlbnRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICBtYXhJbmRleCgpIHtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbml0ZSB8fCB0aGlzLmNlbnRlciAmJiAhdGhpcy5zZXRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3QodGhpcy5zZXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3NzKHRoaXMuc2xpZGVzLCAnb3JkZXInLCAnJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1heCA9IGdldE1heCh0aGlzLmxpc3QpO1xuICAgICAgICAgICAgbGV0IGkgPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChnZXRFbExlZnQodGhpcy5saXN0LmNoaWxkcmVuW2ldLCB0aGlzLmxpc3QpIDwgbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihpICsgMSwgdGhpcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldHMoe3NldHN9KSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gb2Zmc2V0KHRoaXMubGlzdCkud2lkdGggLyAodGhpcy5jZW50ZXIgPyAyIDogMSk7XG5cbiAgICAgICAgICAgIGxldCBsZWZ0ID0gMDtcbiAgICAgICAgICAgIGxldCBsZWZ0Q2VudGVyID0gd2lkdGg7XG4gICAgICAgICAgICBsZXQgc2xpZGVMZWZ0ID0gMDtcblxuICAgICAgICAgICAgc2V0cyA9IHNldHMgJiYgdGhpcy5zbGlkZXMucmVkdWNlKChzZXRzLCBzbGlkZSwgaSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qge3dpZHRoOiBzbGlkZVdpZHRofSA9IG9mZnNldChzbGlkZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVSaWdodCA9IHNsaWRlTGVmdCArIHNsaWRlV2lkdGg7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVSaWdodCA+IGxlZnQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2VudGVyICYmIGkgPiB0aGlzLm1heEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5tYXhJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZXMoc2V0cywgaSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY21wID0gdGhpcy5zbGlkZXNbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2VudGVyICYmIGNtcCAmJiBzbGlkZVdpZHRoIDwgbGVmdENlbnRlciAtIG9mZnNldChjbXApLndpZHRoIC8gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRDZW50ZXIgLT0gc2xpZGVXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbnRlciA9IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gc2xpZGVMZWZ0ICsgd2lkdGggKyAodGhpcy5jZW50ZXIgPyBzbGlkZVdpZHRoIC8gMiA6IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzbGlkZUxlZnQgKz0gc2xpZGVXaWR0aDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRzO1xuXG4gICAgICAgICAgICB9LCBbXSk7XG5cbiAgICAgICAgICAgIHJldHVybiAhaXNFbXB0eShzZXRzKSAmJiBzZXRzO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNpdGlvbk9wdGlvbnMoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNlbnRlcjogdGhpcy5jZW50ZXIsXG4gICAgICAgICAgICAgICAgbGlzdDogdGhpcy5saXN0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgY29ubmVjdGVkKCkge1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNDb250YWluZXIsICEkKGAuJHt0aGlzLmNsc0NvbnRhaW5lcn1gLCB0aGlzLiRlbCkpO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICB3cml0ZSgpIHtcblxuICAgICAgICAgICAgJCQoYFske3RoaXMuYXR0ckl0ZW19XSxbZGF0YS0ke3RoaXMuYXR0ckl0ZW19XWAsIHRoaXMuJGVsKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGRhdGEoZWwsIHRoaXMuYXR0ckl0ZW0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4SW5kZXggJiYgdG9nZ2xlQ2xhc3MoZWwsICd1ay1oaWRkZW4nLCBpc051bWVyaWMoaW5kZXgpICYmICh0aGlzLnNldHMgJiYgIWluY2x1ZGVzKHRoaXMuc2V0cywgdG9GbG9hdChpbmRleCkpIHx8IGluZGV4ID4gdGhpcy5tYXhJbmRleCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCAmJiAhdGhpcy5kcmFnZ2luZyAmJiAhdGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGUoMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcblxuICAgICAgICBiZWZvcmVpdGVtc2hvdyhlKSB7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5kcmFnZ2luZyAmJiB0aGlzLnNldHMgJiYgdGhpcy5zdGFjay5sZW5ndGggPCAyICYmICFpbmNsdWRlcyh0aGlzLnNldHMsIHRoaXMuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuZ2V0VmFsaWRJbmRleCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkaWZmID0gTWF0aC5hYnMoXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleFxuICAgICAgICAgICAgICAgIC0gdGhpcy5wcmV2SW5kZXhcbiAgICAgICAgICAgICAgICArICh0aGlzLmRpciA+IDAgJiYgdGhpcy5pbmRleCA8IHRoaXMucHJldkluZGV4IHx8IHRoaXMuZGlyIDwgMCAmJiB0aGlzLmluZGV4ID4gdGhpcy5wcmV2SW5kZXggPyAodGhpcy5tYXhJbmRleCArIDEpICogdGhpcy5kaXIgOiAwKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nICYmIGRpZmYgPiAxKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZmY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnNwbGljZSgxLCAwLCB0aGlzLmRpciA+IDAgPyAnbmV4dCcgOiAncHJldmlvdXMnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gc3BlZWRVcCh0aGlzLmF2Z1dpZHRoIC8gdGhpcy52ZWxvY2l0eSlcbiAgICAgICAgICAgICAgICAqIChvZmZzZXQoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyIDwgMCB8fCAhdGhpcy5zbGlkZXNbdGhpcy5wcmV2SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuc2xpZGVzW3RoaXMuaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuc2xpZGVzW3RoaXMucHJldkluZGV4XVxuICAgICAgICAgICAgICAgICkud2lkdGggLyB0aGlzLmF2Z1dpZHRoKTtcblxuICAgICAgICAgICAgdGhpcy5yZW9yZGVyKCk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBpdGVtc2hvdygpIHtcbiAgICAgICAgICAgICFpc1VuZGVmaW5lZCh0aGlzLnByZXZJbmRleCkgJiYgYWRkQ2xhc3ModGhpcy5fZ2V0VHJhbnNpdGlvbmVyKCkuZ2V0SXRlbUluKCksIHRoaXMuY2xzQWN0aXZlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpdGVtc2hvd24oKSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVzID0gdGhpcy5fZ2V0VHJhbnNpdGlvbmVyKHRoaXMuaW5kZXgpLmdldEFjdGl2ZXMoKTtcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goc2xpZGUgPT4gdG9nZ2xlQ2xhc3Moc2xpZGUsIHRoaXMuY2xzQWN0aXZlLCBpbmNsdWRlcyhhY3RpdmVzLCBzbGlkZSkpKTtcbiAgICAgICAgICAgICghdGhpcy5zZXRzIHx8IGluY2x1ZGVzKHRoaXMuc2V0cywgdG9GbG9hdCh0aGlzLmluZGV4KSkpICYmIHRoaXMuc2xpZGVzLmZvckVhY2goc2xpZGUgPT4gdG9nZ2xlQ2xhc3Moc2xpZGUsIHRoaXMuY2xzQWN0aXZhdGVkLCBpbmNsdWRlcyhhY3RpdmVzLCBzbGlkZSkpKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICByZW9yZGVyKCkge1xuXG4gICAgICAgICAgICBjc3ModGhpcy5zbGlkZXMsICdvcmRlcicsICcnKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZmluaXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZGlyID4gMCAmJiB0aGlzLnNsaWRlc1t0aGlzLnByZXZJbmRleF0gPyB0aGlzLnByZXZJbmRleCA6IHRoaXMuaW5kZXg7XG5cbiAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBpKSA9PlxuICAgICAgICAgICAgICAgIGNzcyhzbGlkZSwgJ29yZGVyJywgdGhpcy5kaXIgPiAwICYmIGkgPCBpbmRleFxuICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmRpciA8IDAgJiYgaSA+PSB0aGlzLmluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICA/IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNlbnRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuc2xpZGVzW2luZGV4XTtcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IG9mZnNldCh0aGlzLmxpc3QpLndpZHRoIC8gMiAtIG9mZnNldChuZXh0KS53aWR0aCAvIDI7XG4gICAgICAgICAgICBsZXQgaiA9IDA7XG5cbiAgICAgICAgICAgIHdoaWxlICh3aWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gdGhpcy5nZXRJbmRleCgtLWogKyBpbmRleCwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlID0gdGhpcy5zbGlkZXNbc2xpZGVJbmRleF07XG5cbiAgICAgICAgICAgICAgICBjc3Moc2xpZGUsICdvcmRlcicsIHNsaWRlSW5kZXggPiBpbmRleCA/IC0yIDogLTEpO1xuICAgICAgICAgICAgICAgIHdpZHRoIC09IG9mZnNldChzbGlkZSkud2lkdGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRWYWxpZEluZGV4KGluZGV4ID0gdGhpcy5pbmRleCwgcHJldkluZGV4ID0gdGhpcy5wcmV2SW5kZXgpIHtcblxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmdldEluZGV4KGluZGV4LCBwcmV2SW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHByZXY7XG5cbiAgICAgICAgICAgIGRvIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlcyh0aGlzLnNldHMsIGluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcHJldiA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nZXRJbmRleChpbmRleCArIHRoaXMuZGlyLCBwcmV2SW5kZXgpO1xuXG4gICAgICAgICAgICB9IHdoaWxlIChpbmRleCAhPT0gcHJldik7XG5cbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IFBhcmFsbGF4IGZyb20gJy4uL21peGluL3BhcmFsbGF4JztcbmltcG9ydCB7Y3NzLCBlbmRzV2l0aCwgbm9vcCwgcXVlcnksIFRyYW5zaXRpb259IGZyb20gJ3Vpa2l0LXV0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtQYXJhbGxheF0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIHNlbEl0ZW06ICchbGknXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaXRlbSh7c2VsSXRlbX0sICRlbCkge1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5KHNlbEl0ZW0sICRlbCk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBldmVudHM6IFtcblxuICAgICAgICB7XG5cbiAgICAgICAgICAgIG5hbWU6ICdpdGVtc2hvd24nLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBlbCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHRoaXMuZ2V0Q3NzKC41KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnaXRlbWluIGl0ZW1vdXQnLFxuXG4gICAgICAgICAgICBzZWxmOiB0cnVlLFxuXG4gICAgICAgICAgICBlbCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFuZGxlcih7dHlwZSwgZGV0YWlsOiB7cGVyY2VudCwgZHVyYXRpb24sIHRpbWluZywgZGlyfX0pIHtcblxuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHRoaXMuZ2V0Q3NzKGdldEN1cnJlbnQodHlwZSwgZGlyLCBwZXJjZW50KSkpO1xuXG4gICAgICAgICAgICAgICAgVHJhbnNpdGlvbi5zdGFydCh0aGlzLiRlbCwgdGhpcy5nZXRDc3MoaXNJbih0eXBlKVxuICAgICAgICAgICAgICAgICAgICA/IC41XG4gICAgICAgICAgICAgICAgICAgIDogZGlyID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDBcbiAgICAgICAgICAgICAgICApLCBkdXJhdGlvbiwgdGltaW5nKS5jYXRjaChub29wKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2l0aW9uY2FuY2VsZWQgdHJhbnNpdGlvbmVuZCcsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgIGVsKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdpdGVtdHJhbnNsYXRlaW4gaXRlbXRyYW5zbGF0ZW91dCcsXG5cbiAgICAgICAgICAgIHNlbGY6IHRydWUsXG5cbiAgICAgICAgICAgIGVsKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYW5kbGVyKHt0eXBlLCBkZXRhaWw6IHtwZXJjZW50LCBkaXJ9fSkge1xuICAgICAgICAgICAgICAgIFRyYW5zaXRpb24uY2FuY2VsKHRoaXMuJGVsKTtcbiAgICAgICAgICAgICAgICBjc3ModGhpcy4kZWwsIHRoaXMuZ2V0Q3NzKGdldEN1cnJlbnQodHlwZSwgZGlyLCBwZXJjZW50KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICBdXG5cbn07XG5cbmZ1bmN0aW9uIGlzSW4odHlwZSkge1xuICAgIHJldHVybiBlbmRzV2l0aCh0eXBlLCAnaW4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudCh0eXBlLCBkaXIsIHBlcmNlbnQpIHtcblxuICAgIHBlcmNlbnQgLz0gMjtcblxuICAgIHJldHVybiAhaXNJbih0eXBlKVxuICAgICAgICA/IGRpciA8IDBcbiAgICAgICAgICAgID8gcGVyY2VudFxuICAgICAgICAgICAgOiAxIC0gcGVyY2VudFxuICAgICAgICA6IGRpciA8IDBcbiAgICAgICAgICAgID8gMSAtIHBlcmNlbnRcbiAgICAgICAgICAgIDogcGVyY2VudDtcbn1cbiIsImltcG9ydCBBbmltYXRpb25zLCB7c2NhbGUzZCwgdHJhbnNsYXRlLCB0cmFuc2xhdGVkfSBmcm9tICcuLi8uLi9taXhpbi9pbnRlcm5hbC9zbGlkZXNob3ctYW5pbWF0aW9ucyc7XG5pbXBvcnQge2Fzc2lnbiwgY3NzfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduKHt9LCBBbmltYXRpb25zLCB7XG5cbiAgICBmYWRlOiB7XG5cbiAgICAgICAgc2hvdygpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge29wYWNpdHk6IDAsIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAge3pJbmRleDogLTF9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBlcmNlbnQoY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgLSBjc3MoY3VycmVudCwgJ29wYWNpdHknKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2xhdGUocGVyY2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnQsIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAge3pJbmRleDogLTF9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgc2NhbGU6IHtcblxuICAgICAgICBzaG93KCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7b3BhY2l0eTogMCwgdHJhbnNmb3JtOiBzY2FsZTNkKDEgKyAuNSksIHpJbmRleDogMH0sXG4gICAgICAgICAgICAgICAge3pJbmRleDogLTF9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBlcmNlbnQoY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgLSBjc3MoY3VycmVudCwgJ29wYWNpdHknKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2xhdGUocGVyY2VudCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7b3BhY2l0eTogMSAtIHBlcmNlbnQsIHRyYW5zZm9ybTogc2NhbGUzZCgxICsgLjUgKiBwZXJjZW50KSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICB7ekluZGV4OiAtMX1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBwdWxsOiB7XG5cbiAgICAgICAgc2hvdyhkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgzMCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKSwgekluZGV4OiAwfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoKSwgekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBlcmNlbnQoY3VycmVudCwgbmV4dCwgZGlyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgID8gMSAtIHRyYW5zbGF0ZWQobmV4dClcbiAgICAgICAgICAgICAgICA6IHRyYW5zbGF0ZWQoY3VycmVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNsYXRlKHBlcmNlbnQsIGRpcikge1xuICAgICAgICAgICAgcmV0dXJuIGRpciA8IDBcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKDMwICogcGVyY2VudCksIHpJbmRleDogLTF9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEwMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IDB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLXBlcmNlbnQgKiAxMDApLCB6SW5kZXg6IDB9LFxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoMzAgKiAoMSAtIHBlcmNlbnQpKSwgekluZGV4OiAtMX1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcHVzaDoge1xuXG4gICAgICAgIHNob3coZGlyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlyIDwgMFxuICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKCksIHpJbmRleDogLTF9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB0cmFuc2xhdGUoLTMwKSwgekluZGV4OiAtMX0sXG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgpLCB6SW5kZXg6IDB9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcblxuICAgICAgICBwZXJjZW50KGN1cnJlbnQsIG5leHQsIGRpcikge1xuICAgICAgICAgICAgcmV0dXJuIGRpciA+IDBcbiAgICAgICAgICAgICAgICA/IDEgLSB0cmFuc2xhdGVkKG5leHQpXG4gICAgICAgICAgICAgICAgOiB0cmFuc2xhdGVkKGN1cnJlbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyYW5zbGF0ZShwZXJjZW50LCBkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXIgPCAwXG4gICAgICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZShwZXJjZW50ICogMTAwKSwgekluZGV4OiAwfSxcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IC0xfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKC0zMCAqIHBlcmNlbnQpLCB6SW5kZXg6IC0xfSxcbiAgICAgICAgICAgICAgICAgICAge3RyYW5zZm9ybTogdHJhbnNsYXRlKDEwMCAqICgxIC0gcGVyY2VudCkpLCB6SW5kZXg6IDB9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59KTtcbiIsImltcG9ydCBDbGFzcyBmcm9tICcuLi9taXhpbi9jbGFzcyc7XG5pbXBvcnQgU2xpZGVzaG93IGZyb20gJy4uL21peGluL3NsaWRlc2hvdyc7XG5pbXBvcnQgQW5pbWF0aW9ucyBmcm9tICcuL2ludGVybmFsL3NsaWRlc2hvdy1hbmltYXRpb25zJztcbmltcG9ydCBTbGlkZXJSZWFjdGl2ZSBmcm9tICcuLi9taXhpbi9zbGlkZXItcmVhY3RpdmUnO1xuaW1wb3J0IHtib3hNb2RlbEFkanVzdCwgY3NzfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQ2xhc3MsIFNsaWRlc2hvdywgU2xpZGVyUmVhY3RpdmVdLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgcmF0aW86IFN0cmluZyxcbiAgICAgICAgbWluSGVpZ2h0OiBOdW1iZXIsXG4gICAgICAgIG1heEhlaWdodDogTnVtYmVyXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgcmF0aW86ICcxNjo5JyxcbiAgICAgICAgbWluSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgbWF4SGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgc2VsTGlzdDogJy51ay1zbGlkZXNob3ctaXRlbXMnLFxuICAgICAgICBhdHRySXRlbTogJ3VrLXNsaWRlc2hvdy1pdGVtJyxcbiAgICAgICAgc2VsTmF2OiAnLnVrLXNsaWRlc2hvdy1uYXYnLFxuICAgICAgICBBbmltYXRpb25zXG4gICAgfSxcblxuICAgIHVwZGF0ZToge1xuXG4gICAgICAgIHJlYWQoKSB7XG5cbiAgICAgICAgICAgIGxldCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLnJhdGlvLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG5cbiAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAqIHRoaXMubGlzdC5vZmZzZXRXaWR0aCAvIHdpZHRoIHx8IDA7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm1pbkhlaWdodCkge1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgubWF4KHRoaXMubWluSGVpZ2h0LCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbih0aGlzLm1heEhlaWdodCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtoZWlnaHQ6IGhlaWdodCAtIGJveE1vZGVsQWRqdXN0KHRoaXMubGlzdCwgJ2hlaWdodCcsICdjb250ZW50LWJveCcpfTtcbiAgICAgICAgfSxcblxuICAgICAgICB3cml0ZSh7aGVpZ2h0fSkge1xuICAgICAgICAgICAgaGVpZ2h0ID4gMCAmJiBjc3ModGhpcy5saXN0LCAnbWluSGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IFsncmVzaXplJ11cblxuICAgIH1cblxufTtcbiIsImltcG9ydCBBbmltYXRlIGZyb20gJy4uL21peGluL2FuaW1hdGUnO1xuaW1wb3J0IENsYXNzIGZyb20gJy4uL21peGluL2NsYXNzJztcbmltcG9ydCB7JCQsIGFkZENsYXNzLCBhZnRlciwgYXNzaWduLCBhcHBlbmQsIGJlZm9yZSwgY2hpbGRyZW4sIGNsYW1wLCBjc3MsIGdldEV2ZW50UG9zLCBoZWlnaHQsIGluY2x1ZGVzLCBpbmRleCwgaXNFbXB0eSwgaXNJbnB1dCwgb2Zmc2V0LCBvZmYsIG9uLCBwb2ludGVyRG93biwgcG9pbnRlck1vdmUsIHBvaW50ZXJVcCwgcmVtb3ZlLCByZW1vdmVDbGFzcywgc2Nyb2xsUGFyZW50cywgc2Nyb2xsVG9wLCB0b2dnbGVDbGFzcywgdHJpZ2dlciwgd2l0aGluLCBnZXRWaWV3cG9ydH0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0NsYXNzLCBBbmltYXRlXSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGdyb3VwOiBTdHJpbmcsXG4gICAgICAgIHRocmVzaG9sZDogTnVtYmVyLFxuICAgICAgICBjbHNJdGVtOiBTdHJpbmcsXG4gICAgICAgIGNsc1BsYWNlaG9sZGVyOiBTdHJpbmcsXG4gICAgICAgIGNsc0RyYWc6IFN0cmluZyxcbiAgICAgICAgY2xzRHJhZ1N0YXRlOiBTdHJpbmcsXG4gICAgICAgIGNsc0Jhc2U6IFN0cmluZyxcbiAgICAgICAgY2xzTm9EcmFnOiBTdHJpbmcsXG4gICAgICAgIGNsc0VtcHR5OiBTdHJpbmcsXG4gICAgICAgIGNsc0N1c3RvbTogU3RyaW5nLFxuICAgICAgICBoYW5kbGU6IFN0cmluZ1xuICAgIH0sXG5cbiAgICBkYXRhOiB7XG4gICAgICAgIGdyb3VwOiBmYWxzZSxcbiAgICAgICAgdGhyZXNob2xkOiA1LFxuICAgICAgICBjbHNJdGVtOiAndWstc29ydGFibGUtaXRlbScsXG4gICAgICAgIGNsc1BsYWNlaG9sZGVyOiAndWstc29ydGFibGUtcGxhY2Vob2xkZXInLFxuICAgICAgICBjbHNEcmFnOiAndWstc29ydGFibGUtZHJhZycsXG4gICAgICAgIGNsc0RyYWdTdGF0ZTogJ3VrLWRyYWcnLFxuICAgICAgICBjbHNCYXNlOiAndWstc29ydGFibGUnLFxuICAgICAgICBjbHNOb0RyYWc6ICd1ay1zb3J0YWJsZS1ub2RyYWcnLFxuICAgICAgICBjbHNFbXB0eTogJ3VrLXNvcnRhYmxlLWVtcHR5JyxcbiAgICAgICAgY2xzQ3VzdG9tOiAnJyxcbiAgICAgICAgaGFuZGxlOiBmYWxzZSxcbiAgICAgICAgcG9zOiB7fVxuICAgIH0sXG5cbiAgICBjcmVhdGVkKCkge1xuICAgICAgICBbJ2luaXQnLCAnc3RhcnQnLCAnbW92ZScsICdlbmQnXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmbiA9IHRoaXNba2V5XTtcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICBhc3NpZ24odGhpcy5wb3MsIGdldEV2ZW50UG9zKGUsICdwYWdlJykpO1xuXG4gICAgICAgICAgICAgICAgZm4oZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG5cbiAgICAgICAgbmFtZTogcG9pbnRlckRvd24sXG4gICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICBoYW5kbGVyOiAnaW5pdCdcblxuICAgIH0sXG5cbiAgICB1cGRhdGU6IHtcblxuICAgICAgICB3cml0ZSgpIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2xzRW1wdHkpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNFbXB0eSwgaXNFbXB0eSh0aGlzLiRlbC5jaGlsZHJlbikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjc3ModGhpcy5oYW5kbGUgPyAkJCh0aGlzLmhhbmRsZSwgdGhpcy4kZWwpIDogdGhpcy4kZWwuY2hpbGRyZW4sIHt0b3VjaEFjdGlvbjogJ25vbmUnLCB1c2VyU2VsZWN0OiAnbm9uZSd9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZykge1xuXG4gICAgICAgICAgICAgICAgLy8gY2xhbXAgdG8gdmlld3BvcnRcbiAgICAgICAgICAgICAgICBjb25zdCB7cmlnaHQsIGJvdHRvbX0gPSBvZmZzZXQod2luZG93KTtcbiAgICAgICAgICAgICAgICBvZmZzZXQodGhpcy5kcmFnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogY2xhbXAodGhpcy5wb3MueSArIHRoaXMub3JpZ2luLnRvcCwgMCwgYm90dG9tIC0gdGhpcy5kcmFnLm9mZnNldEhlaWdodCksXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGNsYW1wKHRoaXMucG9zLnggKyB0aGlzLm9yaWdpbi5sZWZ0LCAwLCByaWdodCAtIHRoaXMuZHJhZy5vZmZzZXRXaWR0aClcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgaW5pdChlKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHt0YXJnZXQsIGJ1dHRvbiwgZGVmYXVsdFByZXZlbnRlZH0gPSBlO1xuICAgICAgICAgICAgY29uc3QgW3BsYWNlaG9sZGVyXSA9IGNoaWxkcmVuKHRoaXMuJGVsKS5maWx0ZXIoZWwgPT4gd2l0aGluKHRhcmdldCwgZWwpKTtcblxuICAgICAgICAgICAgaWYgKCFwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgIHx8IGRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgICAgICAgICB8fCBidXR0b24gPiAwXG4gICAgICAgICAgICAgICAgfHwgaXNJbnB1dCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgfHwgd2l0aGluKHRhcmdldCwgYC4ke3RoaXMuY2xzTm9EcmFnfWApXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5oYW5kbGUgJiYgIXdpdGhpbih0YXJnZXQsIHRoaXMuaGFuZGxlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHRoaXMudG91Y2hlZCA9IFt0aGlzXTtcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luID0gYXNzaWduKHt0YXJnZXQsIGluZGV4OiBpbmRleChwbGFjZWhvbGRlcil9LCB0aGlzLnBvcyk7XG5cbiAgICAgICAgICAgIG9uKGRvY3VtZW50LCBwb2ludGVyTW92ZSwgdGhpcy5tb3ZlKTtcbiAgICAgICAgICAgIG9uKGRvY3VtZW50LCBwb2ludGVyVXAsIHRoaXMuZW5kKTtcbiAgICAgICAgICAgIG9uKHdpbmRvdywgJ3Njcm9sbCcsIHRoaXMuc2Nyb2xsKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBzdGFydChlKSB7XG5cbiAgICAgICAgICAgIHRoaXMuZHJhZyA9IGFwcGVuZERyYWcodGhpcy4kY29udGFpbmVyLCB0aGlzLnBsYWNlaG9sZGVyKTtcblxuICAgICAgICAgICAgY29uc3Qge2xlZnQsIHRvcH0gPSBvZmZzZXQodGhpcy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICBhc3NpZ24odGhpcy5vcmlnaW4sIHtsZWZ0OiBsZWZ0IC0gdGhpcy5wb3MueCwgdG9wOiB0b3AgLSB0aGlzLnBvcy55fSk7XG5cbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuZHJhZywgdGhpcy5jbHNEcmFnLCB0aGlzLmNsc0N1c3RvbSk7XG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLnBsYWNlaG9sZGVyLCB0aGlzLmNsc1BsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGVsLmNoaWxkcmVuLCB0aGlzLmNsc0l0ZW0pO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmNsc0RyYWdTdGF0ZSk7XG5cbiAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdzdGFydCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG5cbiAgICAgICAgICAgIHRyYWNrU2Nyb2xsKHRoaXMucG9zKTtcblxuICAgICAgICAgICAgdGhpcy5tb3ZlKGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmUoZSkge1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuZHJhZykge1xuXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMucG9zLnggLSB0aGlzLm9yaWdpbi54KSA+IHRoaXMudGhyZXNob2xkIHx8IE1hdGguYWJzKHRoaXMucG9zLnkgLSB0aGlzLm9yaWdpbi55KSA+IHRoaXMudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCk7XG5cbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnR5cGUgPT09ICdtb3VzZW1vdmUnID8gZS50YXJnZXQgOiBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRoaXMucG9zLnggLSB3aW5kb3cucGFnZVhPZmZzZXQsIHRoaXMucG9zLnkgLSB3aW5kb3cucGFnZVlPZmZzZXQpO1xuXG4gICAgICAgICAgICBjb25zdCBzb3J0YWJsZSA9IHRoaXMuZ2V0U29ydGFibGUodGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5nZXRTb3J0YWJsZSh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIGNvbnN0IG1vdmUgPSBzb3J0YWJsZSAhPT0gcHJldmlvdXM7XG5cbiAgICAgICAgICAgIGlmICghc29ydGFibGUgfHwgd2l0aGluKHRhcmdldCwgdGhpcy5wbGFjZWhvbGRlcikgfHwgbW92ZSAmJiAoIXNvcnRhYmxlLmdyb3VwIHx8IHNvcnRhYmxlLmdyb3VwICE9PSBwcmV2aW91cy5ncm91cCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhcmdldCA9IHNvcnRhYmxlLiRlbCA9PT0gdGFyZ2V0LnBhcmVudE5vZGUgJiYgdGFyZ2V0IHx8IGNoaWxkcmVuKHNvcnRhYmxlLiRlbCkuZmlsdGVyKGVsZW1lbnQgPT4gd2l0aGluKHRhcmdldCwgZWxlbWVudCkpWzBdO1xuXG4gICAgICAgICAgICBpZiAobW92ZSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzLnJlbW92ZSh0aGlzLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc29ydGFibGUuaW5zZXJ0KHRoaXMucGxhY2Vob2xkZXIsIHRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmICghaW5jbHVkZXModGhpcy50b3VjaGVkLCBzb3J0YWJsZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoZWQucHVzaChzb3J0YWJsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBlbmQoZSkge1xuXG4gICAgICAgICAgICBvZmYoZG9jdW1lbnQsIHBvaW50ZXJNb3ZlLCB0aGlzLm1vdmUpO1xuICAgICAgICAgICAgb2ZmKGRvY3VtZW50LCBwb2ludGVyVXAsIHRoaXMuZW5kKTtcbiAgICAgICAgICAgIG9mZih3aW5kb3csICdzY3JvbGwnLCB0aGlzLnNjcm9sbCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5kcmFnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoZW5kJykge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGljaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdW50cmFja1Njcm9sbCgpO1xuXG4gICAgICAgICAgICBjb25zdCBzb3J0YWJsZSA9IHRoaXMuZ2V0U29ydGFibGUodGhpcy5wbGFjZWhvbGRlcik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzID09PSBzb3J0YWJsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9yaWdpbi5pbmRleCAhPT0gaW5kZXgodGhpcy5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ21vdmVkJywgW3RoaXMsIHRoaXMucGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIoc29ydGFibGUuJGVsLCAnYWRkZWQnLCBbc29ydGFibGUsIHRoaXMucGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRoaXMuJGVsLCAncmVtb3ZlZCcsIFt0aGlzLCB0aGlzLnBsYWNlaG9sZGVyXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyaWdnZXIodGhpcy4kZWwsICdzdG9wJywgW3RoaXMsIHRoaXMucGxhY2Vob2xkZXJdKTtcblxuICAgICAgICAgICAgcmVtb3ZlKHRoaXMuZHJhZyk7XG4gICAgICAgICAgICB0aGlzLmRyYWcgPSBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBjbGFzc2VzID0gdGhpcy50b3VjaGVkLm1hcChzb3J0YWJsZSA9PiBgJHtzb3J0YWJsZS5jbHNQbGFjZWhvbGRlcn0gJHtzb3J0YWJsZS5jbHNJdGVtfWApLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIHRoaXMudG91Y2hlZC5mb3JFYWNoKHNvcnRhYmxlID0+IHJlbW92ZUNsYXNzKHNvcnRhYmxlLiRlbC5jaGlsZHJlbiwgY2xhc3NlcykpO1xuXG4gICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuY2xzRHJhZ1N0YXRlKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHNjcm9sbCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgIGlmIChzY3JvbGwgIT09IHRoaXMuc2Nyb2xsWSkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9zLnkgKz0gc2Nyb2xsIC0gdGhpcy5zY3JvbGxZO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsWSA9IHNjcm9sbDtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zZXJ0KGVsZW1lbnQsIHRhcmdldCkge1xuXG4gICAgICAgICAgICBhZGRDbGFzcyh0aGlzLiRlbC5jaGlsZHJlbiwgdGhpcy5jbHNJdGVtKTtcblxuICAgICAgICAgICAgY29uc3QgaW5zZXJ0ID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2l0aGluKGVsZW1lbnQsIHRoaXMuJGVsKSB8fCBpc1ByZWRlY2Vzc29yKGVsZW1lbnQsIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSh0YXJnZXQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIodGFyZ2V0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kKHRoaXMuJGVsLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShpbnNlcnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnNlcnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZShlbGVtZW50KSB7XG5cbiAgICAgICAgICAgIGlmICghd2l0aGluKGVsZW1lbnQsIHRoaXMuJGVsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3NzKHRoaXMuaGFuZGxlID8gJCQodGhpcy5oYW5kbGUsIGVsZW1lbnQpIDogZWxlbWVudCwge3RvdWNoQWN0aW9uOiAnJywgdXNlclNlbGVjdDogJyd9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlKCgpID0+IHJlbW92ZShlbGVtZW50KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGdldFNvcnRhYmxlKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmICh0aGlzLiRnZXRDb21wb25lbnQoZWxlbWVudCwgJ3NvcnRhYmxlJykgfHwgdGhpcy5nZXRTb3J0YWJsZShlbGVtZW50LnBhcmVudE5vZGUpKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5mdW5jdGlvbiBpc1ByZWRlY2Vzc29yKGVsZW1lbnQsIHRhcmdldCkge1xuICAgIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgPT09IHRhcmdldC5wYXJlbnROb2RlICYmIGluZGV4KGVsZW1lbnQpID4gaW5kZXgodGFyZ2V0KTtcbn1cblxubGV0IHRyYWNrVGltZXI7XG5mdW5jdGlvbiB0cmFja1Njcm9sbChwb3MpIHtcblxuICAgIHRyYWNrVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3Qge3gsIHl9ID0gcG9zO1xuICAgICAgICBzY3JvbGxQYXJlbnRzKGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCAtIHdpbmRvdy5wYWdlWE9mZnNldCwgeSAtIHdpbmRvdy5wYWdlWU9mZnNldCkpLnNvbWUoc2Nyb2xsRWwgPT4ge1xuXG4gICAgICAgICAgICBsZXQge3Njcm9sbFRvcDogc2Nyb2xsLCBzY3JvbGxIZWlnaHR9ID0gc2Nyb2xsRWw7XG5cbiAgICAgICAgICAgIGNvbnN0IHt0b3AsIGJvdHRvbSwgaGVpZ2h0fSA9IG9mZnNldChnZXRWaWV3cG9ydChzY3JvbGxFbCkpO1xuXG4gICAgICAgICAgICBpZiAodG9wIDwgeSAmJiB0b3AgKyAzMCA+IHkpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGwgLT0gNTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYm90dG9tID4geSAmJiBib3R0b20gLSAzMCA8IHkpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGwgKz0gNTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2Nyb2xsID4gMCAmJiBzY3JvbGwgPCBzY3JvbGxIZWlnaHQgLSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3Aoc2Nyb2xsRWwsIHNjcm9sbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9LCAxNSk7XG5cbn1cblxuZnVuY3Rpb24gdW50cmFja1Njcm9sbCgpIHtcbiAgICBjbGVhckludGVydmFsKHRyYWNrVGltZXIpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmREcmFnKGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgIGNvbnN0IGNsb25lID0gYXBwZW5kKGNvbnRhaW5lciwgZWxlbWVudC5vdXRlckhUTUwucmVwbGFjZSgvKF48KWxpfGxpKFxcLz4kKS9nLCAnJDFkaXYkMicpKTtcblxuICAgIGNzcyhjbG9uZSwgYXNzaWduKHtcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LCBjc3MoZWxlbWVudCwgWydwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nQm90dG9tJ10pKSk7XG5cbiAgICBoZWlnaHQoY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQsIGhlaWdodChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSk7XG5cbiAgICByZXR1cm4gY2xvbmU7XG59XG4iLCJpbXBvcnQgQ29udGFpbmVyIGZyb20gJy4uL21peGluL2NvbnRhaW5lcic7XG5pbXBvcnQgVG9nZ2xhYmxlIGZyb20gJy4uL21peGluL3RvZ2dsYWJsZSc7XG5pbXBvcnQgUG9zaXRpb24gZnJvbSAnLi4vbWl4aW4vcG9zaXRpb24nO1xuaW1wb3J0IHthcHBlbmQsIGF0dHIsIGZsaXBQb3NpdGlvbiwgaGFzQXR0ciwgaW5jbHVkZXMsIGlzVG91Y2gsIGlzVmlzaWJsZSwgbWF0Y2hlcywgb24sIHBvaW50ZXJEb3duLCBwb2ludGVyRW50ZXIsIHBvaW50ZXJMZWF2ZSwgcG9pbnRlclVwLCByZW1vdmUsIHdpdGhpbn0gZnJvbSAndWlraXQtdXRpbCc7XG5cbmNvbnN0IGFjdGl2ZXMgPSBbXTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQ29udGFpbmVyLCBUb2dnbGFibGUsIFBvc2l0aW9uXSxcblxuICAgIGFyZ3M6ICd0aXRsZScsXG5cbiAgICBwcm9wczoge1xuICAgICAgICBkZWxheTogTnVtYmVyLFxuICAgICAgICB0aXRsZTogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgcG9zOiAndG9wJyxcbiAgICAgICAgdGl0bGU6ICcnLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgYW5pbWF0aW9uOiBbJ3VrLWFuaW1hdGlvbi1zY2FsZS11cCddLFxuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBjbHM6ICd1ay1hY3RpdmUnLFxuICAgICAgICBjbHNQb3M6ICd1ay10b29sdGlwJ1xuICAgIH0sXG5cbiAgICBiZWZvcmVDb25uZWN0KCkge1xuICAgICAgICB0aGlzLl9oYXNUaXRsZSA9IGhhc0F0dHIodGhpcy4kZWwsICd0aXRsZScpO1xuICAgICAgICBhdHRyKHRoaXMuJGVsLCB7dGl0bGU6ICcnLCAnYXJpYS1leHBhbmRlZCc6IGZhbHNlfSk7XG4gICAgfSxcblxuICAgIGRpc2Nvbm5lY3RlZCgpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIGF0dHIodGhpcy4kZWwsIHt0aXRsZTogdGhpcy5faGFzVGl0bGUgPyB0aGlzLnRpdGxlIDogbnVsbCwgJ2FyaWEtZXhwYW5kZWQnOiBudWxsfSk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzaG93KCkge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpIHx8ICF0aGlzLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhY3RpdmVzLmZvckVhY2goYWN0aXZlID0+IGFjdGl2ZS5oaWRlKCkpO1xuICAgICAgICAgICAgYWN0aXZlcy5wdXNoKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLl91bmJpbmQgPSBvbihkb2N1bWVudCwgcG9pbnRlclVwLCBlID0+ICF3aXRoaW4oZS50YXJnZXQsIHRoaXMuJGVsKSAmJiB0aGlzLmhpZGUoKSk7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lcik7XG4gICAgICAgICAgICB0aGlzLnNob3dUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUaW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmlzaWJsZSh0aGlzLiRlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LCAxNTApO1xuICAgICAgICAgICAgfSwgdGhpcy5kZWxheSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZSgpIHtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkgfHwgbWF0Y2hlcyh0aGlzLiRlbCwgJ2lucHV0OmZvY3VzJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFjdGl2ZXMuc3BsaWNlKGFjdGl2ZXMuaW5kZXhPZih0aGlzKSwgMSk7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lcik7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaGlkZVRpbWVyKTtcbiAgICAgICAgICAgIGF0dHIodGhpcy4kZWwsICdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudG9vbHRpcCwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwICYmIHJlbW92ZSh0aGlzLnRvb2x0aXApO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl91bmJpbmQoKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIF9zaG93KCkge1xuXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSBhcHBlbmQodGhpcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCIke3RoaXMuY2xzUG9zfVwiIGFyaWEtZXhwYW5kZWQ9XCJ0cnVlXCIgYXJpYS1oaWRkZW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3RoaXMuY2xzUG9zfS1pbm5lclwiPiR7dGhpcy50aXRsZX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgPC9kaXY+YFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkF0KHRoaXMudG9vbHRpcCwgdGhpcy4kZWwpO1xuXG4gICAgICAgICAgICB0aGlzLm9yaWdpbiA9IHRoaXMuZ2V0QXhpcygpID09PSAneSdcbiAgICAgICAgICAgICAgICA/IGAke2ZsaXBQb3NpdGlvbih0aGlzLmRpcil9LSR7dGhpcy5hbGlnbn1gXG4gICAgICAgICAgICAgICAgOiBgJHt0aGlzLmFsaWdufS0ke2ZsaXBQb3NpdGlvbih0aGlzLmRpcil9YDtcblxuICAgICAgICAgICAgdGhpcy50b2dnbGVFbGVtZW50KHRoaXMudG9vbHRpcCwgdHJ1ZSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmNsdWRlcyhhY3RpdmVzLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuXG4gICAgICAgIGZvY3VzOiAnc2hvdycsXG4gICAgICAgIGJsdXI6ICdoaWRlJyxcblxuICAgICAgICBbYCR7cG9pbnRlckVudGVyfSAke3BvaW50ZXJMZWF2ZX1gXShlKSB7XG4gICAgICAgICAgICBpZiAoaXNUb3VjaChlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUudHlwZSA9PT0gcG9pbnRlckVudGVyXG4gICAgICAgICAgICAgICAgPyB0aGlzLnNob3coKVxuICAgICAgICAgICAgICAgIDogdGhpcy5oaWRlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgW3BvaW50ZXJEb3duXShlKSB7XG4gICAgICAgICAgICBpZiAoIWlzVG91Y2goZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZlKClcbiAgICAgICAgICAgICAgICA/IHRoaXMuaGlkZSgpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuIiwiaW1wb3J0IHthZGRDbGFzcywgYWpheCwgbWF0Y2hlcywgbm9vcCwgb24sIHJlbW92ZUNsYXNzLCB0cmlnZ2VyfSBmcm9tICd1aWtpdC11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgYWxsb3c6IFN0cmluZyxcbiAgICAgICAgY2xzRHJhZ292ZXI6IFN0cmluZyxcbiAgICAgICAgY29uY3VycmVudDogTnVtYmVyLFxuICAgICAgICBtYXhTaXplOiBOdW1iZXIsXG4gICAgICAgIG1ldGhvZDogU3RyaW5nLFxuICAgICAgICBtaW1lOiBTdHJpbmcsXG4gICAgICAgIG1zZ0ludmFsaWRNaW1lOiBTdHJpbmcsXG4gICAgICAgIG1zZ0ludmFsaWROYW1lOiBTdHJpbmcsXG4gICAgICAgIG1zZ0ludmFsaWRTaXplOiBTdHJpbmcsXG4gICAgICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgIHBhcmFtczogT2JqZWN0LFxuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHVybDogU3RyaW5nXG4gICAgfSxcblxuICAgIGRhdGE6IHtcbiAgICAgICAgYWxsb3c6IGZhbHNlLFxuICAgICAgICBjbHNEcmFnb3ZlcjogJ3VrLWRyYWdvdmVyJyxcbiAgICAgICAgY29uY3VycmVudDogMSxcbiAgICAgICAgbWF4U2l6ZTogMCxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIG1pbWU6IGZhbHNlLFxuICAgICAgICBtc2dJbnZhbGlkTWltZTogJ0ludmFsaWQgRmlsZSBUeXBlOiAlcycsXG4gICAgICAgIG1zZ0ludmFsaWROYW1lOiAnSW52YWxpZCBGaWxlIE5hbWU6ICVzJyxcbiAgICAgICAgbXNnSW52YWxpZFNpemU6ICdJbnZhbGlkIEZpbGUgU2l6ZTogJXMgS2lsb2J5dGVzIE1heCcsXG4gICAgICAgIG11bHRpcGxlOiBmYWxzZSxcbiAgICAgICAgbmFtZTogJ2ZpbGVzW10nLFxuICAgICAgICBwYXJhbXM6IHt9LFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgYWJvcnQ6IG5vb3AsXG4gICAgICAgIGJlZm9yZUFsbDogbm9vcCxcbiAgICAgICAgYmVmb3JlU2VuZDogbm9vcCxcbiAgICAgICAgY29tcGxldGU6IG5vb3AsXG4gICAgICAgIGNvbXBsZXRlQWxsOiBub29wLFxuICAgICAgICBlcnJvcjogbm9vcCxcbiAgICAgICAgZmFpbDogbm9vcCxcbiAgICAgICAgbG9hZDogbm9vcCxcbiAgICAgICAgbG9hZEVuZDogbm9vcCxcbiAgICAgICAgbG9hZFN0YXJ0OiBub29wLFxuICAgICAgICBwcm9ncmVzczogbm9vcFxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcblxuICAgICAgICBjaGFuZ2UoZSkge1xuXG4gICAgICAgICAgICBpZiAoIW1hdGNoZXMoZS50YXJnZXQsICdpbnB1dFt0eXBlPVwiZmlsZVwiXScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5maWxlcykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKGUudGFyZ2V0LmZpbGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZS50YXJnZXQudmFsdWUgPSAnJztcbiAgICAgICAgfSxcblxuICAgICAgICBkcm9wKGUpIHtcbiAgICAgICAgICAgIHN0b3AoZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZmVyID0gZS5kYXRhVHJhbnNmZXI7XG5cbiAgICAgICAgICAgIGlmICghdHJhbnNmZXIgfHwgIXRyYW5zZmVyLmZpbGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgdGhpcy5jbHNEcmFnb3Zlcik7XG5cbiAgICAgICAgICAgIHRoaXMudXBsb2FkKHRyYW5zZmVyLmZpbGVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkcmFnZW50ZXIoZSkge1xuICAgICAgICAgICAgc3RvcChlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkcmFnb3ZlcihlKSB7XG4gICAgICAgICAgICBzdG9wKGUpO1xuICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRHJhZ292ZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyYWdsZWF2ZShlKSB7XG4gICAgICAgICAgICBzdG9wKGUpO1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy4kZWwsIHRoaXMuY2xzRHJhZ292ZXIpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHVwbG9hZChmaWxlcykge1xuXG4gICAgICAgICAgICBpZiAoIWZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJpZ2dlcih0aGlzLiRlbCwgJ3VwbG9hZCcsIFtmaWxlc10pO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMubWF4U2l6ZSAqIDEwMDAgPCBmaWxlc1tpXS5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCh0aGlzLm1zZ0ludmFsaWRTaXplLnJlcGxhY2UoJyVzJywgdGhpcy5tYXhTaXplKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hbGxvdyAmJiAhbWF0Y2godGhpcy5hbGxvdywgZmlsZXNbaV0ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKHRoaXMubXNnSW52YWxpZE5hbWUucmVwbGFjZSgnJXMnLCB0aGlzLmFsbG93KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5taW1lICYmICFtYXRjaCh0aGlzLm1pbWUsIGZpbGVzW2ldLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCh0aGlzLm1zZ0ludmFsaWRNaW1lLnJlcGxhY2UoJyVzJywgdGhpcy5taW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLm11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgZmlsZXMgPSBbZmlsZXNbMF1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmJlZm9yZUFsbCh0aGlzLCBmaWxlcyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNodW5rcyA9IGNodW5rKGZpbGVzLCB0aGlzLmNvbmN1cnJlbnQpO1xuICAgICAgICAgICAgY29uc3QgdXBsb2FkID0gZmlsZXMgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgICAgICAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IGRhdGEuYXBwZW5kKHRoaXMubmFtZSwgZmlsZSkpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5hcHBlbmQoa2V5LCB0aGlzLnBhcmFtc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhamF4KHRoaXMudXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBlbnYgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7eGhyfSA9IGVudjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci51cGxvYWQgJiYgb24oeGhyLnVwbG9hZCwgJ3Byb2dyZXNzJywgdGhpcy5wcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2xvYWRTdGFydCcsICdsb2FkJywgJ2xvYWRFbmQnLCAnYWJvcnQnXS5mb3JFYWNoKHR5cGUgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbih4aHIsIHR5cGUudG9Mb3dlckNhc2UoKSwgdGhpc1t0eXBlXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlU2VuZChlbnYpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS50aGVuKFxuICAgICAgICAgICAgICAgICAgICB4aHIgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlKHhocik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaHVua3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkKGNodW5rcy5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZUFsbCh4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGUgPT4gdGhpcy5lcnJvcihlKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHVwbG9hZChjaHVua3Muc2hpZnQoKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5mdW5jdGlvbiBtYXRjaChwYXR0ZXJuLCBwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGgubWF0Y2gobmV3IFJlZ0V4cChgXiR7cGF0dGVybi5yZXBsYWNlKC9cXC8vZywgJ1xcXFwvJykucmVwbGFjZSgvXFwqXFwqL2csICcoXFxcXC9bXlxcXFwvXSspKicpLnJlcGxhY2UoL1xcKi9nLCAnW15cXFxcL10rJykucmVwbGFjZSgvKCg/IVxcXFwpKVxcPy9nLCAnJDEuJyl9JGAsICdpJykpO1xufVxuXG5mdW5jdGlvbiBjaHVuayhmaWxlcywgc2l6ZSkge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IHNpemUpIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgICAgICAgIGNodW5rLnB1c2goZmlsZXNbaSArIGpdKTtcbiAgICAgICAgfVxuICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgfVxuICAgIHJldHVybiBjaHVua3M7XG59XG5cbmZ1bmN0aW9uIHN0b3AoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IFVJa2l0IGZyb20gJy4vYXBpL2luZGV4JztcbmltcG9ydCBDb3JlIGZyb20gJy4vY29yZS9jb3JlJztcbmltcG9ydCBib290IGZyb20gJy4vYXBpL2Jvb3QnO1xuaW1wb3J0ICogYXMgY29yZUNvbXBvbmVudHMgZnJvbSAnLi9jb3JlL2luZGV4JztcbmltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAnLi9jb21wb25lbnRzL2luZGV4JztcbmltcG9ydCB7ZWFjaH0gZnJvbSAnLi91dGlsL2xhbmcnO1xuXG4vLyByZWdpc3RlciBjb21wb25lbnRzXG5lYWNoKGNvcmVDb21wb25lbnRzLCByZWdpc3Rlcik7XG5lYWNoKGNvbXBvbmVudHMsIHJlZ2lzdGVyKTtcblxuLy8gY29yZSBmdW5jdGlvbmFsaXR5XG5VSWtpdC51c2UoQ29yZSk7XG5cbmJvb3QoVUlraXQpO1xuXG5leHBvcnQgZGVmYXVsdCBVSWtpdDtcblxuZnVuY3Rpb24gcmVnaXN0ZXIoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgVUlraXQuY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCk7XG59XG4iXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiLCJhcmd1bWVudHMiLCJ0aGlzIiwic2VsZWN0b3JzIiwiYXBwbHkiLCJnZXRBcmdzIiwicmVtb3ZlIiwia2V5IiwiaSIsImRhdGEiLCJnZXREYXRhIiwicHJvcCIsIm5hbWUiLCJvZmZzZXQiLCJnZXRPZmZzZXQiLCJoZWlnaHQiLCJnZXRIZWlnaHQiLCJhY3RpdmUiLCJhbmltYXRlIiwiaW5zdGFsbCIsImdldFZpZXdwb3J0IiwiY2hpbGRyZW4iLCJnZXRDaGlsZHJlbiIsIkFuaW1hdGlvbnMiLCJ0cmlnZ2VyVXBkYXRlIiwiVHJhbnNpdGlvbmVyIiwibWF0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0lBQUFBLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDL0IsaURBQStCOztBQUV0QyxJQUFPLFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7UUFDN0IsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN4Qzs7SUFFREEsSUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBQzFCQSxJQUFNLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQzs7QUFFeEMsSUFBTyxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUU7O1FBRTNCLElBQUksRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLEVBQUU7WUFDMUIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUc7aUJBQ3BCLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDO2lCQUM3QixXQUFXLEVBQUUsQ0FBQztTQUN0Qjs7UUFFRCxPQUFP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